<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiye Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-17T09:42:02.075Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yiye Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库学习笔记VIII</title>
    <link href="http://yoursite.com/2020/01/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0VIII/"/>
    <id>http://yoursite.com/2020/01/17/数据库学习笔记VIII/</id>
    <published>2020-01-17T09:51:12.000Z</published>
    <updated>2020-01-17T09:42:02.075Z</updated>
    
    <content type="html"><![CDATA[<p>MS SQL Server和MySQL区别  </p><a id="more"></a><h1 id="MS-SQL-Server和MySQL区别"><a href="#MS-SQL-Server和MySQL区别" class="headerlink" title="MS SQL Server和MySQL区别"></a>MS SQL Server和MySQL区别</h1><p>MySQL支持enum,和set类型，SQL Server不支持</p><p>MySQL不支持nchar,nvarchar,ntext类型</p><p>MySQL的递增语句是AUTO_INCREMENT，而MS SQL是identity(1,1)</p><p>MS SQL不支持replace into 语句，但是在最新的sql20008里面，也支持merge语法</p><p>MySQL支持insert into table1 set t1 = “”, t2 = “”,但是MSSQL不支持这样写</p><p>MySQL支持insert into tabl1 values (1,1), (1,1), (1,1),(1,1),(1,1), (1,1), (1,1)</p><p>MS SQL不支持limit语句，是非常遗憾的，只能用top 取代limt0,N，row_number()over()函数取代limit N,M</p><p>MySQL在创建表时要为每个表指定一个存储引擎类型，而MS SQL只支持一种存储引擎</p><p>PHP连接MySQL和MS SQL的方式都差不多，只需要将函数的MySQL替换成MS SQL即可。</p><p>MySQL的管理工具有几个比较好的，MySQL_front,和官方那个套件，不过都没有SSMS的使用方便，这是MySQL很大的一个缺点。</p><p>MySQL需要为表指定存储类型</p><p>MS SQL识别符是,[type]表示他区别于关键字，但是MySQL却是 `，也就是按键1左边的那个符号</p><p>MSSQL支持getdate()方法获取当前时间日期，但是MySQL里面可以分日期类型和时间类型，获取当前日期是cur_date()，当前完整时间是now()函数</p><p>MySQL不支持默认值为当前时间的datetime类型（MSSQL很容易做到），在MySQL里面是用timestamp类型</p><p>MS SQL里面检查是否有这个表再删除，需要这样：<br>    　　if exists (select * from dbo.systs<br>    where id = t_id(N”uc_newpm”)andTPROPERTY(id,N”IsUserTable”)=1)<br>　　但是在MySQL里面只需要 DROP TABLE IF EXISTS cdb_forums;</p><p>MySQL text字段类型不允许有默认值</p><p>MySQL的一个表的总共字段长度不超过65XXX。</p><p>MS SQL默认到处表创建语句的默认值表示是((0)),而在MySQL里面是不允许带两括号的</p><p>同样的负载压力，MySQL要消耗更少的CPU和内存，MS SQL的确是很耗资源。</p><p>MySQL支持无符号型的整数，那么比不支持无符号型的MS SQL就能多出一倍的最大数存储</p><p>MySQL不支持在MSSQL里面使用非常方便的varchar(max)类型，这个类型在MSSQL里面既可做一般数据存储，也可以做blob数据存储</p><p>MySQL创建非聚集索引只需要在创建表的时候指定为key就行，比如：KEYdisplayorder(fid,displayorder) 在MS SQL里面必须要：</p><p>  　　create unique nonclustered index<br>  　　index_uc_protectedmrs_username_appid on dbo.uc_protectedmrs<br>  　　(username asc,appid asc)<br>一个很表面的区别就是MySQL的安装特别简单，而且文件大小才110M（非安装版）</p><p>MySQL的存储过程只是出现在最新的版本中，稳定性和性能可能不如MS SQL。</p><p>MySQL支持date,time,year类型，MS SQL到2008才支持date和time。</p><p>#参考资料<br>【1】 <a href="https://blog.csdn.net/xc_zhou/article/details/89002519" target="_blank" rel="noopener">https://blog.csdn.net/xc_zhou/article/details/89002519</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MS SQL Server和MySQL区别  &lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>1179. Reformat Department Table</title>
    <link href="http://yoursite.com/2020/01/17/1179.%20Reformat%20Department%20Table/"/>
    <id>http://yoursite.com/2020/01/17/1179. Reformat Department Table/</id>
    <published>2020-01-17T08:03:12.000Z</published>
    <updated>2020-01-17T09:36:07.059Z</updated>
    
    <content type="html"><![CDATA[<p>行转列(PIVOT)与列转行(UNPIVOT)的应用</p><a id="more"></a><p>以下是每个部门在每个月份的收入：</p><pre><code>Department table:+------+---------+-------+| id   | revenue | month |+------+---------+-------+| 1    | 8000    | Jan   || 2    | 9000    | Jan   || 3    | 10000   | Feb   || 1    | 7000    | Feb   || 1    | 6000    | Mar   |+------+---------+-------+</code></pre><p>但我们现在想要重组表的格式，变为：</p><pre><code>Result table:+------+-------------+-------------+-------------+-----+-------------+| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |+------+-------------+-------------+-------------+-----+-------------+| 1    | 8000        | 7000        | 6000        | ... | null        || 2    | 9000        | null        | null        | ... | null        || 3    | null        | 10000       | null        | ... | null        |+------+-------------+-------------+-------------+-----+-------------+</code></pre><p>比较直接的方法是：</p><pre><code>SELECT    id,    MAX(CASE WHEN month = &apos;Jan&apos; THEN revenue ELSE null END) AS Jan_Revenue,    MAX(CASE WHEN month = &apos;Feb&apos; THEN revenue ELSE null END) AS Feb_Revenue,    MAX(CASE WHEN month = &apos;Mar&apos; THEN revenue ELSE null END) AS Mar_Revenue,    MAX(CASE WHEN month = &apos;Apr&apos; THEN revenue ELSE null END) AS Apr_Revenue,    MAX(CASE WHEN month = &apos;May&apos; THEN revenue ELSE null END) AS May_Revenue,    MAX(CASE WHEN month = &apos;Jun&apos; THEN revenue ELSE null END) AS Jun_Revenue,    MAX(CASE WHEN month = &apos;Jul&apos; THEN revenue ELSE null END) AS Jul_Revenue,    MAX(CASE WHEN month = &apos;Aug&apos; THEN revenue ELSE null END) AS Aug_Revenue,    MAX(CASE WHEN month = &apos;Sep&apos; THEN revenue ELSE null END) AS Sep_Revenue,    MAX(CASE WHEN month = &apos;Oct&apos; THEN revenue ELSE null END) AS Oct_Revenue,    MAX(CASE WHEN month = &apos;Nov&apos; THEN revenue ELSE null END) AS Nov_Revenue,    MAX(CASE WHEN month = &apos;Dec&apos; THEN revenue ELSE null END) AS Dec_RevenueFROM DepartmentGROUP BY id</code></pre><p>使用行转列(PIVOT)：</p><pre><code>SELECT    id,    Jan AS Jan_Revenue,    Feb AS Feb_Revenue,    Mar AS Mar_Revenue,    Apr AS Apr_Revenue,    May AS May_Revenue,    Jun AS Jun_Revenue,    Jul AS Jul_Revenue,    Aug AS Aug_Revenue,    Sep AS Sep_Revenue,    Oct AS Oct_Revenue,    Nov AS Nov_Revenue,    Dec AS Dec_RevenueFROM DepartmentPIVOT(    MAX(revenue)    FOR month IN (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)        ) AS MonthsRevenue</code></pre><p>也就是说，行转列后，原来的某个列的值变做了列名，在这里就是原来month列的值“Jan”,”Feb”…”Dec”边做了列名，而我们需要做的另一个工作就是计算这些列的值（这里的“计算”其实就是PIVOT里面的聚合函数(sum,avg等)）<br>注意上面的解法要选择MS SQL Server而不是MySQL</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="https://leetcode.com/problems/reformat-department-table/discuss/382960/MSSQL-Multiple-joins-GroupBy-and-Pivot-table-solutions" target="_blank" rel="noopener">https://leetcode.com/problems/reformat-department-table/discuss/382960/MSSQL-Multiple-joins-GroupBy-and-Pivot-table-solutions</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;行转列(PIVOT)与列转行(UNPIVOT)的应用&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XVII</title>
    <link href="http://yoursite.com/2020/01/17/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XVII/"/>
    <id>http://yoursite.com/2020/01/17/Effective-Java阅读笔记XVII/</id>
    <published>2020-01-16T18:33:12.000Z</published>
    <updated>2020-01-17T10:32:00.125Z</updated>
    
    <content type="html"><![CDATA[<p>第五章阅读： 泛型<br>33.优先考虑类型安全的异构容器</p><a id="more"></a><p>　　泛型的常见用法包括集合，如 Set<e> 和 Map&lt;K，V&gt; 和单个元素容器，如 ThreadLocal<t> 和 AtomicReference<t>。 在所有这些用途中，它都是参数化的容器。 这限制了每个容器只能有固定数量的类型参数。 通常这正是你想要的。 一个 Set 有单一的类型参数，表示它的元素类型; 一个 Map 有两个，代表它的键和值的类型；等等。</t></t></e></p><p>　　然而有时候，你需要更多的灵活性。 例如，数据库一行记录可以具有任意多列，并且能够以类型安全的方式访问它们是很好的。 幸运的是，有一个简单的方法可以达到这个效果。 这个想法是参数化键（key）而不是容器。 然后将参数化的键提交给容器以插入或检索值。 泛型类型系统用于保证值的类型与其键一致。</p><p>　　作为这种方法的一个简单示例，请考虑一个 Favorites 类，它允许其客户端保存和检索任意多种类型的 favorite 实例。 该类型的 Class 对象将扮演参数化键的一部分。其原因是这 Class 类是泛型的。 类的类型从字面上来说不是简单的 Class，而是 Class<t>。 例如，String.class 的类型为 Class<string>，Integer.class 的类型为 Class<integer>。 当在方法中传递字面类传递编译时和运行时类型信息时，它被称为类型令牌（type token）[Bracha04]。</integer></string></t></p><p>　　Favorites 类的 API 很简单。 它看起来就像一个简单 Map 类，除了该键是参数化的以外。 客户端在设置和获取 favorites 实例时呈现一个 Class 对象。 如下是 API：</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/33.%20%E4%BC%98%E5%85%88%E8%80%83%E8%99%91%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%BC%82%E6%9E%84%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/33.%20%E4%BC%98%E5%85%88%E8%80%83%E8%99%91%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%BC%82%E6%9E%84%E5%AE%B9%E5%99%A8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第五章阅读： 泛型&lt;br&gt;33.优先考虑类型安全的异构容器&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XVI</title>
    <link href="http://yoursite.com/2020/01/17/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XVI/"/>
    <id>http://yoursite.com/2020/01/17/Effective-Java阅读笔记XVI/</id>
    <published>2020-01-16T17:33:12.000Z</published>
    <updated>2020-01-17T01:52:24.696Z</updated>
    
    <content type="html"><![CDATA[<p>第五章阅读： 泛型</p><p>31.使用限定通配符来增加 API 的灵活性<br>记住基本规则： producer-extends, consumer-super（PECS）。 还要记住，所有 Comparable 和 Comparator 都是消费者。如果一个参数化类型代表一个 T 生产者，使用 &lt;? extends T&gt;；如果它代表 T 消费者，则使用 &lt;? super T&gt;。<br>32.合理地结合泛型和可变参数<br>可变参数和泛型不能很好地交互，因为可变参数机制是在数组上面构建的脆弱的抽象，并且数组具有与泛型不同的类型规则。 虽然泛型可变参数不是类型安全的，但它们是合法的。 如果选择使用泛型（或参数化）可变参数编写方法，请首先确保该方法是类型安全的，然后使用 @SafeVarargs 注解对其进行标注</p><a id="more"></a><h1 id="使用限定通配符来增加-API-的灵活性"><a href="#使用限定通配符来增加-API-的灵活性" class="headerlink" title="使用限定通配符来增加 API 的灵活性"></a>使用限定通配符来增加 API 的灵活性</h1><p>　　如条目 28 所述，参数化类型是不变的。换句话说，对于任何两个不同类型的 Type1 和 Type，List<type1> 既不是 List<type2> 子类型也不是其父类型。尽管 List<string> 不是 List<object> 的子类型是违反直觉的，但它确实是有道理的。 可以将任何对象放入 List<object> 中，但是只能将字符串放入 List<string> 中。 由于 List<string> 不能做 List<object> 所能做的所有事情，所以它不是一个子类型（条目 10 中的里氏替代原则）。</object></string></string></object></object></string></type2></type1></p><p>　　相对于提供的不可变的类型，有时你需要比此更多的灵活性。 考虑条目 29 中的 Stack 类。下面是它的公共 API：</p><pre><code>public class Stack&lt;E&gt; {    public Stack();    public void push(E e);    public E pop();    public boolean isEmpty();}</code></pre><p>　　假设我们想要添加一个方法来获取一系列元素，并将它们全部推送到栈上。 以下是第一种尝试：</p><pre><code>// pushAll method without wildcard type - deficient!public void pushAll(Iterable&lt;E&gt; src) {    for (E e : src)        push(e);}</code></pre><p>　　这种方法可以干净地编译，但不完全令人满意。 如果可遍历的 src 元素类型与栈的元素类型完全匹配，那么它工作正常。 但是，假设有一个 Stack<number>，并调用 push(intVal)，其中 intVal 的类型是 Integer。 这是因为 Integer 是 Number 的子类型。 从逻辑上看，这似乎也应该起作用：</number></p><pre><code>Stack&lt;Number&gt; numberStack = new Stack&lt;&gt;();Iterable&lt;Integer&gt; integers = ... ;numberStack.pushAll(integers);</code></pre><p>　　但是，如果你尝试了，会得到这个错误消息，因为参数化类型是不变的：</p><pre><code>StackTest.java:7: error: incompatible types: Iterable&lt;Integer&gt;cannot be converted to Iterable&lt;Number&gt;        numberStack.pushAll(integers);                            ^</code></pre><p>　　幸运的是，有对应的解决方法。 该语言提供了一种特殊的参数化类型来调用一个限定通配符类型来处理这种情况。 pushAll 的输入参数的类型不应该是「E 的 Iterable 接口」，而应该是「E 的某个子类型的 Iterable 接口」，并且有一个通配符类型，这意味着：Iterable&lt;? extends E&gt;。 （关键字 extends 的使用有点误导：回忆条目 29 中，子类型被定义为每个类型都是它自己的子类型，即使它本身没有继承。）让我们修改 pushAll 来使用这个类型：</p><pre><code>// Wildcard type for a parameter that serves as an E producerpublic void pushAll(Iterable&lt;? extends E&gt; src) {    for (E e : src)        push(e);}</code></pre><p>　　有了这个改变，Stack 类不仅可以干净地编译，而且客户端代码也不会用原始的 pushAll 声明编译。 因为 Stack 和它的客户端干净地编译，你知道一切都是类型安全的。</p><p>　　现在假设你想写一个 popAll 方法，与 pushAll 方法相对应。 popAll 方法从栈中弹出每个元素并将元素添加到给定的集合中。 以下是第一次尝试编写 popAll 方法的过程：</p><pre><code>// popAll method without wildcard type - deficient!public void popAll(Collection&lt;E&gt; dst) {    while (!isEmpty())        dst.add(pop());}</code></pre><p>　　同样，如果目标集合的元素类型与栈的元素类型完全匹配，则干净编译并且工作正常。 但是，这又不完全令人满意。 假设你有一个 Stac<number> 和 Object 类型的变量。 如果从栈中弹出一个元素并将其存储在该变量中，它将编译并运行而不会出错。 所以你也不能这样做吗？</number></p><pre><code>Stack&lt;Number&gt; numberStack = new Stack&lt;Number&gt;();Collection&lt;Object&gt; objects = ... ;numberStack.popAll(objects);</code></pre><p>　　如果尝试将此客户端代码与之前显示的 popAll 版本进行编译，则会得到与我们的第一版 pushAll 非常类似的错误：Collection<object> 不是 Collection<number> 的子类型。 通配符类型再一次提供了一条出路。 popAll 的输入参数的类型不应该是「E 的集合」，而应该是「E 的某个父类型的集合」（其中父类型被定义为 E 是它自己的父类型[JLS，4.10]）。 再次，有一个通配符类型，正是这个意思：Collection&lt;? super E&gt;。 让我们修改 popAll 来使用它：</number></object></p><pre><code>// Wildcard type for parameter that serves as an E consumerpublic void popAll(Collection&lt;? super E&gt; dst) {    while (!isEmpty())        dst.add(pop());}</code></pre><p>　　通过这个改动，Stack 类和客户端代码都可以干净地编译。<br>　　这个结论很清楚。<strong><em>为了获得最大的灵活性，对代表生产者或消费者的输入参数使用通配符类型。</em></strong> 如果一个输入参数既是一个生产者又是一个消费者，那么通配符类型对你没有好处：你需要一个精确的类型匹配，这就是没有任何通配符的情况。</p><p>　　这里有一个助记符来帮助你记住使用哪种通配符类型： PECS 代表： producer-extends，consumer-super。</p><p>　　换句话说，如果一个参数化类型代表一个 T 生产者，使用 &lt;? extends T&gt;；如果它代表 T 消费者，则使用 &lt;? super T&gt;。 在我们的 Stack 示例中，pushAll 方法的 src 参数生成栈使用的 E 实例，因此 src 的合适类型为 Iterable&lt;? extends E&gt;；popAll 方法的 dst 参数消费 Stack 中的 E 实例，因此 dst 的合适类型是 Collection &lt;? super E&gt;。 PECS 助记符抓住了使用通配符类型的基本原则。 Naftalin 和 Wadler 称之为获取和放置原则（Get and Put Principle）[Naftalin07,2.4]。</p><p>　　记住这个助记符之后，让我们来看看本章中以前项目的一些方法和构造方法声明。 条目 28 中的 Chooser 类构造方法有这样的声明：</p><pre><code>public Chooser(Collection&lt;T&gt; choices)</code></pre><p>　　这个构造方法只使用集合选择来生产类型 T 的值（并将它们存储起来以备后用），所以它的声明应该使用一个 extends T 的通配符类型。下面是得到的构造方法声明：</p><pre><code>// Wildcard type for parameter that serves as an T producerpublic Chooser(Collection&lt;? extends T&gt; choices)</code></pre><p>　　这种改变在实践中会有什么不同吗？ 是的，会有不同。 假你有一个 List<integer>，并且想把它传递给 Chooser<number> 的构造方法。 这不会与原始声明一起编译，但是它只会将限定通配符类型添加到声明中。</number></integer></p><p>　　现在看看条目 30 中的 union 方法。下是声明：</p><pre><code>public static &lt;E&gt; Set&lt;E&gt; union(Set&lt;E&gt; s1, Set&lt;E&gt; s2)</code></pre><p>　　两个参数 s1 和 s2 都是 E 的生产者，所以 PECS 助记符告诉我们该声明应该如下：</p><pre><code>public static &lt;E&gt; Set&lt;E&gt; union(Set&lt;? extends E&gt; s1,  Set&lt;? extends E&gt; s2)</code></pre><p>　　请注意，返回类型仍然是 Set<e>。 不要使用限定通配符类型作为返回类型。除了会为用户提供额外的灵活性，还强制他们在客户端代码中使用通配符类型。 通过修改后的声明，此代码将清晰地编译：</e></p><pre><code>Set&lt;Integer&gt;  integers =  Set.of(1, 3, 5);Set&lt;Double&gt;   doubles  =  Set.of(2.0, 4.0, 6.0);Set&lt;Number&gt;   numbers  =  union(integers, doubles);</code></pre><p>　　如果使用得当，类的用户几乎不会看到通配符类型。 他们使方法接受他们应该接受的参数，拒绝他们应该拒绝的参数。 如果一个类的用户必须考虑通配符类型，那么它的 API 可能有问题。<br>　　在 Java 8 之前，类型推断规则不够聪明，无法处理先前的代码片段，这要求编译器使用上下文指定的返回类型（或目标类型）来推断 E 的类型。union 方法调用的目标类型如前所示是 Set<number>。 如果尝试在早期版本的 Java 中编译片段（以及适合的 Set.of 工厂替代版本），将会看到如此长的错综复杂的错误消息：</number></p><pre><code>Union.java:14: error: incompatible types        Set&lt;Number&gt; numbers = union(integers, doubles);                                   ^  required: Set&lt;Number&gt;  found:    Set&lt;INT#1&gt;  where INT#1,INT#2 are intersection types:    INT#1 extends Number,Comparable&lt;? extends INT#2&gt;    INT#2 extends Number,Comparable&lt;?&gt;</code></pre><p>　　幸运的是有办法来处理这种错误。 如果编译器不能推断出正确的类型，你可以随时告诉它使用什么类型的显式类型参数[JLS，15.12]。 甚至在 Java 8 中引入目标类型之前，这不是你必须经常做的事情，这很好，因为显式类型参数不是很漂亮。 通过添加显式类型参数，如下所示，代码片段在 Java 8 之前的版本中进行了干净编译：</p><pre><code>// Explicit type parameter - required prior to Java 8Set&lt;Number&gt; numbers = Union.&lt;Number&gt;union(integers, doubles);</code></pre><p>　　接下来让我们把注意力转向条目 30 中的 max 方法。这里是原始声明：</p><pre><code>public static &lt;T extends Comparable&lt;T&gt;&gt; T max(List&lt;T&gt; list)</code></pre><p>　为了从原来到修改后的声明，我们两次应用了 PECS。首先直接的应用是参数列表。 它生成 T 实例，所以将类型从 List<t> 更改为 List&lt;? extends T&gt;。 棘手的应用是类型参数 T。这是我们第一次看到通配符应用于类型参数。 最初，T 被指定为继承 Comparable<t>，但 Comparable 的 T 消费 T 实例（并生成指示顺序关系的整数）。 因此，参数化类型 Comparable<t> 被替换为限定通配符类型 Comparable&lt;? super T&gt;。 Comparable 实例总是消费者，所以通常应该使用 Comparable&lt;? super T&gt; 优于 Comparable<t>。 Comparator 也是如此。因此，通常应该使用 Comparator&lt;? super T&gt; 优于 Comparator<t>。<br>　　修改后的 max 声明可能是本书中最复杂的方法声明。 增加的复杂性是否真的起作用了吗？ 同样，它的确如此。 这是一个列表的简单例子，它被原始声明排除，但在被修改后的版本里是允许的：</t></t></t></t></t></p><pre><code>List&lt;ScheduledFuture&lt;?&gt;&gt; scheduledFutures = ... ;</code></pre><p>　　无法将原始方法声明应用于此列表的原因是 ScheduledFuture 不实现 Comparable<scheduledfuture>。 相反，它是 Delayed 的子接口，它继承了 Comparable<delayed>。 换句话说，一个 ScheduledFuture 实例不仅仅和其他的 ScheduledFuture 实例相比较： 它可以与任何 Delayed 实例比较，并且足以导致原始的声明拒绝它。 更普遍地说，通配符要求来支持没有直接实现 Comparable（或 Comparator）的类型，但继承了一个类型。</delayed></scheduledfuture></p><p>　　还有一个关于通配符相关的话题。 类型参数和通配符之间具有双重性，许多方法可以用一个或另一个声明。 例如，下面是两个可能的声明，用于交换列表中两个索引项目的静态方法。 第一个使用无限制类型参数（条目 30），第二个使用无限制通配符：</p><pre><code>// Two possible declarations for the swap methodpublic static &lt;E&gt; void swap(List&lt;E&gt; list, int i, int j);public static void swap(List&lt;?&gt; list, int i, int j);</code></pre><p>　　这两个声明中的哪一个更可取，为什么？ 在公共 API 中，第二个更好，因为它更简单。 你传入一个列表（任何列表），该方法交换索引的元素。 没有类型参数需要担心。 通常， <strong><em>如果类型参数在方法声明中只出现一次，请将其替换为通配符。</em></strong> 如果它是一个无限制的类型参数，请将其替换为无限制的通配符; 如果它是一个限定类型参数，则用限定通配符替换它。</p><p>　　第二个 swap 方法声明有一个问题。 这个简单的实现不会编译：</p><pre><code>public static void swap(List&lt;?&gt; list, int i, int j) {    list.set(i, list.set(j, list.get(i)));}</code></pre><p>　　试图编译它会产生这个不太有用的错误信息：</p><pre><code>Swap.java:5: error: incompatible types: Object cannot beconverted to CAP#1        list.set(i, list.set(j, list.get(i)));                                        ^  where CAP#1 is a fresh type-variable:    CAP#1 extends Object from capture of ?</code></pre><p>　　看起来我们不能把一个元素放回到我们刚刚拿出来的列表中。 问题是列表的类型是 List<?>，并且不能将除 null 外的任何值放入 List<?> 中。 幸运的是，有一种方法可以在不使用不安全的转换或原始类型的情况下实现此方法。 这个想法是写一个私有辅助方法来捕捉通配符类型。 辅助方法必须是泛型方法才能捕获类型。 以下是它的定义：</p><pre><code>public static void swap(List&lt;?&gt; list, int i, int j) {    swapHelper(list, i, j);}// Private helper method for wildcard captureprivate static &lt;E&gt; void swapHelper(List&lt;E&gt; list, int i, int j) {    list.set(i, list.set(j, list.get(i)));}</code></pre><p>　　swapHelper 方法知道该列表是一个 List<e>。 因此，它知道从这个列表中获得的任何值都是 E 类型，并且可以安全地将任何类型的 E 值放入列表中。 这个稍微复杂的 swap 的实现可以干净地编译。 它允许我们导出基于通配符的漂亮声明，同时利用内部更复杂的泛型方法。 swap 方法的客户端不需要面对更复杂的 swapHelper 声明，但他们从中受益。 辅助方法具有我们认为对公共方法来说过于复杂的签名。</e></p><p>　　总之，在你的 API 中使用通配符类型，虽然棘手，但使得 API 更加灵活。 如果编写一个将被广泛使用的类库，正确使用通配符类型应该被认为是强制性的。 记住基本规则： producer-extends, consumer-super（PECS）。 还要记住，所有 Comparable 和 Comparator 都是消费者。</p><h1 id="合理地结合泛型和可变参数"><a href="#合理地结合泛型和可变参数" class="headerlink" title="合理地结合泛型和可变参数"></a>合理地结合泛型和可变参数</h1><p>　　在 Java 5 中，可变参数方法（详见第 53 条）和泛型都被添加到平台中，所以你可能希望它们能够正常交互; 可悲的是，他们并没有。 可变参数的目的是允许客户端将一个可变数量的参数传递给一个方法，但这是一个脆弱的抽象（leaky abstraction）：当你调用一个可变参数方法时，会创建一个数组来保存可变参数；那个应该是实现细节的数组是可见的。 因此，当可变参数具有泛型或参数化类型时，会导致编译器警告混淆。</p><p>　　回顾条目 28，非具体化（non-reifiable）的类型是其运行时表示比其编译时表示具有更少信息的类型，并且几乎所有泛型和参数化类型都是不可具体化的。 如果某个方法声明其可变参数为非具体化的类型，则编译器将在该声明上生成警告。 如果在推断类型不可确定的可变参数参数上调用该方法，那么编译器也会在调用中生成警告。 警告看起来像这样：</p><pre><code>warning: [unchecked] Possible heap pollution from    parameterized vararg type List&lt;String&gt;</code></pre><p>　　当参数化类型的变量引用不属于该类型的对象时会发生堆污染（Heap pollution）[JLS，4.12.2]。 它会导致编译器的自动生成的强制转换失败，违反了泛型类型系统的基本保证。</p><p>　　例如，请考虑以下方法，该方法是第 127 页上的代码片段的一个不太明显的变体：</p><pre><code>// Mixing generics and varargs can violate type safety!static void dangerous(List&lt;String&gt;... stringLists) {    List&lt;Integer&gt; intList = List.of(42);    Object[] objects = stringLists;    objects[0] = intList;             // Heap pollution    String s = stringLists[0].get(0); // ClassCastException}</code></pre><p>　　此方法没有可见的强制转换，但在调用一个或多个参数时抛出 ClassCastException 异常。 它的最后一行有一个由编译器生成的隐形转换。 这种转换失败，表明类型安全性已经被破坏，并且将值保存在泛型可变参数数组参数中是不安全的。</p><p>　　这个例子引发了一个有趣的问题：为什么声明一个带有泛型可变参数的方法是合法的，当明确创建一个泛型数组是非法的时候呢？ 换句话说，为什么前面显示的方法只生成一个警告，而 127 页上的代码片段会生成一个错误？ 答案是，具有泛型或参数化类型的可变参数参数的方法在实践中可能非常有用，因此语言设计人员选择忍受这种不一致。 事实上，Java 类库导出了几个这样的方法，包括 Arrays.asList(T… a)，Collections.addAll(Collection&lt;? super T&gt; c, T… elements)，EnumSet.of(E first, E… rest)。 与前面显示的危险方法不同，这些类库方法是类型安全的。</p><p>　　在 Java 7 中，@SafeVarargs 注解已添加到平台，以允许具有泛型可变参数的方法的作者自动禁止客户端警告。 实质上，@SafeVarargs 注解构成了作者对类型安全的方法的承诺。 为了交换这个承诺，编译器同意不要警告用户调用可能不安全的方法。</p><p>　　除非它实际上是安全的，否则注意不要使用 @SafeVarargs 注解标注一个方法。 那么需要做些什么来确保这一点呢？ 回想一下，调用方法时会创建一个泛型数组，以容纳可变参数。 如果方法没有在数组中存储任何东西（它会覆盖参数）并且不允许对数组的引用进行转义（这会使不受信任的代码访问数组），那么它是安全的。 换句话说，如果可变参数数组仅用于从调用者向方法传递可变数量的参数——毕竟这是可变参数的目的——那么该方法是安全的。</p><p>　　值得注意的是，你可以违反类型安全性，即使不会在可变参数数组中存储任何内容。 考虑下面的泛型可变参数方法，它返回一个包含参数的数组。 乍一看，它可能看起来像一个方便的小工具：</p><pre><code>// UNSAFE - Exposes a reference to its generic parameter array!static &lt;T&gt; T[] toArray(T... args) {    return args;}</code></pre><p>　　这个方法只是返回它的可变参数数组。 该方法可能看起来并不危险，但它是该数组的类型由传递给方法的参数的编译时类型决定，编译器可能没有足够的信息来做出正确的判断。 由于此方法返回其可变参数数组，它可以将堆污染传播到调用栈上。<br>　　为了具体说明，请考虑下面的泛型方法，它接受三个类型 T 的参数，并返回一个包含两个参数的数组，随机选择：</p><pre><code>static &lt;T&gt; T[] pickTwo(T a, T b, T c) {    switch(ThreadLocalRandom.current().nextInt(3)) {      case 0: return toArray(a, b);      case 1: return toArray(a, c);      case 2: return toArray(b, c);    }    throw new AssertionError(); // Can&apos;t get here}</code></pre><p>　　这个方法本身不是危险的，除了调用具有泛型可变参数的 toArray 方法之外，不会产生警告。</p><p>　　编译此方法时，编译器会生成代码以创建一个将两个 T 实例传递给 toArray 的可变参数数组。 这段代码分配了一个 Object[] 类型的数组，它是保证保存这些实例的最具体的类型，而不管在调用位置传递给 pickTwo 的对象是什么类型。 toArray 方法只是简单地将这个数组返回给 pickTwo，然后 pickTwo 将它返回给调用者，所以 pickTwo 总是返回一个 Object[] 类型的数组。</p><pre><code>public static void main(String[] args) {    String[] attributes = pickTwo(&quot;Good&quot;, &quot;Fast&quot;, &quot;Cheap&quot;);}</code></pre><p>　　这种方法没有任何问题，因此它编译时不会产生任何警告。 但是当运行它时，抛出一个 ClassCastException 异常，尽管不包含可见的转换。 你没有看到的是，编译器已经生成了一个隐藏的强制转换为由 pickTwo 返回的值的 String[] 类型，以便它可以存储在属性中。 转换失败，因为 Object[] 不是 String[] 的子类型。 这种故障相当令人不安，因为它从实际导致堆污染（toArray）的方法中移除了两个级别，并且在实际参数存储在其中之后，可变参数数组未被修改。</p><p>　　这个例子是为了让人们认识到给另一个方法访问一个泛型的可变参数数组是不安全的，除了两个例外：将数组传递给另一个可变参数方法是安全的，这个方法是用 @SafeVarargs 正确标注的， 将数组传递给一个非可变参数的方法是安全的，该方法仅计算数组内容的一些方法。</p><p>　　这里是安全使用泛型可变参数的典型示例。 此方法将任意数量的列表作为参数，并按顺序返回包含所有输入列表元素的单个列表。 由于该方法使用 @SafeVarargs 进行标注，因此在声明或其调用站位置上不会生成任何警告：</p><pre><code>// Safe method with a generic varargs parameter@SafeVarargsstatic &lt;T&gt; List&lt;T&gt; flatten(List&lt;? extends T&gt;... lists) {    List&lt;T&gt; result = new ArrayList&lt;&gt;();    for (List&lt;? extends T&gt; list : lists)        result.addAll(list);    return result;}</code></pre><p>　　决定何时使用 @SafeVarargs 注解的规则很简单：在每种方法上使用 @SafeVarargs，并使用泛型或参数化类型的可变参数，这样用户就不会因不必要的和令人困惑的编译器警告而担忧。 这意味着你不应该写危险或者 toArray 等不安全的可变参数方法。 每次编译器警告你可能会受到来自你控制的方法中泛型可变参数的堆污染时，请检查该方法是否安全。 提醒一下，在下列情况下，泛型可变参数方法是安全的：</p><h2 id="它不会在可变参数数组中存储任何东西"><a href="#它不会在可变参数数组中存储任何东西" class="headerlink" title="它不会在可变参数数组中存储任何东西"></a>它不会在可变参数数组中存储任何东西</h2><h2 id="它不会使数组（或克隆）对不可信代码可见。"><a href="#它不会使数组（或克隆）对不可信代码可见。" class="headerlink" title="它不会使数组（或克隆）对不可信代码可见。"></a>它不会使数组（或克隆）对不可信代码可见。</h2><p>如果违反这些禁令中的任何一项，请修复。<br>　　请注意，SafeVarargs 注解只对不能被重写的方法是合法的，因为不可能保证每个可能的重写方法都是安全的。 在 Java 8 中，注解仅在静态方法和 final 实例方法上合法; 在 Java 9 中，它在私有实例方法中也变为合法。</p><p>　　使用 SafeVarargs 注解的替代方法是采用条目 28 的建议，并用 List 参数替换可变参数（这是一个变相的数组）。 下面是应用于我们的 flatten 方法时，这种方法的样子。 请注意，只有参数声明被更改了：</p><pre><code>// List as a typesafe alternative to a generic varargs parameterstatic &lt;T&gt; List&lt;T&gt; flatten(List&lt;List&lt;? extends T&gt;&gt; lists) {    List&lt;T&gt; result = new ArrayList&lt;&gt;();    for (List&lt;? extends T&gt; list : lists)        result.addAll(list);    return result;}</code></pre><p>　　然后可以将此方法与静态工厂方法 List.of 结合使用，以允许可变数量的参数。 请注意，这种方法依赖于 List.of 声明使用 @SafeVarargs 注解：</p><pre><code>audience = flatten(List.of(friends, romans, countrymen));</code></pre><p>　　这种方法的优点是编译器可以证明这种方法是类型安全的。 不必使用 @SafeVarargs 注解来证明其安全性，也不用担心在确定安全性时可能会犯错。 主要缺点是客户端代码有点冗长，运行可能会慢一些。</p><p>　　这个技巧也可以用在不可能写一个安全的可变参数方法的情况下，就像第 147 页的 toArray 方法那样。它的列表模拟是 List.of 方法，所以我们甚至不必编写它；Java 类库作者已经为我们完成了这项工作。 pickTwo 方法然后变成这样：</p><p>　　main 方变成这样：</p><pre><code>public static void main(String[] args) {    List&lt;String&gt; attributes = pickTwo(&quot;Good&quot;, &quot;Fast&quot;, &quot;Cheap&quot;);}</code></pre><p>　　生成的代码是类型安全的，因为它只使用泛型，不是数组。</p><p>　　总而言之，可变参数和泛型不能很好地交互，因为可变参数机制是在数组上面构建的脆弱的抽象，并且数组具有与泛型不同的类型规则。 虽然泛型可变参数不是类型安全的，但它们是合法的。 如果选择使用泛型（或参数化）可变参数编写方法，请首先确保该方法是类型安全的，然后使用 @SafeVarargs 注解对其进行标注，以免造成使用不愉快。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/31.%20%E4%BD%BF%E7%94%A8%E9%99%90%E5%AE%9A%E9%80%9A%E9%85%8D%E7%AC%A6%E6%9D%A5%E5%A2%9E%E5%8A%A0API%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/31.%20%E4%BD%BF%E7%94%A8%E9%99%90%E5%AE%9A%E9%80%9A%E9%85%8D%E7%AC%A6%E6%9D%A5%E5%A2%9E%E5%8A%A0API%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第五章阅读： 泛型&lt;/p&gt;
&lt;p&gt;31.使用限定通配符来增加 API 的灵活性&lt;br&gt;记住基本规则： producer-extends, consumer-super（PECS）。 还要记住，所有 Comparable 和 Comparator 都是消费者。如果一个参数化类型代表一个 T 生产者，使用 &amp;lt;? extends T&amp;gt;；如果它代表 T 消费者，则使用 &amp;lt;? super T&amp;gt;。&lt;br&gt;32.合理地结合泛型和可变参数&lt;br&gt;可变参数和泛型不能很好地交互，因为可变参数机制是在数组上面构建的脆弱的抽象，并且数组具有与泛型不同的类型规则。 虽然泛型可变参数不是类型安全的，但它们是合法的。 如果选择使用泛型（或参数化）可变参数编写方法，请首先确保该方法是类型安全的，然后使用 @SafeVarargs 注解对其进行标注&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XV</title>
    <link href="http://yoursite.com/2020/01/17/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XV/"/>
    <id>http://yoursite.com/2020/01/17/Effective-Java阅读笔记XV/</id>
    <published>2020-01-16T16:33:12.000Z</published>
    <updated>2020-01-17T01:50:19.117Z</updated>
    
    <content type="html"><![CDATA[<p>第五章阅读： 泛型</p><p>29.优先考虑泛型<br>泛型类型比需要在客户端代码中强制转换的类型更安全，更易于使用。<br>30.优先使用泛型方法<br>像泛型类型一样，泛型方法比需要客户端对输入参数和返回值进行显式强制转换的方法更安全，更易于使用。</p><a id="more"></a><h1 id="优先考虑泛型"><a href="#优先考虑泛型" class="headerlink" title="优先考虑泛型"></a>优先考虑泛型</h1><p>　　参数化声明并使用 JDK 提供的泛型类型和方法通常不会太困难。 但编写自己的泛型类型有点困难，但值得努力学习。</p><p>　　考虑条目 7 中的简单堆栈实现：</p><pre><code>// Object-based collection - a prime candidate for genericspublic class Stack {    private Object[] elements;    private int size = 0;    private static final int DEFAULT_INITIAL_CAPACITY = 16;    public Stack() {        elements = new Object[DEFAULT_INITIAL_CAPACITY];    }    public void push(Object e) {        ensureCapacity();        elements[size++] = e;    }    public Object pop() {        if (size == 0)            throw new EmptyStackException();        Object result = elements[--size];        elements[size] = null; // Eliminate obsolete reference        return result;    }    public boolean isEmpty() {        return size == 0;    }    private void ensureCapacity() {        if (elements.length == size)            elements = Arrays.copyOf(elements, 2 * size + 1);    }}</code></pre><p>　　这个类应该已经被参数化了，但是由于事实并非如此，我们可以对它进行泛型化。 换句话说，我们可以参数化它，而不会损害原始非参数化版本的客户端。 就目前而言，客户端必须强制转换从堆栈中弹出的对象，而这些强制转换可能会在运行时失败。 泛型化类的第一步是在其声明中添加一个或多个类型参数。 在这种情况下，有一个类型参数，表示堆栈的元素类型，这个类型参数的常规名称是 E（详见第 68 条）。</p><p>　　下一步是用相应的类型参数替换所有使用的 Object 类型，然后尝试编译生成的程序：</p><pre><code>// Initial attempt to generify Stack - won&apos;t compile!public class Stack&lt;E&gt; {    private E[] elements;    private int size = 0;    private static final int DEFAULT_INITIAL_CAPACITY = 16;    public Stack() {        elements = new E[DEFAULT_INITIAL_CAPACITY];    }    public void push(E e) {        ensureCapacity();        elements[size++] = e;    }    public E pop() {        if (size == 0)            throw new EmptyStackException();        E result = elements[--size];        elements[size] = null; // Eliminate obsolete reference        return result;    }    ... // no changes in isEmpty or ensureCapacity}</code></pre><p>　　你通常会得到至少一个错误或警告，这个类也不例外。 幸运的是，这个类只产生一个错误：</p><pre><code>Stack.java:8: generic array creation        elements = new E[DEFAULT_INITIAL_CAPACITY];                   ^</code></pre><p>　　如条目 28 所述，你不能创建一个不可具体化类型的数组，例如类型 E。每当编写一个由数组支持的泛型时，就会出现此问题。 有两种合理的方法来解决它。 第一种解决方案直接规避了对泛型数组创建的禁用：创建一个 Object 数组并将其转换为泛型数组类型。 现在没有了错误，编译器会发出警告。 这种用法是合法的，但不是（一般）类型安全的：</p><pre><code>Stack.java:8: warning: [unchecked] unchecked castfound: Object[], required: E[]        elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];                       ^</code></pre><p>　　编译器可能无法证明你的程序是类型安全的，但你可以。 你必须说服自己，不加限制的类型强制转换不会损害程序的类型安全。 有问题的数组（元素）保存在一个私有属性中，永远不会返回给客户端或传递给任何其他方法。 保存在数组中的唯一元素是那些传递给 push 方法的元素，它们是 E 类型的，所以未经检查的强制转换不会造成任何伤害。</p><p>　　一旦证明未经检查的强制转换是安全的，请尽可能缩小范围（条目 27）。 在这种情况下，构造方法只包含未经检查的数组创建，所以在整个构造方法中抑制警告是合适的。 通过添加一个注解来执行此操作，Stack 可以干净地编译，并且可以在没有显式强制转换或担心 ClassCastException 异常的情况下使用它：</p><pre><code>// The elements array will contain only E instances from push(E).// This is sufficient to ensure type safety, but the runtime// type of the array won&apos;t be E[]; it will always be Object[]!@SuppressWarnings(&quot;unchecked&quot;)public Stack() {    elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];}</code></pre><p>　消除 Stack 中的泛型数组创建错误的第二种方法是将属性元素的类型从 E[] 更改为 Object[]。 如果这样做，会得到一个不同的错误：</p><pre><code>Stack.java:19: incompatible typesfound: Object, required: E        E result = elements[--size];                           ^</code></pre><p>　　可以通过将从数组中检索到的元素转换为 E 来将此错误更改为警告：</p><pre><code>Stack.java:19: warning: [unchecked] unchecked castfound: Object, required: E        E result = (E) elements[--size];                               ^</code></pre><p>　　因为 E 是不可具体化的类型，编译器无法在运行时检查强制转换。 再一次，你可以很容易地向自己证明，不加限制的转换是安全的，所以可以适当地抑制警告。 根据条目 27 的建议，我们只在包含未经检查的强制转换的分配上抑制警告，而不是在整个 pop 方法上：</p><pre><code>// Appropriate suppression of unchecked warningpublic E pop() {    if (size == 0)        throw new EmptyStackException();    // push requires elements to be of type E, so cast is correct    @SuppressWarnings(&quot;unchecked&quot;) E result =        (E) elements[--size];    elements[size] = null; // Eliminate obsolete reference    return result;}</code></pre><p>　　两种消除泛型数组创建的技术都有其追随者。 第一个更可读：数组被声明为 E[] 类型，清楚地表明它只包含 E 实例。 它也更简洁：在一个典型的泛型类中，你从代码中的许多点读取数组; 第一种技术只需要一次转换（创建数组的地方），而第二种技术每次读取数组元素都需要单独转换。 因此，第一种技术是优选的并且在实践中更常用。 但是，它确实会造成堆污染（heap pollution）（详见第 32 条）：数组的运行时类型与编译时类型不匹配（除非 E 碰巧是 Object）。 这使得一些程序员非常不安，他们选择了第二种技术，尽管在这种情况下堆的污染是无害的。<br>　　下面的程序演示了泛型 Stack 类的使用。 该程序以相反的顺序打印其命令行参数，并将其转换为大写。 对从堆栈弹出的元素调用 String 的 toUpperCase 方法不需要显式强制转换，而自动生成的强制转换将保证成功：</p><pre><code>// Little program to exercise our generic Stackpublic static void main(String[] args) {    Stack&lt;String&gt; stack = new Stack&lt;&gt;();    for (String arg : args)        stack.push(arg);    while (!stack.isEmpty())        System.out.println(stack.pop().toUpperCase());}</code></pre><p>　　上面的例子似乎与条目 28 相矛盾，条目 28 中鼓励使用列表优先于数组。 在泛型类型中使用列表并不总是可行或可取的。 Java 本身生来并不支持列表，所以一些泛型类型（如 ArrayList）必须在数组上实现。 其他的泛型类型，比如 HashMap，是为了提高性能而实现的。</p><p>　　绝大多数泛型类型就像我们的 Stack 示例一样，它们的类型参数没有限制：可以创建一个 Stack<object>，Stack&lt;int[]&gt;，Stack&lt;List<string>&gt; 或者其他任何对象的 Stack 引用类型。 请注意，不能创建基本类型的堆栈：尝试创建 Stack<int> 或 Stack<double> 将导致编译时错误。 这是 Java 泛型类型系统的一个基本限制。 可以使用基本类型的包装类（详见第 61 条）来解决这个限制。</double></int></string></object></p><p>　　有一些泛型类型限制了它们类型参数的允许值。 例如，考虑 java.util.concurrent.DelayQueue，它的声明如下所示：</p><pre><code>class DelayQueue&lt;E extends Delayed&gt; implements BlockingQueue&lt;E&gt;</code></pre><p>　　类型参数列表（<e extends delayed>）要求实际的类型参数 E 是 java.util.concurrent.Delayed 的子类型。 这使得 DelayQueue 实现及其客户端可以利用 DelayQueue 元素上的 Delayed 方法，而不需要显式的转换或 ClassCastException 异常的风险。 类型参数 E 被称为限定类型参数。 请注意，子类型关系被定义为每个类型都是自己的子类型，因此创建 DelayQueue<delayed> 是合法的。</delayed></e></p><p>　　总之，泛型类型比需要在客户端代码中强制转换的类型更安全，更易于使用。 当你设计新的类型时，确保它们可以在没有这种强制转换的情况下使用。 这通常意味着使类型泛型化。 如果你有任何现有的类型，应该是泛型的但实际上却不是，那么把它们泛型化。 这使这些类型的新用户的使用更容易，而不会破坏现有的客户端（条目 26）。</p><h1 id="优先使用泛型方法"><a href="#优先使用泛型方法" class="headerlink" title="优先使用泛型方法"></a>优先使用泛型方法</h1><p>　　正如类可以是泛型的，方法也可以是泛型的。 对参数化类型进行操作的静态工具方法通常都是泛型的。 集合中的所有“算法”方法（如 binarySearch 和 sort）都是泛型的。<br>　　编写泛型方法类似于编写泛型类型。 考虑这个方法，它返回两个集合的并集：</p><pre><code>// Uses raw types - unacceptable! [Item 26]public static Set union(Set s1, Set s2) {    Set result = new HashSet(s1);    result.addAll(s2);    return result;}</code></pre><p>　　此方法可以编译但有两个警告：</p><pre><code>Union.java:5: warning: [unchecked] unchecked call toHashSet(Collection&lt;? extends E&gt;) as a member of raw type HashSet        Set result = new HashSet(s1);                     ^Union.java:6: warning: [unchecked] unchecked call toaddAll(Collection&lt;? extends E&gt;) as a member of raw type Set        result.addAll(s2);                     ^</code></pre><p>　　要修复这些警告并使方法类型安全，请修改其声明以声明表示三个集合（两个参数和返回值）的元素类型的类型参数，并在整个方法中使用此类型参数。 声明类型参数的类型参数列表位于方法的修饰符和返回类型之间。 在这个例子中，类型参数列表是 <e>，返回类型是 Set<e>。 类型参数的命名约定对于泛型方法和泛型类型是相同的（详见第 29 和 68 条）：</e></e></p><pre><code>// Generic methodpublic static &lt;E&gt; Set&lt;E&gt; union(Set&lt;E&gt; s1, Set&lt;E&gt; s2) {    Set&lt;E&gt; result = new HashSet&lt;&gt;(s1);    result.addAll(s2);    return result;}</code></pre><p>　　至少对于简单的泛型方法来说，就是这样。 此方法编译时不会生成任何警告，并提供类型安全性和易用性。 这是一个简单的程序来运行该方法。 这个程序不包含强制转换和编译时没有错误或警告：至少对于简单的泛型方法来说，就是这样。 此方法编译时不会生成任何警告，并提供类型安全性和易用性。 这是一个简单的程序来运行该方法。 这个程序不包含强制转换和编译时没有错误或警告：</p><pre><code>// Simple program to exercise generic methodpublic static void main(String[] args) {    Set&lt;String&gt; guys = Set.of(&quot;Tom&quot;, &quot;Dick&quot;, &quot;Harry&quot;);    Set&lt;String&gt; stooges = Set.of(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);    Set&lt;String&gt; aflCio = union(guys, stooges);    System.out.println(aflCio);}</code></pre><p>　　当运行这个程序时，它会打印[Moe, Tom, Harry, Larry, Curly, Dick]（输出中元素的顺序依赖于具体实现。）</p><p>　　union 方法的一个限制是所有三个集合（输入参数和返回值）的类型必须完全相同。 通过使用限定通配符类型（ bounded wildcard types）（详见第 31 条），可以使该方法更加灵活。</p><p>　　有时，需要创建一个不可改变但适用于许多不同类型的对象。 因为泛型是通过擦除来实现的（详见第 28 条），所以可以使用单个对象进行所有必需的类型参数化，但是需要编写一个静态工厂方法来重复地为每个请求的类型参数化分配对象。 这种称为泛型单例工厂（generic singleton factory）的模式用于方法对象（function objects）（详见第 42 条），比如 Collections.reverseOrder 方法，偶尔也用于 Collections.emptySet 之类的集合。</p><p>　　假设你想写一个恒等方法分配器（ identity function dispenser）。 类库提供了 Function.identity 方法，所以没有理由编写你自己的实现（详见第 59 条），但它是有启发性的。 如果每次要求的时候都去创建一个新的恒等方法对象是浪费的，因为它是无状态的。 如果 Java 的泛型被具体化，那么每个类型都需要一个恒等方法，但是由于它们被擦除以后，所以泛型的单例就足够了。 以下是它的实例：</p><pre><code>// Generic singleton factory patternprivate static UnaryOperator&lt;Object&gt; IDENTITY_FN = (t) -&gt; t;@SuppressWarnings(&quot;unchecked&quot;)public static &lt;T&gt; UnaryOperator&lt;T&gt; identityFunction() {    return (UnaryOperator&lt;T&gt;) IDENTITY_FN;}</code></pre><p>　　将 IDENTITY_FN 转换为 (UnaryFunction<t>) 会生成一个未经检查的强制转换警告，因为 UnaryOperator<object> 对于每个 T 都不是一个 UnaryOperator<t>。但是恒等方法是特殊的：它返回未修改的参数，所以我们知道，使用它作为一个 UnaryFunction<t> 是类型安全的，无论 T 的值是多少。因此，我们可以放心地抑制由这个强制生成的未经检查的强制转换警告。 一旦我们完成了这些，代码编译没有错误或警告。<br>　　下面是一个示例程序，它使用我们的泛型单例作为 UnaryOperator<string> 和 UnaryOperator<number>。 像往常一样，它不包含强制转化，编译时也没有错误和警告：</number></string></t></t></object></t></p><pre><code>// Sample program to exercise generic singletonpublic static void main(String[] args) {    String[] strings = { &quot;jute&quot;, &quot;hemp&quot;, &quot;nylon&quot; };    UnaryOperator&lt;String&gt; sameString = identityFunction();    for (String s : strings)        System.out.println(sameString.apply(s));    Number[] numbers = { 1, 2.0, 3L };    UnaryOperator&lt;Number&gt; sameNumber = identityFunction();    for (Number n : numbers)        System.out.println(sameNumber.apply(n));}</code></pre><p>　　虽然相对较少，类型参数受涉及该类型参数本身的某种表达式限制是允许的。 这就是所谓的 <strong><em>递归类型限制（recursive type bound）</em></strong> 。 递归类型限制的常见用法与 Comparable 接口有关，它定义了一个类型的自然顺序（详见第 14 条）。 这个接口如下所示：</p><pre><code>public interface Comparable&lt;T&gt; {    int compareTo(T o);}</code></pre><p>　　类型参数 T 定义了实现 Comparable<t> 的类型的元素可以比较的类型。 在实际中，几乎所有类型都只能与自己类型的元素进行比较。 所以，例如，String 类实现了 Comparable<string>，Integer 类实现了 Comparable<integer> 等等。<br>　　许多方法采用实现 Comparable 的元素的集合来对其进行排序，在其中进行搜索，计算其最小值或最大值等。 要做到这一点，要求集合中的每一个元素都可以与其中的每一个元素相比，换言之，这个元素是可以相互比较的。 以下是如何表达这一约束：</integer></string></t></p><pre><code>// Using a recursive type bound to express mutual comparabilitypublic static &lt;E extends Comparable&lt;E&gt;&gt; E max(Collection&lt;E&gt; c);</code></pre><p>　　限定的类型 &lt;E extends Comparable <e>&gt; 可以理解为「任何可以与自己比较的类型 E」，这或多或少精确地对应于相互可比性的概念。<br>　　这里有一个与前面的声明相匹配的方法。它根据其元素的自然顺序来计算集合中的最大值，并编译没有错误或警告：</e></p><pre><code>// Returns max value in a collection - uses recursive type boundpublic static &lt;E extends Comparable&lt;E&gt;&gt; E max(Collection&lt;E&gt; c) {  if (c.isEmpty())    throw new IllegalArgumentException(&quot;Empty collection&quot;);  E result = null;  for (E e : c)    if (result == null || e.compareTo(result) &gt; 0)      result = Objects.requireNonNull(e);  return result;}</code></pre><p>　　请注意，如果列表为空，则此方法将引发 IllegalArgumentException 异常。 更好的选择是返回一个 Optional<e>（详见第 55 条）。</e></p><p>　　递归类型限制可能变得复杂得多，但幸运的是他们很少这样做。 如果你理解了这个习惯用法，它的通配符变体（详见第 31 条）和模拟的自我类型用法（详见第 2 条），你将能够处理在实践中遇到的大多数递归类型限制。</p><p>　　总之，像泛型类型一样，泛型方法比需要客户端对输入参数和返回值进行显式强制转换的方法更安全，更易于使用。 像类型一样，你应该确保你的方法可以不用强制转换，这通常意味着它们是泛型的。 应该泛型化现有的方法，其使用需要强制转换。 这使得新用户的使用更容易，而不会破坏现有的客户端（详见第 26 条）。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/29.%20%E4%BC%98%E5%85%88%E8%80%83%E8%99%91%E6%B3%9B%E5%9E%8B" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/29.%20%E4%BC%98%E5%85%88%E8%80%83%E8%99%91%E6%B3%9B%E5%9E%8B</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第五章阅读： 泛型&lt;/p&gt;
&lt;p&gt;29.优先考虑泛型&lt;br&gt;泛型类型比需要在客户端代码中强制转换的类型更安全，更易于使用。&lt;br&gt;30.优先使用泛型方法&lt;br&gt;像泛型类型一样，泛型方法比需要客户端对输入参数和返回值进行显式强制转换的方法更安全，更易于使用。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XIV</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XIV/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记XIV/</id>
    <published>2020-01-16T15:57:12.000Z</published>
    <updated>2020-01-17T01:50:19.117Z</updated>
    
    <content type="html"><![CDATA[<p>第五章阅读： 泛型</p><p>27.消除非检查警告<br>未经检查的警告是重要的。 不要忽视他们。 每个未经检查的警告代表在运行时出现 ClassCastException 异常的可能性。 尽可能消除这些警告。 如果无法消除未经检查的警告，并且可以证明引发该警告的代码是安全类型的，则可以在尽可能小的范围内使用 @SuppressWarnings(“unchecked”) 注解来禁止警告。 记录决定在注释中抑制此警告的理由。<br>28.列表优于数组<br>数组和泛型具有非常不同的类型规则。 数组是协变的（covariant），被具体化了（reified），数组是协变和具体化的; 泛型是不变的，类型擦除的。 因此，数组提供运行时类型的安全性，但不提供编译时类型的安全性，反之亦然。 一般来说，数组和泛型不能很好地混合工作。 如果发现把它们混合在一起，得到编译时错误或者警告，应该首先用列表来替换数组。</p><a id="more"></a><h1 id="消除非检查警告"><a href="#消除非检查警告" class="headerlink" title="消除非检查警告"></a>消除非检查警告</h1><p>　　使用泛型编程时，会看到许多编译器警告：未经检查的强制转换警告，未经检查的方法调用警告，未经检查的参数化可变长度类型警告以及未经检查的转换警告。 你使用泛型获得的经验越多，获得的警告越少，但不要期望新编写的代码能够干净地编译。</p><p>　　许多未经检查的警告很容易消除。 例如，假设你不小心写了以下声明：</p><pre><code>Set&lt;Lark&gt; exaltation = new HashSet();</code></pre><p>　　编译器会提醒你你做错了什么：</p><pre><code>Venery.java:4: warning: [unchecked] unchecked conversion        Set&lt;Lark&gt; exaltation = new HashSet();                               ^  required: Set&lt;Lark&gt;  found:    HashSet。</code></pre><p>　然后可以进行指示修正，让警告消失。 请注意，实际上并不需要指定类型参数，只是为了表明它与 Java 7 中引入的钻石运算符（「&lt;&gt;」）一同出现。然后编译器会推断出正确的实际类型参数（在本例中为 Lark）：</p><pre><code>Set&lt;Lark&gt; exaltation = new HashSet&lt;&gt;();</code></pre><p>　　但一些警告更难以消除。 本章充满了这种警告的例子。 当你收到需要进一步思考的警告时，坚持不懈！ 尽可能地消除每一个未经检查的警告。 如果你消除所有的警告，你可以放心，你的代码是类型安全的，这是一件非常好的事情。 这意味着在运行时你将不会得到一个 ClassCastException 异常，并且增加了你的程序将按照你的意图行事的信心。</p><p>　　如果你不能消除警告，但你可以证明引发警告的代码是类型安全的，那么（并且只能这样）用 @SuppressWarnings(“unchecked”) 注解来抑制警告。 如果你在没有首先证明代码是类型安全的情况下压制警告，那么你给自己一个错误的安全感。 代码可能会在不发出任何警告的情况下进行编译，但是它仍然可以在运行时抛出 ClassCastException 异常。 但是，如果你忽略了你认为是安全的未经检查的警告（而不是抑制它们），那么当一个新的警告出现时，你将不会注意到这是一个真正的问题。 新出现的警告就会淹没在所有的错误警告当中。</p><p>　　SuppressWarnings 注解可用于任何声明，从单个局部变量声明到整个类。 始终在尽可能最小的范围内使用 SuppressWarnings 注解。 通常这是一个变量声明或一个非常短的方法或构造方法。 切勿在整个类上使用 SuppressWarnings 注解。 这样做可能会掩盖重要的警告。</p><p>　　如果你发现自己在长度超过一行的方法或构造方法上使用 SuppressWarnings 注解，则可以将其移到局部变量声明上。 你可能需要声明一个新的局部变量，但这是值得的。 例如，考虑这个来自 ArrayList 的 toArray 方法：</p><pre><code>public &lt;T&gt; T[] toArray(T[] a) {    if (a.length &lt; size)       return (T[]) Arrays.copyOf(elements, size, a.getClass());    System.arraycopy(elements, 0, a, 0, size);    if (a.length &gt; size)       a[size] = null;    return a;}如果编译 ArrayList 类，则该方法会生成此警告：ArrayList.java:305: warning: [unchecked] unchecked cast       return (T[]) Arrays.copyOf(elements, size, a.getClass());                                 ^  required: T[]  found:    Object[]</code></pre><p>　　在返回语句中设置 SuppressWarnings 注解是非法的，因为它不是一个声明[JLS，9.7]。 你可能会试图把注释放在整个方法上，但是不要这要做。 相反，声明一个局部变量来保存返回值并标注它的声明，如下所示：</p><pre><code>// Adding local variable to reduce scope of @SuppressWarningspublic &lt;T&gt; T[] toArray(T[] a) {    if (a.length &lt; size) {        // This cast is correct because the array we&apos;re creating        // is of the same type as the one passed in, which is T[].        @SuppressWarnings(&quot;unchecked&quot;) T[] result =            (T[]) Arrays.copyOf(elements, size, a.getClass());        return result;    }    System.arraycopy(elements, 0, a, 0, size);    if (a.length &gt; size)        a[size] = null;    return a;}</code></pre><p>　　所产生的方法干净地编译，并最小化未经检查的警告被抑制的范围。<br>　　<strong><em>每当使用 @SuppressWarnings(“unchecked”) 注解时，请添加注释，说明为什么是安全的。</em></strong> 这将有助于他人理解代码，更重要的是，这将减少有人修改代码的可能性，从而使计算不安全。 如果你觉得很难写这样的注释，请继续思考。 毕竟，你最终可能会发现未经检查的操作是不安全的。</p><p>　　总之，未经检查的警告是重要的。 不要忽视他们。 每个未经检查的警告代表在运行时出现 ClassCastException 异常的可能性。 尽你所能消除这些警告。 如果无法消除未经检查的警告，并且可以证明引发该警告的代码是安全类型的，则可以在尽可能小的范围内使用 @SuppressWarnings(“unchecked”) 注解来禁止警告。 记录你决定在注释中抑制此警告的理由。</p><h1 id="列表优于数组"><a href="#列表优于数组" class="headerlink" title="列表优于数组"></a>列表优于数组</h1><p>　　数组在两个重要方面与泛型不同。 首先，数组是协变的（covariant）。 这个吓人的单词意味着如果 Sub 是 Super 的子类型，则数组类型 Sub[] 是数组类型 Super[] 的子类型。 相比之下，泛型是不变的（invariant）：对于任何两种不同的类型 Type1 和 Type2，List<type1> 既不是 List<type2> 的子类型也不是父类型。[JLS，4.10; Naftalin07, 2.5]。 你可能认为这意味着泛型是不足的，但可以说是数组缺陷。 这段代码是合法的：</type2></type1></p><pre><code>// Fails at runtime!Object[] objectArray = new Long[1];objectArray[0] = &quot;I don&apos;t fit in&quot;; // Throws ArrayStoreException</code></pre><p>　　但这个不是：</p><pre><code>// Won&apos;t compile!List&lt;Object&gt; ol = new ArrayList&lt;Long&gt;(); // Incompatible typesol.add(&quot;I don&apos;t fit in&quot;);</code></pre><p>　　无论哪种方式，你不能把一个 String 类型放到一个 Long 类型容器中，但是用一个数组，你会发现在运行时产生了一个错误；对于列表，可以在编译时就能发现错误。 当然，你宁愿在编译时找出错误。</p><p>　　数组和泛型之间的第二个主要区别是数组被具体化了（reified）[JLS，4.7]。 这意味着数组在运行时知道并强制执行它们的元素类型。 如前所述，如果尝试将一个 String 放入 Long 数组中，得到一个 ArrayStoreException 异常。 相反，泛型通过擦除（erasure）来实现[JLS，4.6]。 这意味着它们只在编译时执行类型约束，并在运行时丢弃（或擦除）它们的元素类型信息。 擦除是允许泛型类型与不使用泛型的遗留代码自由互操作（详见第 26 条），从而确保在 Java 5 中平滑过渡到泛型。</p><p>　　由于这些基本差异，数组和泛型不能很好地在一起混合使用。 例如，创建泛型类型的数组，参数化类型的数组，以及类型参数的数组都是非法的。 因此，这些数组创建表达式都不合法：new List<e>[]，new List<string>[]，new E[]。 所有将在编译时导致泛型数组创建错误。</string></e></p><p>　　为什么创建一个泛型数组是非法的？ 因为它不是类型安全的。 如果这是合法的，编译器生成的强制转换程序在运行时可能会因为 ClassCastException 异常而失败。 这将违反泛型类型系统提供的基本保证。</p><p>　　为了具体说明，请考虑下面的代码片段：</p><pre><code>// Why generic array creation is illegal - won&apos;t compile!List&lt;String&gt;[] stringLists = new List&lt;String&gt;[1];  // (1)List&lt;Integer&gt; intList = List.of(42);               // (2)Object[] objects = stringLists;                    // (3)objects[0] = intList;                              // (4)String s = stringLists[0].get(0);                  // (5)</code></pre><p>　　让我们假设第 1 行创建一个泛型数组是合法的。第 2 行创建并初始化包含单个元素的 List<integer>。第 3 行将 List<string> 数组存储到 Object 数组变量中，这是合法的，因为数组是协变的。第 4 行将 List<integer> 存储在 Object 数组的唯一元素中，这是因为泛型是通过擦除来实现的：List<integer> 实例的运行时类型仅仅是 List，而 List<string>[] 实例是 List[]，所以这个赋值不会产生 ArrayStoreException 异常。现在我们遇到了麻烦。将一个 List<integer> 实例存储到一个声明为仅保存 List<string> 实例的数组中。在第 5 行中，我们从这个数组的唯一列表中检索唯一的元素。编译器自动将检索到的元素转换为 String，但它是一个 Integer，所以我们在运行时得到一个 ClassCastException 异常。为了防止发生这种情况，第 1 行（创建一个泛型数组）必须产生一个编译时错误。</string></integer></string></integer></integer></string></integer></p><p>　　类型 E，List<e> 和 List<string> 等在技术上被称为不可具体化的类型（nonreifiable types）[JLS，4.7]。 直观地说，不可具体化的类型是其运行时表示包含的信息少于其编译时表示的类型。 由于擦除，可唯一确定的参数化类型是无限定通配符类型，如 List<?> 和 Map<?, ?>（详见第 26 条）。 尽管很少有用，创建无限定通配符类型的数组是合法的。</string></e></p><p>　　禁止泛型数组的创建可能会很恼人的。 这意味着，例如，泛型集合通常不可能返回其元素类型的数组（但是参见条目 33 中的部分解决方案）。 这也意味着，当使用可变参数方法（详见第 53 条）和泛型时，会产生令人困惑的警告。 这是因为每次调用可变参数方法时，都会创建一个数组来保存可变参数。 如果此数组的元素类型不可确定，则会收到警告。 SafeVarargs 注解可以用来解决这个问题（详见第 32 条）。</p><p>　　当你在强制转换为数组类型时，得到泛型数组创建错误，或是未经检查的强制转换警告时，最佳解决方案通常是使用集合类型 List<e> 而不是数组类型 E[]。 这样可能会牺牲一些简洁性或性能，但作为交换，你会获得更好的类型安全性和互操作性。</e></p><p>　　例如，假设你想用带有集合的构造方法来编写一个 Chooser 类，并且有个方法返回随机选择的集合的一个元素。 根据传递给构造方法的集合，可以使用选择器作为游戏模具，魔术 8 球或数据源进行蒙特卡罗模拟。 这是一个没有泛型的简单实现：</p><pre><code>// Chooser - a class badly in need of generics!public class Chooser {    private final Object[] choiceArray;    public Chooser(Collection choices) {        choiceArray = choices.toArray();    }    public Object choose() {        Random rnd = ThreadLocalRandom.current();        return choiceArray[rnd.nextInt(choiceArray.length)];    }}</code></pre><p>　　要使用这个类，每次调用方法时，都必须将 Object 的 choose 方法的返回值转换为所需的类型，如果类型错误，则转换在运行时失败。 我们先根据条目 29 的建议，试图修改 Chooser 类，使其成为泛型的。</p><pre><code>// A first cut at making Chooser generic - won&apos;t compilepublic class Chooser&lt;T&gt; {    private final T[] choiceArray;    public Chooser(Collection&lt;T&gt; choices) {        choiceArray = choices.toArray();    }    // choose method unchanged}</code></pre><p>　　如果你尝试编译这个类，会得到这个错误信息：</p><pre><code>Chooser.java:9: error: incompatible types: Object[] cannot beconverted to T[]        choiceArray = choices.toArray();                                     ^  where T is a type-variable:    T extends Object declared in class Chooser</code></pre><p>　　没什么大不了的，将 Object 数组转换为 T 数组：</p><pre><code>choiceArray = (T[]) choices.toArray();</code></pre><p>　　这没有了错误，而是得到一个警告：</p><pre><code>Chooser.java:9: warning: [unchecked] unchecked cast        choiceArray = (T[]) choices.toArray();                                           ^  required: T[], found: Object[]  where T is a type-variable:T extends Object declared in class Chooser</code></pre><p>　　编译器告诉你在运行时不能保证强制转换的安全性，因为程序不会知道 T 代表什么类型——记住，元素类型信息在运行时会被泛型删除。 该程序可以正常工作吗？ 是的，但编译器不能证明这一点。 你可以证明这一点，在注释中提出证据，并用注解来抑制警告，但最好是消除警告的原因（详见第 27 条）。</p><p>　　要消除未经检查的强制转换警告，请使用列表而不是数组。 下面是另一个版本的 Chooser 类，编译时没有错误或警告：</p><pre><code>// List-based Chooser - typesafepublic class Chooser&lt;T&gt; {    private final List&lt;T&gt; choiceList;    public Chooser(Collection&lt;T&gt; choices) {        choiceList = new ArrayList&lt;&gt;(choices);    }    public T choose() {        Random rnd = ThreadLocalRandom.current();        return choiceList.get(rnd.nextInt(choiceList.size()));    }}</code></pre><p>　　这个版本有些冗长，也许运行比较慢，但是值得一提的是，在运行时不会得到 ClassCastException 异常。</p><p>　　总之，数组和泛型具有非常不同的类型规则。 数组是协变和具体化的; 泛型是不变的，类型擦除的。 因此，数组提供运行时类型的安全性，但不提供编译时类型的安全性，反之亦然。 一般来说，数组和泛型不能很好地混合工作。 如果你发现把它们混合在一起，得到编译时错误或者警告，你的第一个冲动应该是用列表来替换数组。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/27.%20%E6%B6%88%E9%99%A4%E9%9D%9E%E6%A3%80%E6%9F%A5%E8%AD%A6%E5%91%8A" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/27.%20%E6%B6%88%E9%99%A4%E9%9D%9E%E6%A3%80%E6%9F%A5%E8%AD%A6%E5%91%8A</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第五章阅读： 泛型&lt;/p&gt;
&lt;p&gt;27.消除非检查警告&lt;br&gt;未经检查的警告是重要的。 不要忽视他们。 每个未经检查的警告代表在运行时出现 ClassCastException 异常的可能性。 尽可能消除这些警告。 如果无法消除未经检查的警告，并且可以证明引发该警告的代码是安全类型的，则可以在尽可能小的范围内使用 @SuppressWarnings(“unchecked”) 注解来禁止警告。 记录决定在注释中抑制此警告的理由。&lt;br&gt;28.列表优于数组&lt;br&gt;数组和泛型具有非常不同的类型规则。 数组是协变的（covariant），被具体化了（reified），数组是协变和具体化的; 泛型是不变的，类型擦除的。 因此，数组提供运行时类型的安全性，但不提供编译时类型的安全性，反之亦然。 一般来说，数组和泛型不能很好地混合工作。 如果发现把它们混合在一起，得到编译时错误或者警告，应该首先用列表来替换数组。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XIII</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XIII/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记XIII/</id>
    <published>2020-01-16T15:14:12.000Z</published>
    <updated>2020-01-17T01:50:19.117Z</updated>
    
    <content type="html"><![CDATA[<p>第四章阅读：类和接口</p><p>25.将源文件限制为单个顶级类<br>永远不要将多个顶级类或接口放在一个源文件中。 遵循这个规则保证在编译时不能有多个定义。 这又保证了编译生成的类文件以及生成的程序的行为与源文件传递给编译器的顺序无关。</p><p>第五章阅读： 泛型<br>泛型实现了参数化类型，这样编写的组件（通常是集合）可以适用于多种类型。“泛型”这个术语的含义是“适用于很多类型”。编程语言中泛型出现的初衷是通过解耦类或方法与所使用的类型之间的约束，使得类或方法具备最宽泛的表达力。</p><p>26.不要使用原始类型<br>使用原始类型可能导致运行时异常，所以不要使用它们。 原始类型只是为了与引入泛型机制之前的遗留代码进行兼容和互用而提供的。Set<object> 是一个参数化类型，表示一个可以包含任何类型对象的集合，Set&lt;?&gt; 是一个通配符类型，表示一个只能包含某些未知类型对象的集合，Set 是一个原始类型，它不在泛型类型系统之列。 前两个类型是安全的，最后一个不是。</object></p><a id="more"></a><h1 id="将源文件限制为单个顶级类"><a href="#将源文件限制为单个顶级类" class="headerlink" title="将源文件限制为单个顶级类"></a>将源文件限制为单个顶级类</h1><p>　　虽然 Java 编译器允许在单个源文件中定义多个顶级类，但这样做没有任何好处，并且存在重大风险。 风险源于在源文件中定义多个顶级类使得为类提供多个定义成为可能。 使用哪个定义会受到源文件传递给编译器的顺序的影响。<br>　　为了具体说明，请考虑下面源文件，其中只包含一个引用其他两个顶级类（Utensil 和 Dessert 类）的成员的 Main 类：</p><pre><code>public class Main {    public static void main(String[] args) {        System.out.println(Utensil.NAME + [Dessert.NAME](http://Dessert.NAME));    }}</code></pre><p>　　现在假设在 Utensil.java 的源文件中同时定义了 Utensil 和 Dessert：</p><pre><code>// Two classes defined in one file. Don&apos;t ever do this!class Utensil {    static final String NAME = &quot;pan&quot;;}class Dessert {    static final String NAME = &quot;cake&quot;;}当然，main 方法会打印 pancake。</code></pre><p>　　现在假设你不小心创建了另一个名为 Dessert.java 的源文件，它定义了相同的两个类：</p><pre><code>// Two classes defined in one file. Don&apos;t ever do this!class Utensil {    static final String NAME = &quot;pot&quot;;}class Dessert {    static final String NAME = &quot;pie&quot;;}</code></pre><p>　　如果你足够幸运，使用命令 javac Main.java Dessert.java 编译程序，编译将失败，编译器会告诉你，你已经多次定义了类 Utensil 和 Dessert。 这是因为编译器首先编译 Main.java，当它看到对 Utensil 的引用（它在 Dessert 的引用之前）时，它将在 Utensil.java 中查找这个类并找到 Utensil 和 Dessert。 当编译器在命令行上遇到 Dessert.java 时，它也将拉入该文件，导致它遇到 Utensil 和 Dessert 的定义。</p><p>　　如果使用命令 javac Main.java 或 javac Main.java Utensil.java 编译程序，它的行为与在编写 Dessert.java 文件（即打印 pancake）之前的行为相同。 但是，如果使用命令 javac Dessert.java Main.java 编译程序，它将打印 potpie。 程序的行为因此受到源文件传递给编译器的顺序的影响，这显然是不可接受的。</p><p>　　解决这个问题很简单，将顶层类（如我们的例子中的 Utensil 和 Dessert）分割成单独的源文件。 如果试图将多个顶级类放入单个源文件中，请考虑使用静态成员类（详见第 24 条）作为将类拆分为单独的源文件的替代方法。 如果这些类从属于另一个类，那么将它们变成静态成员类通常是更好的选择，因为它提高了可读性，并且可以通过声明它们为私有（详见第 15 条）来减少类的可访问性。下面是我们的例子看起来如何使用静态成员类：</p><pre><code>// Static member classes instead of multiple top-level classespublic class Test {    public static void main(String[] args) {        System.out.println(Utensil.NAME + [Dessert.NAME](http://Dessert.NAME));    }    private static class Utensil {        static final String NAME = &quot;pan&quot;;    }    private static class Dessert {        static final String NAME = &quot;cake&quot;;    }}</code></pre><p>　　这个教训很清楚：永远不要将多个顶级类或接口放在一个源文件中。 遵循这个规则保证在编译时不能有多个定义。 这又保证了编译生成的类文件以及生成的程序的行为与源文件传递给编译器的顺序无关。</p><h1 id="不要使用原始类型"><a href="#不要使用原始类型" class="headerlink" title="不要使用原始类型"></a>不要使用原始类型</h1><p>　　首先，有几个术语。一个类或接口，它的声明有一个或多个类型参数（type parameters ），被称之为泛型类或泛型接口。 例如，List 接口具有单个类型参数 E，表示其元素类型。 接口的全名是 List<e>（读作「E」的列表），但是人们经常称它为 List。 泛型类和接口统称为泛型类型（generic types）。</e></p><p>　　每个泛型定义了一组参数化类型（parameterized types），它们由类或接口名称组成，后跟一个与泛型类型的形式类型参数[JLS，4.4,4.5] 相对应的实际类型参数的尖括号「&lt;&gt;」列表。 例如，List<string>（读作「字符串列表」）是一个参数化类型，表示其元素类型为 String 的列表。 （String 是与形式类型参数 E 相对应的实际类型参数）。</string></p><p>　　最后，每个泛型定义了一个原始类型（raw type），它是没有任何类型参数的泛型类型的名称[JLS，4.8]。 例如，对应于 List<e> 的原始类型是 List。 原始类型的行为就像所有的泛型类型信息都从类型声明中被清除一样。 它们的存在主要是为了与没有泛型之前的代码相兼容。</e></p><p>　　在泛型被添加到 Java 之前，这是一个典型的集合声明。 从 Java 9 开始，它仍然是合法的，但并不是典型的声明方式了：</p><pre><code>// Raw collection type - don&apos;t do this!// My stamp collection. Contains only Stamp instances.private final Collection stamps = ... ;</code></pre><p>　　如果你今天使用这个声明，然后不小心把 coin 实例放入你的 stamp 集合中，错误的插入编译和运行没有错误（尽管编译器发出一个模糊的警告）：</p><pre><code>// Erroneous insertion of coin into stamp collectionstamps.add(new Coin( ... )); // Emits &quot;unchecked call&quot; warning</code></pre><p>　　直到您尝试从 stamp 集合中检索 coin 实例时才会发生错误：</p><pre><code>// Raw iterator type - don&apos;t do this!for (Iterator i = stamps.iterator(); i.hasNext(); )    Stamp stamp = (Stamp) i.next(); // Throws ClassCastException        stamp.cancel();</code></pre><p>　　正如本书所提到的，在编译完成之后尽快发现错误是值得的，理想情况是在编译时。 在这种情况下，直到运行时才发现错误，在错误发生后的很长一段时间，以及可能远离包含错误的代码的代码中。 一旦看到 ClassCastException，就必须搜索代码类库，查找将 coin 实例放入 stamp 集合的方法调用。 编译器不能帮助你，因为它不能理解那个说「仅包含 stamp 实例」的注释。<br>　　对于泛型，类型声明包含的信息，而不是注释：</p><pre><code>// Parameterized collection type - typesafeprivate final Collection&lt;Stamp&gt; stamps = ... ;</code></pre><p>　　从这个声明中，编译器知道 stamps 集合应该只包含 Stamp 实例，并保证它是 true，假设你的整个代码类库编译时不发出（或者抑制；参见条目 27）任何警告。 当使用参数化类型声明声明 stamps 时，错误的插入会生成一个编译时错误消息，告诉你到底发生了什么错误：</p><pre><code>Test.java:9: error: incompatible types: Coin cannot be convertedto Stamp    c.add(new Coin());              ^</code></pre><p>　　当从集合中检索元素时，编译器会为你插入不可见的强制转换，并保证它们不会失败（再假设你的所有代码都不会生成或禁止任何编译器警告）。 虽然意外地将 coin 实例插入 stamp 集合的预期可能看起来很牵强，但这个问题是真实的。 例如，很容易想象将 BigInteger 放入一个只包含 BigDecimal 实例的集合中。</p><p>　　如前所述，使用原始类型（没有类型参数的泛型）是合法的，但是你不应该这样做。<br><strong><em>如果你使用原始类型，则会丧失泛型的所有安全性和表达上的优势。</em></strong> 鉴于你不应该使用它们，为什么语言设计者首先允许原始类型呢？ 答案是为了兼容性。 泛型被添加时，Java 即将进入第二个十年，并且有大量的代码没有使用泛型。 所有这些代码都是合法的，并且与使用泛型的新代码进行交互操作被认为是至关重要的。 将参数化类型的实例传递给为原始类型设计的方法必须是合法的，反之亦然。 这个需求，被称为迁移兼容性，驱使决策支持原始类型，并使用擦除来实现泛型（详见第 28 条）。</p><p>　　虽然不应使用诸如 List 之类的原始类型，但可以使用参数化类型来允许插入任意对象（如 List<object>）。 原始类型 List 和参数化类型 List<object> 之间有什么区别？ 松散地说，前者已经选择了泛型类型系统，而后者明确地告诉编译器，它能够保存任何类型的对象。 虽然可以将 List<string> 传递给 List 类型的参数，但不能将其传递给 List<object> 类型的参数。 泛型有子类型的规则，List<string> 是原始类型 List 的子类型，但不是参数化类型 List<object> 的子类型（条目 28）。 因此，如果使用诸如 List 之类的原始类型，则会丢失类型安全性，但是如果使用参数化类型（例如 List<object>）则不会。</object></object></string></object></string></object></object></p><p>　　为了具体说明，请考虑以下程序：</p><pre><code>// Fails at runtime - unsafeAdd method uses a raw type (List)!public static void main(String[] args) {    List&lt;String&gt; strings = new ArrayList&lt;&gt;();    unsafeAdd(strings, Integer.valueOf(42));    String s = strings.get(0); // Has compiler-generated cast}private static void unsafeAdd(List list, Object o) {    list.add(o);}</code></pre><p>　　此程序可以编译，它使用原始类型列表，但会收到警告：</p><pre><code>Test.java:10: warning: [unchecked] unchecked call to add(E) as amember of the raw type List    list.add(o);            ^</code></pre><p>　　实际上，如果运行该程序，则当程序尝试调用 strings.get(0) 的结果（一个 Integer）转换为一个 String 时，会得到 ClassCastException 异常。 这是一个编译器生成的强制转换，因此通常会保证成功，但在这种情况下，我们忽略了编译器警告并付出了代价。</p><p>　　如果用 unsafeAdd 声明中的参数化类型 List<object> 替换原始类型 List，并尝试重新编译该程序，则会发现它不再编译，而是发出错误消息：</object></p><pre><code>Test.java:5: error: incompatible types: List&lt;String&gt; cannot beconverted to List&lt;Object&gt;    unsafeAdd(strings, Integer.valueOf(42));</code></pre><p>　　你可能会试图使用原始类型来处理元素类型未知且无关紧要的集合。 例如，假设你想编写一个方法，它需要两个集合并返回它们共同拥有的元素的数量。 如果是泛型新手，那么您可以这样写：</p><pre><code>// Use of raw type for unknown element type - don&apos;t do this!static int numElementsInCommon(Set s1, Set s2) {    int result = 0;    for (Object o1 : s1)        if (s2.contains(o1))            result++;    return result;}</code></pre><p>　　这种方法可以工作，但它使用原始类型，这是危险的。 安全替代方式是使用无限制通配符类型（unbounded wildcard types）。 如果要使用泛型类型，但不知道或关心实际类型参数是什么，则可以使用问号来代替。 例如，泛型类型 Set<e> 的无限制通配符类型是 Set&lt;?&gt;（读取「某种类型的集合」）。 它是最通用的参数化的 Set 类型，能够保持任何集合。 下面是 numElementsInCommon 方法使用无限制通配符类型声明的情况：</e></p><pre><code>// Uses unbounded wildcard type - typesafe and flexiblestatic int numElementsInCommon(Set&lt;?&gt; s1, Set&lt;?&gt; s2) { ... }</code></pre><p>　　无限制通配符 Set<?> 与原始类型 Set 之间有什么区别？ 问号真的给你放任何东西吗？ 这不是要点，但通配符类型是安全的，原始类型不是。 你可以将任何元素放入具有原始类型的集合中，轻易破坏集合的类型不变性（如第 119 页上的 unsafeAdd 方法所示）; 你不能把任何元素（除 null 之外）放入一个 Collection<?> 中。 试图这样做会产生一个像这样的编译时错误消息：</p><pre><code>WildCard.java:13: error: incompatible types: String cannot beconverted to CAP#1    c.add(&quot;verboten&quot;);          ^  where CAP#1 is a fresh type-variable:    CAP#1 extends Object from capture of ?</code></pre><p>　　不可否认的是，这个错误信息留下了一些需要的东西，但是编译器已经完成了它的工作，不管它的元素类型是什么，都不会破坏集合的类型不变性。 你不仅不能将任何元素（除 null 以外）放入一个 Collection&lt;?&gt; 中，并且根本无法猜测你会得到那种类型的对象。 如果这些限制是不可接受的，可以使用泛型方法（详见第 30 条）或有限制的通配符类型（详见第 31 条）。</p><p>　　对于不应该使用原始类型的规则，有一些小例外。 <strong><em>你必须在类字面值（class literals）中使用原始类型。</em></strong>  规范中不允许使用参数化类型（尽管它允许数组类型和基本类型）[JLS，15.8.2]。 换句话说，List.class，String[].class 和 int.class 都是合法的，但 List<string>.class 和 List&lt;?&gt;.class 都是不合法的。</string></p><p>　　规则的第二个例外与 instanceof 操作符有关。 因为泛型类型信息在运行时被擦除，所以在无限制通配符类型以外的参数化类型上使用 instanceof 运算符是非法的。 使用无限制通配符类型代替原始类型，不会对 instanceof 运算符的行为产生任何影响。 在这种情况下，尖括号（&lt;&gt;）和问号（?）就显得多余。 <strong><em>以下是使用泛型类型的 instanceof 运算符的首选方法</em></strong>：</p><pre><code>// Legitimate use of raw type - instanceof operatorif (o instanceof Set) {       // Raw type    Set&lt;?&gt; s = (Set&lt;?&gt;) o;    // Wildcard type    ...}</code></pre><p>　　请注意，一旦确定 o 对象是一个 Set，则必须将其转换为通配符 Set&lt;?&gt;，而不是原始类型 Set。 这是一个受检查的（checked）转换，所以不会导致编译器警告。</p><p>　　总之，使用原始类型可能导致运行时异常，所以不要使用它们。 原始类型只是为了与引入泛型机制之前的遗留代码进行兼容和互用而提供的。 作为一个快速回顾，Set<object> 是一个参数化类型，表示一个可以包含任何类型对象的集合，Set&lt;?&gt; 是一个通配符类型，表示一个只能包含某些未知类型对象的集合，Set 是一个原始类型，它不在泛型类型系统之列。 前两个类型是安全的，最后一个不是。</object></p><p>　　为了快速参考，下表中总结了本条目（以及本章稍后介绍的一些）中介绍的术语：</p><pre><code>术语           中文含义       举例                 所在条目Parameterized type    参数化类型    List&lt;String&gt;    条目 26Actual type parameter    实际类型参数    String    条目 26Generic type    泛型类型    List&lt;E&gt;    条目 26 和 条目 29Formal type parameter    形式类型参数    E    条目 26Unbounded wildcard type    无限制通配符类型    List&lt;?&gt;    条目 26Raw type    原始类型    List    条目 26Bounded type parameter    限制类型参数    &lt;E extends Number&gt;    条目 29Recursive type bound    递归类型限制    &lt;T extends Comparable&lt;T&gt;&gt;    条目 30Bounded wildcard type    限制通配符类型    List&lt;? extends Number&gt;    条目 31Generic method    泛型方法    static &lt;E&gt; List&lt;E&gt; asList(E[] a)    条目 30Type token    类型令牌    String.class    条目 33</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/25.%20%E5%B0%86%E6%BA%90%E6%96%87%E4%BB%B6%E9%99%90%E5%88%B6%E4%B8%BA%E5%8D%95%E4%B8%AA%E9%A1%B6%E7%BA%A7%E7%B1%BB?id=_25-%e5%b0%86%e6%ba%90%e6%96%87%e4%bb%b6%e9%99%90%e5%88%b6%e4%b8%ba%e5%8d%95%e4%b8%aa%e9%a1%b6%e7%ba%a7%e7%b1%bb" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/25.%20%E5%B0%86%E6%BA%90%E6%96%87%E4%BB%B6%E9%99%90%E5%88%B6%E4%B8%BA%E5%8D%95%E4%B8%AA%E9%A1%B6%E7%BA%A7%E7%B1%BB?id=_25-%e5%b0%86%e6%ba%90%e6%96%87%e4%bb%b6%e9%99%90%e5%88%b6%e4%b8%ba%e5%8d%95%e4%b8%aa%e9%a1%b6%e7%ba%a7%e7%b1%bb</a><br>【2】<a href="https://lingcoder.github.io/OnJava8/#/book/20-Generics?id=%e7%ae%80%e5%8d%95%e6%b3%9b%e5%9e%8b" target="_blank" rel="noopener">https://lingcoder.github.io/OnJava8/#/book/20-Generics?id=%e7%ae%80%e5%8d%95%e6%b3%9b%e5%9e%8b</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章阅读：类和接口&lt;/p&gt;
&lt;p&gt;25.将源文件限制为单个顶级类&lt;br&gt;永远不要将多个顶级类或接口放在一个源文件中。 遵循这个规则保证在编译时不能有多个定义。 这又保证了编译生成的类文件以及生成的程序的行为与源文件传递给编译器的顺序无关。&lt;/p&gt;
&lt;p&gt;第五章阅读： 泛型&lt;br&gt;泛型实现了参数化类型，这样编写的组件（通常是集合）可以适用于多种类型。“泛型”这个术语的含义是“适用于很多类型”。编程语言中泛型出现的初衷是通过解耦类或方法与所使用的类型之间的约束，使得类或方法具备最宽泛的表达力。&lt;/p&gt;
&lt;p&gt;26.不要使用原始类型&lt;br&gt;使用原始类型可能导致运行时异常，所以不要使用它们。 原始类型只是为了与引入泛型机制之前的遗留代码进行兼容和互用而提供的。Set&lt;object&gt; 是一个参数化类型，表示一个可以包含任何类型对象的集合，Set&amp;lt;?&amp;gt; 是一个通配符类型，表示一个只能包含某些未知类型对象的集合，Set 是一个原始类型，它不在泛型类型系统之列。 前两个类型是安全的，最后一个不是。&lt;/object&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XII</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XII/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记XII/</id>
    <published>2020-01-16T09:17:12.000Z</published>
    <updated>2020-01-17T01:50:19.117Z</updated>
    
    <content type="html"><![CDATA[<p>第四章阅读：类和接口</p><p>23.类层次结构优于标签类<br>当遇到一个带有标签字段的现有类时，可以考虑将其重构为一个类层次结构。<br>24.支持使用静态成员类而不是非静态类<br>有四种不同的嵌套类：静态成员类，非静态成员类，匿名类和局部类。每个都有它的用途。 如果一个嵌套的类需要在一个方法之外可见，或者太长而不能很好地适应一个方法，使用一个成员类。 如果一个成员类的每个实例都需要一个对其宿主实例的引用，使其成为非静态的; 否则，使其静态。 假设这个类属于一个方法内部，如果你只需要从一个地方创建实例，并且存在一个预置类型来说明这个类的特征，那么把它作为一个匿名类；否则，把它变成局部类</p><a id="more"></a><h1 id="类层次结构优于标签类"><a href="#类层次结构优于标签类" class="headerlink" title="类层次结构优于标签类"></a>类层次结构优于标签类</h1><p>　　有时你可能会碰到一个类，它的实例有两个或更多的风格，并且包含一个标签字段（tag field），表示实例的风格。 例如，考虑这个类，它可以表示一个圆形或矩形：</p><pre><code>// Tagged class - vastly inferior to a class hierarchy!class Figure {    enum Shape { RECTANGLE, CIRCLE };    // Tag field - the shape of this figure    final Shape shape;    // These fields are used only if shape is RECTANGLE    double length;    double width;    // This field is used only if shape is CIRCLE    double radius;    // Constructor for circle    Figure(double radius) {        shape = Shape.CIRCLE;        this.radius = radius;    }    // Constructor for rectangle    Figure(double length, double width) {        shape = Shape.RECTANGLE;        this.length = length;        this.width = width;    }    double area() {        switch(shape) {          case RECTANGLE:            return length * width;          case CIRCLE:            return Math.PI * (radius * radius);          default:            throw new AssertionError(shape);        }    }}</code></pre><p>　　这样的标签类具有许多缺点。 它们充斥着杂乱无章的样板代码，包括枚举声明，标签字段和 switch 语句。 可读性更差，因为多个实现在一个类中混杂在一起。 内存使用增加，因为实例负担属于其他风格不相关的领域。 字段不能成为 final，除非构造方法初始化不相关的字段，导致更多的样板代码。 构造方法在编译器的帮助下，必须设置标签字段并初始化正确的数据字段：如果初始化错误的字段，程序将在运行时失败。 除非可以修改其源文件，否则不能将其添加到标记的类中。 如果你添加一个风格，你必须记得给每个 switch 语句添加一个 case，否则这个类将在运行时失败。 最后，一个实例的数据类型没有提供任何关于风格的线索。 总之，<strong><em>标签类是冗长的，容易出错的，而且效率低下。</em></strong><br>　　幸运的是，像 Java 这样的面向对象的语言为定义一个能够表示多种风格对象的单一数据类型提供了更好的选择：子类型化（subtyping）。标签类仅仅是一个类层次的简单的模仿。</p><p>　　要将标签类转换为类层次，首先定义一个包含抽象方法的抽象类，该标签类的行为取决于标签值。 在 Figure 类中，只有一个这样的方法，就是 area 方法。 这个抽象类是类层次的根。 如果有任何方法的行为不依赖于标签的值，把它们放在这个类中。 同样，如果有所有的方法使用的数据字段，把它们放在这个类。Figure 类中不存在这种与类型无关的方法或字段。</p><p>　　接下来，为原始标签类的每种类型定义一个根类的具体子类。 在我们的例子中，有两个类型：圆形和矩形。 在每个子类中包含特定于改类型的数据字段。 在我们的例子中，半径字段是属于圆的，长度和宽度字段都是矩形的。 还要在每个子类中包含根类中每个抽象方法的适当实现。 这里是对应于 Figure 类的类层次：</p><pre><code>// Class hierarchy replacement for a tagged classabstract class Figure {    abstract double area();}class Circle extends Figure {    final double radius;    Circle(double radius) { this.radius = radius; }    @Override double area() { return Math.PI * (radius * radius); }}class Rectangle extends Figure {    final double length;    final double width;    Rectangle(double length, double width) {        this.length = length;        this.width  = width;    }    @Override double area() { return length * width; }}</code></pre><p>　　这个类层次纠正了之前提到的标签类的每个缺点。 代码简单明了，不包含原文中的样板文件。 每种类型的实现都是由自己的类来分配的，而这些类都没有被无关的数据字段所占用。 所有的字段是 final 的。 编译器确保每个类的构造方法初始化其数据字段，并且每个类都有一个针对在根类中声明的每个抽象方法的实现。 这消除了由于缺少 switch-case 语句而导致的运行时失败的可能性。 多个程序员可以独立地继承类层次，并且可以相互操作，而无需访问根类的源代码。 每种类型都有一个独立的数据类型与之相关联，允许程序员指出变量的类型，并将变量和输入参数限制为特定的类型。</p><p>　　类层次的另一个优点是可以使它们反映类型之间的自然层次关系，从而提高了灵活性，并提高了编译时类型检查的效率。 假设原始示例中的标签类也允许使用正方形。 类层次可以用来反映一个正方形是一种特殊的矩形（假设它们是不可变的）：</p><pre><code>class Square extends Rectangle {    Square(double side) {        super(side, side);    }}</code></pre><p>　　请注意，上述层次结构中的字段是直接访问的，而不是通过访问器方法访问的。 这里是为了简洁起见，如果类层次是公开的（详见第 16 条），这将是一个糟糕的设计。</p><p>　　总之，标签类很少有适用的情况。 如果你想写一个带有显式标签字段的类，请考虑标签字段是否可以被删除，并是否能被类层次结构替换。 当遇到一个带有标签字段的现有类时，可以考虑将其重构为一个类层次结构。</p><h1 id="支持使用静态成员类而不是非静态类"><a href="#支持使用静态成员类而不是非静态类" class="headerlink" title="支持使用静态成员类而不是非静态类"></a>支持使用静态成员类而不是非静态类</h1><p>　　嵌套类（nested class）是在另一个类中定义的类。 嵌套类应该只存在于其宿主类（enclosing class）中。 如果一个嵌套类在其他一些情况下是有用的，那么它应该是一个顶级类。 有四种嵌套类：静态成员类，非静态成员类，匿名类和局部类。 除了第一种以外，剩下的三种都被称为 <strong><em>内部类（inner class）</em></strong>。 这个条目告诉你什么时候使用哪种类型的嵌套类以及为什么使用。</p><p>　　静态成员类是最简单的嵌套类。 最好把它看作是一个普通的类，恰好在另一个类中声明，并且可以访问所有宿主类的成员，甚至是那些被声明为私有类的成员。 静态成员类是其宿主类的静态成员，并遵循与其他静态成员相同的可访问性规则。 如果它被声明为 private，则只能在宿主类中访问，等等。</p><p>　　静态成员类的一个常见用途是作为公共帮助类，仅在与其外部类一起使用时才有用。 例如，考虑一个描述计算器支持的操作的枚举类型（详见第 34 条）。 Operation 枚举应该是 Calculator 类的公共静态成员类。 Calculator 客户端可以使用 Calculator.Operation.PLUS 和 Calculator.Operation.MINUS 等名称来引用操作。</p><p>　　在语法上，静态成员类和非静态成员类之间的唯一区别是静态成员类在其声明中具有 static 修饰符。 尽管句法相似，但这两种嵌套类是非常不同的。 非静态成员类的每个实例都隐含地与其包含的类的宿主实例相关联。 在非静态成员类的实例方法中，可以调用宿主实例上的方法，或者使用限定的构造[JLS，15.8.4] 获得对宿主实例的引用。 如果嵌套类的实例可以与其宿主类的实例隔离存在，那么嵌套类必须是静态成员类：不可能在没有宿主实例的情况下创建非静态成员类的实例。</p><p>　　非静态成员类实例和其宿主实例之间的关联是在创建成员类实例时建立的，并且之后不能被修改。 通常情况下，通过在宿主类的实例方法中调用非静态成员类构造方法来自动建立关联。 尽管很少有可能使用表达式 enclosingInstance.new MemberClass(args) 手动建立关联。 正如你所预料的那样，该关联在非静态成员类实例中占用了空间，并为其构建添加了时间开销。</p><p>　　非静态成员类的一个常见用法是定义一个 Adapter [Gamma95]，它允许将外部类的实例视为某个不相关类的实例。 例如，Map 接口的实现通常使用非静态成员类来实现它们的集合视图，这些视图由 Map 的 keySet，entrySet 和 values 方法返回。 同样，集合接口（如 Set 和 List）的实现通常使用非静态成员类来实现它们的迭代器：</p><pre><code>// Typical use of a nonstatic member classpublic class MySet&lt;E&gt; extends AbstractSet&lt;E&gt; {    ... // Bulk of the class omitted    @Override    public Iterator&lt;E&gt; iterator() {        return new MyIterator();    }    private class MyIterator implements Iterator&lt;E&gt; {        ...    }}</code></pre><p>　　<strong><em>如果你声明了一个不需要访问宿主实例的成员类，总是把 static 修饰符放在它的声明中，使它成为一个静态成员类，而不是非静态的成员类。</em></strong> 如果你忽略了这个修饰符，每个实例都会有一个隐藏的外部引用给它的宿主实例。 如前所述，存储这个引用需要占用时间和空间。 更严重的是，并且会导致即使宿主类在满足垃圾回收的条件时却仍然驻留在内存中（详见第 7 条）。 由此产生的内存泄漏可能是灾难性的。 由于引用是不可见的，所以通常难以检测到。</p><p>　　私有静态成员类的常见用法是表示由它们的宿主类表示的对象的组件。 例如，考虑将键与值相关联的 Map 实例。 许多 Map 实现对于映射中的每个键值对都有一个内部的 Entry 对象。 当每个 entry 都与 Map 关联时，entry 上的方法 (getKey，getValue 和 setValue) 不需要访问 Map。 因此，使用非静态成员类来表示 entry 将是浪费的：私有静态成员类是最好的。 如果意外地忽略了 entry 声明中的 static 修饰符，Map 仍然可以工作，但是每个 entry 都会包含对 Map 的引用，浪费空间和时间。</p><p>　　如果所讨论的类是导出类的公共或受保护成员，则在静态和非静态成员类之间正确选择是非常重要的。 在这种情况下，成员类是导出的 API 元素，如果不违反向后兼容性，就不能在后续版本中从非静态变为静态成员类。</p><p>　　正如你所期望的，一个匿名类没有名字。 它不是其宿主类的成员。 它不是与其他成员一起声明，而是在使用时同时声明和实例化。 在表达式合法的代码中，匿名类是允许的。 当且仅当它们出现在非静态上下文中时，匿名类才会封装实例。 但是，即使它们出现在静态上下文中，它们也不能有除常量型变量之外的任何静态成员，这些常量型变量包括 final 的基本类型，或者初始化常量表达式的字符串属性[JLS，4.12.4]。</p><p>　　匿名类的适用性有很多限制。 除了在声明的时候之外，不能实例化它们。 你不能执行 instanceof 方法测试或者做任何其他需要你命名的类。 不能声明一个匿名类来实现多个接口，或者继承一个类并同时实现一个接口。 匿名类的客户端不能调用除父类型继承的成员以外的任何成员。 因为匿名类在表达式中出现，所以它们必须保持简短 —— 约十行或更少 —— 否则可读性将受到影响。</p><p>　　在将 lambda 表达式添加到 Java（第 6 章）之前，匿名类是创建小函数对象和处理对象的首选方法，但 lambda 表达式现在是首选（详见第 42 条）。 匿名类的另一个常见用途是实现静态工厂方法（请参阅条目 20 中的 intArrayAsList）。</p><p>　　局部类是四种嵌套类中使用最少的。 一个局部类可以在任何可以声明局部变量的地方声明，并遵守相同的作用域规则。 局部类与其他类型的嵌套类具有共同的属性。 像成员类一样，他们有名字，可以重复使用。 就像匿名类一样，只有在非静态上下文中定义它们时，它们才会包含实例，并且它们不能包含静态成员。 像匿名类一样，应该保持简短，以免损害可读性。</p><p>　　回顾一下，有四种不同的嵌套类，每个都有它的用途。 如果一个嵌套的类需要在一个方法之外可见，或者太长而不能很好地适应一个方法，使用一个成员类。 如果一个成员类的每个实例都需要一个对其宿主实例的引用，使其成为非静态的; 否则，使其静态。 假设这个类属于一个方法内部，如果你只需要从一个地方创建实例，并且存在一个预置类型来说明这个类的特征，那么把它作为一个匿名类；否则，把它变成局部类。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/23.%20%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BC%98%E4%BA%8E%E6%A0%87%E7%AD%BE%E7%B1%BB" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/23.%20%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BC%98%E4%BA%8E%E6%A0%87%E7%AD%BE%E7%B1%BB</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章阅读：类和接口&lt;/p&gt;
&lt;p&gt;23.类层次结构优于标签类&lt;br&gt;当遇到一个带有标签字段的现有类时，可以考虑将其重构为一个类层次结构。&lt;br&gt;24.支持使用静态成员类而不是非静态类&lt;br&gt;有四种不同的嵌套类：静态成员类，非静态成员类，匿名类和局部类。每个都有它的用途。 如果一个嵌套的类需要在一个方法之外可见，或者太长而不能很好地适应一个方法，使用一个成员类。 如果一个成员类的每个实例都需要一个对其宿主实例的引用，使其成为非静态的; 否则，使其静态。 假设这个类属于一个方法内部，如果你只需要从一个地方创建实例，并且存在一个预置类型来说明这个类的特征，那么把它作为一个匿名类；否则，把它变成局部类&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记XI</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0XI/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记XI/</id>
    <published>2020-01-16T08:23:12.000Z</published>
    <updated>2020-01-17T01:50:19.118Z</updated>
    
    <content type="html"><![CDATA[<p>第四章阅读：类和接口</p><p>21.为后代设计接口<br>应该避免使用默认方法向现有的接口添加新的方法，除非这个需要是关键的。在默认方法的情况下，接口的现有实现类可以在没有错误或警告的情况下编译，但在运行时会失败。<br>22.接口仅用来定义类型<br>接口只能用于定义类型。 它们不应该只是被用于导出常量。</p><a id="more"></a><h1 id="为后代设计接口"><a href="#为后代设计接口" class="headerlink" title="为后代设计接口"></a>为后代设计接口</h1><p>　　在 Java 8 之前，不可能在不破坏现有实现的情况下为接口添加方法。 如果向接口添加了一个新方法，现有的实现通常会缺少该方法，从而导致编译时错误。 在 Java 8 中，添加了默认方法（default method）构造[JLS 9.4]，目的是允许将方法添加到现有的接口。 但是增加新的方法到现有的接口是充满风险的。</p><p>　　默认方法的声明包含一个默认实现，该方法允许实现接口的类直接使用，而不必实现默认方法。 虽然在 Java 中添加默认方法可以将方法添加到现有接口，但不能保证这些方法可以在所有已有的实现中使用。 默认的方法被「注入（injected）」到现有的实现中，没有经过实现类的知道或同意。 在 Java 8 之前，这些实现是用默认的接口编写的，它们的接口永远不会获得任何新的方法。</p><p>　　许多新的默认方法被添加到 Java 8 的核心集合接口中，主要是为了方便使用 lambda 表达式（第 6 章）。 Java 类库的默认方法是高质量的通用实现，在大多数情况下，它们工作正常。 但是，编写一个默认方法并不总是可能的，它保留了每个可能的实现的所有不变量。</p><p>　　例如，考虑在 Java 8 中添加到 Collection 接口的 removeIf 方法。此方法删除给定布尔方法（或 Predicate 函数式接口）返回 true 的所有元素。默认实现被指定为使用迭代器遍历集合，调用每个元素的谓词，并使用迭代器的 remove 方法删除谓词返回 true 的元素。 据推测，这个声明看起来像这样：默认实现被指定为使用迭代器遍历集合，调用每个元素的 Predicate 函数式接口，并使用迭代器的 remove 方法删除 Predicate 函数式接口返回 true 的元素。 根据推测，这个声明看起来像这样：</p><pre><code>// Default method added to the Collection interface in Java 8default boolean removeIf(Predicate&lt;? super E&gt; filter) {    Objects.requireNonNull(filter);    boolean result = false;    for (Iterator&lt;E&gt; it = iterator(); it.hasNext(); ) {        if (filter.test(it.next())) {            it.remove();            result = true;        }    }    return result;}</code></pre><p>　　这是可能为 removeIf 方法编写的最好的通用实现，但遗憾的是，它在一些实际的 Collection 实现中失败了。 例如，考虑 org.apache.commons.collections4.collection.SynchronizedCollection 方法。 这个类出自 Apache Commons 类库中，与 java.util 包中的静态工厂 Collections.synchronizedCollection 方法返回的类相似。 Apache 版本还提供了使用客户端提供的对象进行锁定的能力，以代替集合。 换句话说，它是一个包装类（条目 18），它们的所有方法在委托给包装集合类之前在一个锁定对象上进行同步。</p><p>　　Apache 的 SynchronizedCollection 类仍然在积极维护，但在撰写本文时，并未重写 removeIf 方法。 如果这个类与 Java 8 一起使用，它将继承 removeIf 的默认实现，但实际上不能保持类的基本承诺：自动同步每个方法调用。 默认实现对同步一无所知，并且不能访问包含锁定对象的属性。 如果客户端在另一个线程同时修改集合的情况下调用 SynchronizedCollection 实例上的 removeIf 方法，则可能会导致 ConcurrentModificationException 异常或其他未指定的行为。</p><p>　　为了防止在类似的 Java 平台类库实现中发生这种情况，比如 Collections.synchronizedCollection 返回的包级私有的类，JDK 维护者必须重写默认的 removeIf 实现和其他类似的方法来在调用默认实现之前执行必要的同步。 原来不属于 Java 平台的集合实现没有机会与接口更改进行类似的改变，有些还没有这样做。</p><p>　　<strong><em>在默认方法的情况下，接口的现有实现类可以在没有错误或警告的情况下编译，但在运行时会失败。</em></strong> 虽然不是非常普遍，但这个问题也不是一个孤立的事件。 在 Java 8 中添加到集合接口的一些方法已知是易受影响的，并且已知一些现有的实现会受到影响。</p><p>　　应该避免使用默认方法向现有的接口添加新的方法，除非这个需要是关键的，在这种情况下，你应该仔细考虑，以确定现有的接口实现是否会被默认的方法实现所破坏。然而，默认方法对于在创建接口时提供标准的方法实现非常有用，以减轻实现接口的任务（详见第 20 条）。</p><p>　　还值得注意的是，默认方法不是被用来设计，来支持从接口中移除方法或者改变现有方法的签名的目的。在不破坏现有客户端的情况下，这些接口都不可能发生更改。</p><p>　　准则是清楚的。 尽管默认方法现在是 Java 平台的一部分，<strong><em>但是非常悉心地设计接口仍然是非常重要的</em></strong>。 虽然默认方法可以将方法添加到现有的接口，但这样做有很大的风险。 如果一个接口包含一个小缺陷，可能会永远惹怒用户。 如果一个接口严重缺陷，可能会破坏包含它的 API。</p><p>　　因此，在发布之前测试每个新接口是非常重要的。 多个程序员应该以不同的方式实现每个接口。 至少，你应该准备三种不同的实现。 编写多个使用每个新接口的实例来执行各种任务的客户端程序同样重要。 这将大大确保每个接口都能满足其所有的预期用途。 这些步骤将允许你在发布之前发现接口中的缺陷，但仍然可以轻松地修正它们。 虽然在接口被发布后可能会修正一些存在的缺陷，但不要太指望这一点。</p><h1 id="接口仅用来定义类型"><a href="#接口仅用来定义类型" class="headerlink" title="接口仅用来定义类型"></a>接口仅用来定义类型</h1><p>　　当类实现接口时，该接口作为一种类型（type），可以用来引用类的实例。因此，一个类实现了一个接口，因此表明客户端可以如何处理类的实例。为其他目的定义接口是不合适的。</p><p>　　一种失败的接口就是所谓的常量接口（constant interface）。 这样的接口不包含任何方法; 它只包含静态 final 属性，每个输出一个常量。 使用这些常量的类实现接口，以避免需要用类名限定常量名。 这里是一个例子：</p><pre><code>// Constant interface antipattern - do not use!public interface PhysicalConstants {    // Avogadro&apos;s number (1/mol)    static final double AVOGADROS_NUMBER   = 6.022_140_857e23;    // Boltzmann constant (J/K)    static final double BOLTZMANN_CONSTANT = 1.380_648_52e-23;    // Mass of the electron (kg)    static final double ELECTRON_MASS      = 9.109_383_56e-31;}</code></pre><p>　　常量接口模式是对接口的糟糕使用。 类在内部使用一些常量，完全属于实现细节。实现一个常量接口会导致这个实现细节泄漏到类的导出 API 中。对类的用户来说，类实现一个常量接口是没有意义的。事实上，它甚至可能使他们感到困惑。更糟糕的是，它代表了一个承诺：如果在将来的版本中修改了类，不再需要使用常量，那么它仍然必须实现接口，以确保二进制兼容性。如果一个非 final 类实现了常量接口，那么它的所有子类的命名空间都会被接口中的常量所污染。</p><p>　　Java 平台类库中有多个常量接口，如 java.io.ObjectStreamConstants。 这些接口应该被视为不规范的，不应该被效仿。</p><p>　　如果你想导出常量，有几个合理的选择方案。 如果常量与现有的类或接口紧密相关，则应将其添加到该类或接口中。 例如，所有数字基本类型的包装类，如 Integer 和 Double，都会导出 MIN_VALUE 和 MAX_VALUE 常量。 如果常量最好被看作枚举类型的成员，则应该使用枚举类型（详见第 34 条）导出它们。 否则，你应该用一个不可实例化的工具类来导出常量（详见第 4 条）。 下是前面所示的 PhysicalConstants 示例的工具类的版本：</p><pre><code>// Constant utility classpackage com.effectivejava.science;public class PhysicalConstants {  private PhysicalConstants() { }  // Prevents instantiation  public static final double AVOGADROS_NUMBER = 6.022_140_857e23;  public static final double BOLTZMANN_CONST  = 1.380_648_52e-23;  public static final double ELECTRON_MASS    = 9.109_383_56e-31;}</code></pre><p>　　顺便提一下，请注意在数字文字中使用下划线字符_ 。 从 Java 7 开始，合法的下划线对数字字面量的值没有影响，但是如果使用得当的话可以使它们更容易阅读。 无论是固定的浮点数，如果他们包含五个或更多的连续数字，考虑将下划线添加到数字字面量中。 对于底数为 10 的数字，无论是整型还是浮点型的，都应该用下划线将数字分成三个数字组，表示一千的正负幂。</p><p>　　通常，实用工具类要求客户端使用类名来限定常量名，例如 PhysicalConstants.AVOGADROS_NUMBER。 如果大量使用实用工具类导出的常量，则通过使用静态导入来限定具有类名的常量：</p><pre><code>// Use of static import to avoid qualifying constantsimport static com.effectivejava.science.PhysicalConstants.*;public class Test {    double  atoms(double mols) {        return AVOGADROS_NUMBER * mols;    }    ...    // Many more uses of PhysicalConstants justify static import}</code></pre><p>　　总之，接口只能用于定义类型。 它们不应该只是被用于导出常量。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/21.%20%E4%B8%BA%E5%90%8E%E4%BB%A3%E8%AE%BE%E8%AE%A1%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/21.%20%E4%B8%BA%E5%90%8E%E4%BB%A3%E8%AE%BE%E8%AE%A1%E6%8E%A5%E5%8F%A3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章阅读：类和接口&lt;/p&gt;
&lt;p&gt;21.为后代设计接口&lt;br&gt;应该避免使用默认方法向现有的接口添加新的方法，除非这个需要是关键的。在默认方法的情况下，接口的现有实现类可以在没有错误或警告的情况下编译，但在运行时会失败。&lt;br&gt;22.接口仅用来定义类型&lt;br&gt;接口只能用于定义类型。 它们不应该只是被用于导出常量。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记X</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0X/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记X/</id>
    <published>2020-01-16T06:29:12.000Z</published>
    <updated>2020-01-17T01:50:19.120Z</updated>
    
    <content type="html"><![CDATA[<p>第四章阅读：类和接口</p><p>19.要么设计继承并提供文档说明，要么禁用继承<br>除非知道真正需要子类，否则最好通过将类声明为 final，或者确保没有可访问的构造器来禁止类被继承。<br>20.接口优于抽象类<br>一个接口通常是定义允许多个实现的类型的最佳方式。 如果导出一个重要的接口，应该强烈考虑提供一个骨架的实现类。在可能的情况下，应该通过接口上的默认方法提供骨架实现，以便接口的所有实现者都可以使用它。即对接口的限制通常要求骨架实现类采用抽象类的形式。</p><a id="more"></a><h1 id="要么设计继承并提供文档说明，要么禁用继承"><a href="#要么设计继承并提供文档说明，要么禁用继承" class="headerlink" title="要么设计继承并提供文档说明，要么禁用继承"></a>要么设计继承并提供文档说明，要么禁用继承</h1><p>　　条目 18 中提醒你注意继承没有设计和文档说明的「外来」类的子类化的危险。 那么对于专门为了继承而设计并且具有良好文档说明的类而言，这又意味着什么呢？</p><p>　　首先，这个类必须准确地描述重写每个方法带来的影响。 换句话说，该类必须文档说明可重写方法的自用性（self-use）。 对于每个 public 或者 protected 的方法，文档必须指明方法调用哪些可重写方法，以何种顺序调用的，以及每次调用的结果又是如何影响后续处理。 （重写方法，这里是指非 final 修饰的方法，无论是公开还是保护的。）更一般地说，一个类必须文档说明任何可能调用可重写方法的情况。 例如，后台线程或者静态初始化代码块可能会调用这样的方法。</p><p>　　调用可重写方法的方法在文档注释结束时包含对这些调用的描述。 这些描述在规范中特定部分，标记为「Implementation Requirements」，由 Javadoc 标签 @implSpec 生成。 这段话介绍该方法的内部工作原理。 下面是从 java.util.AbstractCollection 类的规范中拷贝的例子：</p><pre><code>public boolean remove(Object o)Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element e such that Objects.equals(o, e), if this collection contains one or more such elements. Returns true if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).Implementation Requirements: This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator’s remove method. Note that this implementation throws an UnsupportedOperationException if the iterator returned by this collection’s iterator method does not implement the remove method and this collection contains the specified object.</code></pre><p>　　从该集合中删除指定元素的单个实例（如果存在，optional 实例操作）。 更广义地说，如果这个集合包含一个或多个这样的元素 e，就删除其中的一个满足 Objects.equals(o, e) 的元素 e。 如果此集合包含指定的元素（或者等同于此集合因调用而发生了更改），则返回 true。</p><p>　　实现要求： 这个实现迭代遍历集合查找指定元素。 如果找到元素，则使用迭代器的 remove 方法从集合中删除元素。 请注意，如果此集合的 iterator 方法返回的迭代器未实现 remove 方法，并且此集合包含指定的对象，则该实现将引发 UnsupportedOperationException 异常。</p><p>　　这个文档清楚地说明，重写 iterator 方法将会影响 remove 方法的行为。 它还描述了 iterator 方法返回的 Iterator 行为将如何影响 remove 方法的行为。 与条目 18 中的情况相反，在这种情况下，程序员继承 HashSet 并不能说明重写 add 方法是否会影响 addAll 方法的行为。</p><p>　　关于程序文档有句格言：好的 API 文档应该描述一个给定的方法做了什么工作，而不是描述它是如何做到的。那么，上面这种做法是否违背了这句格言呢？是的，它确实违背了！这正是继承破坏了封装性所带来的不幸后果。所以，为了设计一个类的文档，以便它能够被安全地子类化，你必须描述清楚那些有可能未定义的实现细节。</p><p>　　@implSpec 标签是在 Java 8 中添加的，并且在 Java 9 中被大量使用。这个标签应该默认启用，但是从 Java 9 开始，除非通过命令行开关-tag “apiNote:a:API Note:”，否则 Javadoc 工具仍然会忽略它。</p><p>　　为了继承而进行的设计不仅仅涉及自用模式的文档设计。为了使程序员能够编写出更加有效的子类，而无须承受不必要的痛苦，类必须以精心挑选的 protected 方法的形式，提供适当的钩子（hook），以便进入其内部工作中。或者在罕见的情况下，提供受保护的属性。 例如，考虑 java.util.AbstractList 中的 removeRange 方法：</p><pre><code>protected void removeRange(int fromIndex, int toIndex)Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex == fromIndex, this operation has no effect.)This method is called by the clear operation on this list and its sublists. Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the clear operation on this list and its sublists.Implementation Requirements: This implementation gets a list iterator positioned before fromIndex and repeatedly calls ListIterator.nextfollowed by ListIterator.remove, until the entire range has been removed. Note: If ListIterator.remove requires linear time, this implementation requires quadratic time.Parameters:    fromIndex    index of first element to be removed.    toIndex      index after last element to be removed.</code></pre><p>　　从此列表中删除索引介于 fromIndex（包含）和 inclusive（不含）之间的所有元素。 将任何后续元素向左移（减少索引）。 这个调用通过（toIndex - fromIndex）元素来缩短列表。 （如果 toIndex == fromIndex，则此操作无效。）</p><p>　　这个方法是通过列表及其子类的 clear 操作来调用的。重写这个方法利用列表内部实现的优势，可以大大提高列表和子类的 clear 操作性能。</p><p>　　实现要求： 这个实现获取一个列表迭代器，它位于 fromIndex 之前，并重复调用 ListIterator.remove 和 ListIterator.next 方法，直到整个范围被删除。 注意：如果 ListIterator.remove 需要线性时间，则此实现需要平方级时间。</p><p>参数：<br>　　fromIndex 要移除的第一个元素的索引<br>　　toIndex 要移除的最后一个元素之后的索引</p><p>　　这个方法对 List 实现的最终用户来说是没有意义的。 它仅仅是为了使子类很容易提供一个快速 clear 方法。 在没有 removeRange 方法的情况下，当在子列表上调用 clear 方法，子类将不得不使用平方级的时间，否则，或从头重写整个 subList 机制——这不是一件容易的事情！</p><p>　　那么当你设计一个继承类的时候，你如何决定暴露哪些的受保护的成员呢？ 不幸的是，没有灵丹妙药。 所能做的最好的就是努力思考，做出最好的测试，然后通过编写子类来进行测试。 应该尽可能少地暴露受保护的成员，因为每个成员都表示对实现细节的承诺。 另一方面，你不能暴露太少，因为失去了保护的成员会导致一个类几乎不能用于继承。</p><p>　　<strong><em>测试为继承而设计的类的唯一方法是编写子类</em></strong>。 如果你忽略了一个关键的受保护的成员，试图编写一个子类将会使得遗漏痛苦地变得明显。 相反，如果编写的几个子类，而且没有一个使用受保护的成员，那么应该将其设为私有。 经验表明，三个子类通常足以测试一个可继承的类。 这些子类应该由父类作者以外的人编写。</p><p>　　当你为继承设计一个可能被广泛使用的类的时候，要意识到你永远承诺你文档说明的自用模式以及隐含在其保护的方法和属性中的实现决定。 这些承诺可能会使后续版本中改善类的性能或功能变得困难或不可能。 因此， 在发布它之前，你必须通过编写子类来测试你的类。</p><p>　　另外，请注意，继承所需的特殊文档混乱了正常的文档，这是为创建类的实例并在其上调用方法的程序员设计的。 在撰写本文时，几乎没有工具将普通的 API 文档从和仅仅针对子类实现的信息，分离出来。</p><p>　　还有一些类必须遵守允许继承的限制。 <strong><em>构造方法绝不能直接或间接调用可重写的方法</em></strong>。 如果违反这个规则，将导致程序失败。 父类构造方法在子类构造方法之前运行，所以在子类构造方法运行之前，子类中的重写方法被调用。 如果重写方法依赖于子类构造方法执行的任何初始化，则此方法将不会按预期运行。 为了具体说明，这是一个违反这个规则的类：</p><pre><code>public class Super {    // Broken - constructor invokes an overridable method    public Super() {        overrideMe();    }    public void overrideMe() {    }}</code></pre><p>以下是一个重写 overrideMe 方法的子类，Super 类的唯一构造方法会错误地调用它：</p><pre><code>public final class Sub extends Super {    // Blank final, set by constructor    private final Instant instant;    Sub() {        instant = Instant.now();    }    // Overriding method invoked by superclass constructor    @Override    public void overrideMe() {        System.out.println(instant);    }    public static void main(String[] args) {        Sub sub = new Sub();        sub.overrideMe();    }}</code></pre><p>　　你可能期望这个程序打印两次 instant 实例，但是它第一次打印出 null，因为在 Sub 构造方法有机会初始化 instant 属性之前，overrideMe 被 Super 构造方法调用。 请注意，这个程序观察两个不同状态的 final 属性！ 还要注意的是，如果 overrideMe 方法调用了 instant 实例中任何方法，那么当父类构造方法调用 overrideMe 时，它将抛出一个 NullPointerException 异常。 这个程序不会抛出 NullPointerException 的唯一原因是 println 方法容忍 null 参数。</p><p>　　请注意，从构造方法中调用私有方法，其中任何一个方法都不可重写的，那么 final 方法和静态方法是安全的。</p><p>　　Cloneable 和 Serializable 接口在设计继承时会带来特殊的困难。 对于为继承而设计的类来说，实现这些接口通常不是一个好主意，因为这会给继承类的程序员带来很大的负担。 然而，可以采取特殊的行动来允许子类实现这些接口，而不需要强制这样做。 这些操作在条目 13 和条目 86 中有描述。</p><p>　　如果你决定在为继承而设计的类中实现 Cloneable 或 Serializable 接口，那么应该知道，由于 clone 和 readObject 方法与构造方法相似，所以也有类似的限制： clone 和 readObject <strong><em>都不会直接或间接调用可重写的方法</em></strong>。 在 readObject 的情况下，重写方法将在子类的状态被反序列化之前运行。 在 clone 的情况下，重写方法将在子类的 clone 方法有机会修复克隆的状态之前运行。 在任何一种情况下，都可能会出现程序故障。 在 clone 的情况下，故障可能会损坏原始对象以及被克隆对象本身。 例如，如果重写方法假定它正在修改对象的深层结构的拷贝，但是尚未创建拷贝，则可能发生这种情况。</p><p>　　最后，如果你决定在为继承设计的类中实现 Serializable 接口，并且该类有一个 readResolve 或 writeReplace 方法，则必须使 readResolve 或 writeReplace 方法设置为受保护而不是私有。 如果这些方法是私有的，它们将被子类无声地忽略。 这是另一种情况，把实现细节成为类的 API 的一部分，以允许继承。</p><p>　　到目前为止，<strong><em>设计一个继承类需要很大的努力，并且对这个类有很大的限制。</em></strong> 这不是一个轻率的决定。 有些情况显然是正确的，比如抽象类，包括接口的骨架实现（skeletal implementations）（详见第 20 条）。 还有其他的情况显然是错误的，比如不可变的类（详见第 17 条）。</p><p>　　但是普通的具体类呢？ 传统上，它们既不是 final 的，也不是为了子类化而设计和文档说明的，但是这种情况是危险的。每次修改这样的类，则继承此类的子类将被破坏。 这不仅仅是一个理论问题。 在修改非 final 的具体类的内部之后，接收与子类相关的错误报告并不少见，这些类没有为继承而设计和文档说明。</p><p>　　<strong><em>解决这个问题的最好办法是，在没有想要安全地子类化的设计和文档说明的类中禁止子类化。</em></strong> 有两种方法禁止子类化。 两者中较容易的是声明类为 final。 另一种方法是使所有的构造方法都是私有的或包级私有的，并且添加公共静态工厂来代替构造方法。 这个方案在内部提供了使用子类的灵活性，在条目 17 中讨论过。两种方法都是可以接受的。</p><p>　　这个建议可能有些争议，因为许多程序员已经习惯于继承普通的具体类来增加功能，例如通知和同步等功能，或限制原有类的功能。 如果一个类实现了捕获其本质的一些接口，比如 Set，List 或 Map，那么不应该为了禁止子类化而感到愧疚。 在条目 18 中描述的包装类模式为增强功能提供了继承的优越选择。</p><p>　　如果一个具体的类没有实现一个标准的接口，那么你可能会通过禁止继承来给一些程序员带来不便。 如果你觉得你必须允许从这样的类继承，一个合理的方法是确保类从不调用任何可重写的方法，并文档说明这个事实。 换句话说，完全消除类的自用（self-use）的可重写的方法。 这样做，你将创建一个合理安全的子类。 重写一个方法不会影响任何其他方法的行为。</p><p>　　你可以机械地消除类的自我使用的重写方法，而不会改变其行为。 将每个可重写的方法的主体移动到一个私有的“帮助器方法”，并让每个可重写的方法调用其私有的帮助器方法。 然后用直接调用可重写方法的专用帮助器方法来替换每个自用的可重写方法。</p><p>　　简而言之，专门为了继承而设计类是一件很辛苦的工作。你必须建立文档说明其所有的自用模式，并且一旦建立了文档，在这个类的整个生命周期中都必须遵守。如果没有做到，子类就会依赖父类的实现细节，如果父类的实现发生了变化，它就有可能遭到破坏。为了允许其他人能编写出高效的子类，还你必须导出一个或者多个受保护的方法。<strong><em>除非知道真正需要子类，否则最好通过将类声明为 final，或者确保没有可访问的构造器来禁止类被继承。</em></strong></p><h1 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h1><p>　　Java 有两种机制来定义允许多个实现的类型：接口和抽象类。 由于在 Java 8 [JLS 9.4.3] 中引入了接口的默认方法（default methods ），因此这两种机制都允许为某些实例方法提供实现。 一个主要的区别是要实现由抽象类定义的类型，类必须是抽象类的子类。 因为 Java 只允许单一继承，所以对抽象类的这种限制严格限制了它们作为类型定义的使用。 任何定义所有必需方法并服从通用约定的类都可以实现一个接口，而不管类在类层次结构中的位置。</p><p>　　现有的类可以很容易地进行改进来实现一个新的接口。 你只需添加所需的方法（如果尚不存在的话），并向类声明中添加一个 implements 子句。 例如，当 Comparable, Iterable， 和 Autocloseable 接口添加到 Java 平台时，很多现有类需要实现它们来加以改进。 一般来说，现有的类不能改进以继承一个新的抽象类。 如果你想让两个类继承相同的抽象类，你必须把它放在类型层级结构中的上面位置，它是两个类的祖先。 不幸的是，这会对类型层级结构造成很大的附带损害，迫使新的抽象类的所有后代对它进行子类化，无论这些后代类是否合适。</p><p>　　接口是定义混合类型（mixin）的理想选择。 一般来说，mixin 是一个类，除了它的“主类型”之外，还可以声明它提供了一些可选的行为。 例如，Comparable 是一个类型接口，它允许一个类声明它的实例相对于其他可相互比较的对象是有序的。 这样的接口被称为类型，因为它允许可选功能被“混合”到类型的主要功能。 抽象类不能用于定义混合类，这是因为它们不能被加载到现有的类中：一个类不能有多个父类，并且在类层次结构中没有合理的位置来插入一个类型。</p><p>　　接口允许构建非层级类型的框架。 类型层级对于组织某些事物来说是很好的，但是其他的事物并不是整齐地落入严格的层级结构中。 例如，假设我们有一个代表歌手的接口，和另一个代表作曲家的接口：</p><pre><code>public interface Singer {    AudioClip sing(Song s);}public interface Songwriter {    Song compose(int chartPosition);}</code></pre><p>　　在现实生活中，一些歌手也是作曲家。 因为我们使用接口而不是抽象类来定义这些类型，所以单个类实现歌手和作曲家两个接口是完全允许的。 事实上，我们可以定义一个继承歌手和作曲家的第三个接口，并添加适合于这个组合的新方法：</p><pre><code>public interface SingerSongwriter extends Singer, Songwriter {    AudioClip strum();    void actSensitive();}</code></pre><p>　　你并不总是需要这种灵活性，但是当你这样做的时候，接口是一个救星。 另一种方法是对于每个受支持的属性组合，包含一个单独的类的臃肿类层级结构。 如果类型系统中有 n 个属性，则可能需要支持 2n 种可能的组合。 这就是所谓的组合爆炸（combinatorial explosion）。 臃肿的类层级结构可能会导致具有许多方法的臃肿类，这些方法仅在参数类型上有所不同，因为类层级结构中没有类型来捕获通用行为。</p><p>　　接口通过包装类模式确保安全的，强大的功能增强成为可能（详见第 18 条）。 如果使用抽象类来定义类型，那么就让程序员想要添加功能，只能继承。 生成的类比包装类更弱，更脆弱。</p><p>　　当其他接口方法有明显的接口方法实现时，可以考虑向程序员提供默认形式的方法实现帮助。 有关此技术的示例，请参阅第 104 页的 removeIf 方法。如果提供默认方法，请确保使用@implSpec Javadoc 标记（条目 19）将它们文档说明为继承。</p><p>　　使用默认方法可以提供实现帮助多多少少是有些限制的。 尽管许多接口指定了 Object 类中方法（如 equals 和 hashCode）的行为，但不允许为它们提供默认方法。 此外，接口不允许包含实例属性或非公共静态成员（私有静态方法除外）。 最后，不能将默认方法添加到不受控制的接口中。</p><p>　　但是，你可以通过提供一个抽象的骨架实现类（abstract skeletal implementation class）来与接口一起使用，将接口和抽象类的优点结合起来。 接口定义了类型，可能提供了一些默认的方法，而骨架实现类在原始接口方法的顶层实现了剩余的非原始接口方法。 继承骨架实现需要大部分的工作来实现一个接口。 这就是模板方法设计模式[Gamma95]。</p><p>　　按照惯例，骨架实现类被称为 AbstractInterface，其中 Interface 是它们实现的接口的名称。 例如，集合框架（ Collections Framework）提供了一个框架实现以配合每个主要集合接口：AbstractCollection，AbstractSet，AbstractList 和 AbstractMap。 可以说，将它们称为 SkeletalCollection，SkeletalSet，SkeletalList 和 SkeletalMap 是有道理的，但是现在已经确立了抽象约定。 如果设计得当，骨架实现（无论是单独的抽象类还是仅由接口上的默认方法组成）可以使程序员非常容易地提供他们自己的接口实现。 例如，下面是一个静态工厂方法，在 AbstractList 的顶层包含一个完整的功能齐全的 List 实现：</p><pre><code>// Concrete implementation built atop skeletal implementationstatic List&lt;Integer&gt; intArrayAsList(int[] a) {    Objects.requireNonNull(a);    // The diamond operator is only legal here in Java 9 and later    // If you&apos;re using an earlier release, specify &lt;Integer&gt;    return new AbstractList&lt;&gt;() {        @Override        public Integer get(int i) {            return a[i];  // Autoboxing ([Item 6](https://www.safaribooksonline.com/library/view/effective-java-third/9780134686097/ch2.xhtml#lev6))        }        @Override        public Integer set(int i, Integer val) {            int oldVal = a[i];            a[i] = val;     // Auto-unboxing            return oldVal;  // Autoboxing        }        @Override        public int size() {            return a.length;        }    };}</code></pre><p>　　当你考虑一个 List 实现为你做的所有事情时，这个例子是一个骨架实现的强大的演示。 顺便说一句，这个例子是一个适配器（Adapter）[Gamma95]，它允许一个 int 数组被看作 Integer 实例列表。 由于 int 值和整数实例（装箱和拆箱）之间的来回转换，其性能并不是非常好。 请注意，实现采用匿名类的形式（详见第 24 条）。</p><p>　　骨架实现类的优点在于，它们提供抽象类的所有实现的帮助，而不会强加抽象类作为类型定义时的严格约束。对于具有骨架实现类的接口的大多数实现者来说，继承这个类是显而易见的选择，但它不是必需的。如果一个类不能继承骨架的实现，这个类可以直接实现接口。该类仍然受益于接口本身的任何默认方法。此外，骨架实现类仍然可以协助接口的实现。实现接口的类可以将接口方法的调用转发给继承骨架实现的私有内部类的包含实例。这种被称为模拟多重继承的技术与条目 18 讨论的包装类模式密切相关。它提供了多重继承的许多好处，同时避免了缺陷。</p><p>　　编写一个骨架的实现是一个相对简单的过程，虽然有些乏味。 首先，研究接口，并确定哪些方法是基本的，其他方法可以根据它们来实现。 这些基本方法是你的骨架实现类中的抽象方法。 接下来，为所有可以直接在基本方法之上实现的方法提供接口中的默认方法，回想一下，你可能不会为诸如 Object 类中 equals 和 hashCode 等方法提供默认方法。 如果基本方法和默认方法涵盖了接口，那么就完成了，并且不需要骨架实现类。 否则，编写一个声明实现接口的类，并实现所有剩下的接口方法。 为了适合于该任务，此类可能包含任何的非公共属性和方法。</p><p>　　作为一个简单的例子，考虑一下 Map.Entry 接口。 显而易见的基本方法是 getKey，getValue 和（可选的）setValue。 接口指定了 equals 和 hashCode 的行为，并且在基本方面方面有一个 toString 的明显的实现。 由于不允许为 Object 类方法提供默认实现，因此所有实现均放置在骨架实现类中：</p><pre><code>// Skeletal implementation classpublic abstract class AbstractMapEntry&lt;K,V&gt;        implements Map.Entry&lt;K,V&gt; {    // Entries in a modifiable map must override this method    @Override public V setValue(V value) {        throw new UnsupportedOperationException();    }    // Implements the general contract of Map.Entry.equals    @Override    public boolean equals(Object o) {        if (o == this)            return true;        if (!(o instanceof Map.Entry))            return false;        Map.Entry&lt;?,?&gt; e = (Map.Entry) o;        return Objects.equals(e.getKey(),  getKey())            &amp;&amp; Objects.equals(e.getValue(), getValue());    }    // Implements the general contract of Map.Entry.hashCode    @Override    public int hashCode() {        return Objects.hashCode(getKey())             ^ Objects.hashCode(getValue());    }    @Override    public String toString() {        return getKey() + &quot;=&quot; + getValue();    }}</code></pre><p>　　请注意，这个骨架实现不能在 Map.Entry 接口中实现，也不能作为子接口实现，因为默认方法不允许重写诸如 equals，hashCode 和 toString 等 Object 类方法。</p><p>　　由于骨架实现类是为了继承而设计的，所以你应该遵循条目 19 中的所有设计和文档说明。为了简洁起见，前面的例子中省略了文档注释，但是好的文档在骨架实现中是绝对必要的，无论它是否包含 一个接口或一个单独的抽象类的默认方法。</p><p>　　与骨架实现有稍许不同的是简单实现，以 AbstractMap.SimpleEntry 为例。 一个简单的实现就像一个骨架实现，它实现了一个接口，并且是为了继承而设计的，但是它的不同之处在于它不是抽象的：它是最简单的工作实现。 你可以按照情况使用它，也可以根据情况进行子类化。</p><p>　　总而言之，一个接口通常是定义允许多个实现的类型的最佳方式。 如果你导出一个重要的接口，应该强烈考虑提供一个骨架的实现类。 在可能的情况下，应该通过接口上的默认方法提供骨架实现，以便接口的所有实现者都可以使用它。 也就是说，对接口的限制通常要求骨架实现类采用抽象类的形式。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/19.%20%E8%A6%81%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%BB%A7%E6%89%BF%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E%EF%BC%8C%E8%A6%81%E4%B9%88%E7%A6%81%E7%94%A8%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/19.%20%E8%A6%81%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%BB%A7%E6%89%BF%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E%EF%BC%8C%E8%A6%81%E4%B9%88%E7%A6%81%E7%94%A8%E7%BB%A7%E6%89%BF</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章阅读：类和接口&lt;/p&gt;
&lt;p&gt;19.要么设计继承并提供文档说明，要么禁用继承&lt;br&gt;除非知道真正需要子类，否则最好通过将类声明为 final，或者确保没有可访问的构造器来禁止类被继承。&lt;br&gt;20.接口优于抽象类&lt;br&gt;一个接口通常是定义允许多个实现的类型的最佳方式。 如果导出一个重要的接口，应该强烈考虑提供一个骨架的实现类。在可能的情况下，应该通过接口上的默认方法提供骨架实现，以便接口的所有实现者都可以使用它。即对接口的限制通常要求骨架实现类采用抽象类的形式。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记IX</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0IX/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记IX/</id>
    <published>2020-01-16T03:28:12.000Z</published>
    <updated>2020-01-17T01:50:19.121Z</updated>
    
    <content type="html"><![CDATA[<p>第四章阅读：类和接口</p><p>17.最小化可变性<br>18.组合优于继承<br>灵魂三问：<br>　如果你试图让 B 类继承 A 类时，问自己这个问题：每个 B 都是 A 吗？ 如果你不能如实回答这个问题，那么 B 就不应该继承 A。在决定使用继承来代替组合之前，你应该问自己最后一组问题。对于试图继承的类，它的 API 有没有缺陷呢？ 如果有，你是否愿意将这些缺陷传播到你的类的 API 中？继承传播父类的 API 中的任何缺陷，而组合可以让你设计一个隐藏这些缺陷的新 API。</p><a id="more"></a><h1 id="最小化可变性"><a href="#最小化可变性" class="headerlink" title="最小化可变性"></a>最小化可变性</h1><p>　　不可变类简单来说是其实例不能被修改的类。 包含在每个实例中的所有信息在对象的生命周期中是固定的，因此不会观察到任何变化。 Java 平台类库包含许多不可变的类，包括 String 类、基本类型包装类以及 BigInteger 类和 BigDecimal 类。 有很多很好的理由：不可变类比可变类更易于设计，实现和使用。 他们不容易出错，并且更安全。</p><p>　　要使一个类成为不可变类，请遵循以下五条规则：</p><h2 id="不要提供修改对象状态的方法（也称为-mutators，设值方法）。"><a href="#不要提供修改对象状态的方法（也称为-mutators，设值方法）。" class="headerlink" title="不要提供修改对象状态的方法（也称为 mutators，设值方法）。"></a>不要提供修改对象状态的方法（也称为 mutators，设值方法）。</h2><h2 id="确保这个类不能被继承。"><a href="#确保这个类不能被继承。" class="headerlink" title="确保这个类不能被继承。"></a>确保这个类不能被继承。</h2><p>这可以防止粗心或者恶意的子类假装对象的状态已经改变，从而破坏类的不可变行为。 防止子类化，通常是通过 final 修饰类，但是我们稍后将讨论另一种方法。<br>##把所有字段设置为 final。<br>通过系统强制执行的方式，清楚地表达了你的意图。 另外，如果一个新创建的实例的引用在缺乏同步机制的情况下从一个线程传递到另一个线程，就必须保证正确的行为，正如内存模型[JLS，17.5; Goetz06 16] 所述。</p><h2 id="把所有的字段设置为-private。"><a href="#把所有的字段设置为-private。" class="headerlink" title="把所有的字段设置为 private。"></a>把所有的字段设置为 private。</h2><p>这可以防止客户端获得对字段引用的可变对象的访问权限，并直接修改这些对象。 虽然技术上允许不可变类具有包含基本类型数值的公有的 final 字段或对不可变对象的引用，但不建议这样做，因为这样使得在以后的版本中无法再改变内部的表示状态（详见第 15 和 16 条）。</p><h2 id="确保对任何可变组件的互斥访问。"><a href="#确保对任何可变组件的互斥访问。" class="headerlink" title="确保对任何可变组件的互斥访问。"></a>确保对任何可变组件的互斥访问。</h2><p>如果你的类有任何引用可变对象的字段，请确保该类的客户端无法获得对这些对象的引用。 切勿将这样的属性初始化为客户端提供的对象引用，或从访问方法返回属性。 在构造方法，访问方法和 readObject 方法（详见第 88 条）中进行防御性拷贝（详见第 50 条）。<br>　　以前条目中的许多示例类都是不可变的。 其中一个例子是条目 11 中的 PhoneNumber 类，它具有每个字段的访问方法（accessors），但没有相应的设值方法（mutators）。下面一个稍微复杂一点的例子：</p><pre><code>// Immutable complex number classpublic final class Complex {    private final double re;    private final double im;    public Complex(double re, double im) {        this.re = re;        this.im = im;    }    public double realPart() {        return re;    }    public double imaginaryPart() {        return im;    }    public Complex plus(Complex c) {        return new Complex(re + c.re, im + c.im);    }    public Complex minus(Complex c) {        return new Complex(re - c.re, im - c.im);    }    public Complex times(Complex c) {        return new Complex(re * c.re - im * c.im,                re * c.im + im * c.re);    }    public Complex dividedBy(Complex c) {        double tmp = c.re * c.re + c.im * c.im;        return new Complex((re * c.re + im * c.im) / tmp,                (im * c.re - re * c.im) / tmp);    }    @Override    public boolean equals(Object o) {        if (o == this) {            return true;        }        if (!(o instanceof Complex)) {            return false;        }        Complex c = (Complex) o;        // See page 47 to find out why we use compare instead of ==        return Double.compare(c.re, re) == 0                &amp;&amp; Double.compare(c.im, im) == 0;    }    @Override    public int hashCode() {        return 31 * Double.hashCode(re) + Double.hashCode(im);    }    @Override    public String toString() {        return &quot;(&quot; + re + &quot; + &quot; + im + &quot;i)&quot;;    }}</code></pre><p>　　这个类代表了一个复数（包含实部和虚部的数字）。 除了标准的 Object 方法之外，它还为实部和虚部提供访问方法，并提供四个基本的算术运算：加法，减法，乘法和除法。 注意算术运算如何创建并返回一个新的 Complex 实例，而不是修改这个实例。 这种模式被称为函数式方法，因为方法返回将操作数应用于函数的结果，而不修改它们。 与其对应的过程式的（procedural）或命令式的（imperative）的方法相对比，在这种方法中，将一个过程作用在操作数上，导致其状态改变。 请注意，方法名称是介词（如 plus）而不是动词（如 add）。 这强调了方法不会改变对象的值的事实。 BigInteger 和 BigDecimal 类没有遵守这个命名约定，并导致许多使用错误。</p><p>　　如果你不熟悉函数式方法，可能会觉得它显得不自然，但它具有不变性，具有许多优点。 不可变对象很简单。 一个不可变的对象可以完全处于一种状态，也就是被创建时的状态。 如果确保所有的构造方法都建立了类不变量，那么就保证这些不变量在任何时候都保持不变，使用此类的程序员无需再做额外的工作。 另一方面，可变对象可以具有任意复杂的状态空间。 如果文档没有提供由设置（mutator）方法执行的状态转换的精确描述，那么可靠地使用可变类可能是困难的或不可能的。</p><p>　　<strong><em>不可变对象本质上是线程安全的；它们不需要同步</em></strong> 。 被多个线程同时访问它们时，不会遭到破坏。 这是实现线程安全的最简单方法。 由于没有线程可以观察到另一个线程对不可变对象的影响，所以 <strong><em>不可变对象可以被自由地共享</em></strong> 。 因此，不可变类应鼓励客户端尽可能重用现有的实例。 一个简单的方法是为常用的值提供公共的静态 final 常量。 例如，Complex 类可能提供这些常量：</p><pre><code>public static final Complex ZERO = new Complex(0, 0);public static final Complex ONE  = new Complex(1, 0);public static final Complex I    = new Complex(0, 1);</code></pre><p>　　这种方法可以更进一步。 一个不可变的类可以提供静态的工厂（详见第 1 条）来缓存经常被请求的实例，以避免在现有的实例中创建新的实例。 所有基本类型的包装类和 BigInteger 类都是这样做的。 使用这样的静态工厂会使客户端共享实例而不是创建新实例，从而减少内存占用和垃圾回收成本。 在设计新类时，选择静态工厂代替公共构造方法，可以在以后增加缓存的灵活性，而不需要修改客户端。</p><p>　　不可变对象可以自由分享的结果是，你永远不需要做出防御性拷贝（defensive copies）（详见第 50 条）。 事实上，永远不需要做任何拷贝，因为这些拷贝永远等于原始对象。 因此，你不需要也不应该在一个不可变的类上提供一个 clone 方法或拷贝构造方法（copy constructor）（详见第 13 条）。 这一点在 Java 平台的早期阶段还不是很好理解，所以 String 类有一个拷贝构造方法，但是它应该尽量很少使用（详见第 6 条）。</p><p>　　<strong><em>不仅可以共享不可变的对象，而且可以共享内部信息</em></strong> 。 例如，BigInteger 类在内部使用符号数值表示法。 符号用 int 值表示，数值用 int 数组表示。 negate 方法生成了一个数值相同但符号相反的新 BigInteger 实例。 即使它是可变的，也不需要复制数组；新创建的 BigInteger 指向与原始相同的内部数组。</p><p>　　<strong><em>不可变对象为其他对象提供了很好的构件（building blocks）</em></strong>，无论是可变的还是不可变的。 如果知道一个复杂组件的内部对象不会发生改变，那么维护复杂对象的不变量就容易多了。这一原则的特例是，不可变对象可以构成 Map 对象的键和 Set 的元素，一旦不可变对象作为 Map 的键或 Set 里的元素，即使破坏了 Map 和 Set 的不可变性，但不用担心它们的值会发生变化。</p><p>　　<strong><em>不可变对象无偿地提供了的原子失败机制（详见第 76 条）</em></strong>。 它们的状态永远不会改变，所以不可能出现临时的不一致。</p><p>　　<strong><em>不可变类的主要缺点是对于每个不同的值都需要一个单独的对象</em></strong>。 创建这些对象可能代价很高，特别是是大型的对象下。 例如，假设你有一个百万位的 BigInteger ，你想改变它的低位：</p><pre><code>BigInteger moby = ...;moby = moby.flipBit(0);</code></pre><p>　　flipBit 方法创建一个新的 BigInteger 实例，也是一百万位长，与原始位置只有一位不同。 该操作需要与 BigInteger 大小成比例的时间和空间。 将其与 java.util.BitSet 对比。 像 BigInteger 一样，BitSet 表示一个任意长度的位序列，但与 BigInteger 不同，BitSet 是可变的。 BitSet 类提供了一种方法，允许你在固定时间内更改百万位实例中单个位的状态：</p><pre><code>BitSet moby = ...;moby.flip(0);</code></pre><p>　　如果执行一个多步操作，在每一步生成一个新对象，除最终结果之外丢弃所有对象，则性能问题会被放大。这里有两种方式来处理这个问题。第一种办法，先猜测一下会经常用到哪些多步的操作，然后讲它们作为基本类型提供。如果一个多步操作是作为一个基本类型提供的，那么不可变类就不必在每一步创建一个独立的对象。在内部，不可变的类可以是任意灵活的。 例如，BigInteger 有一个包级私有的可变的“伙伴类（companion class）”，它用来加速多步操作，比如模幂运算（modular exponentiation）。出于前面所述的所有原因，使用可变伙伴类比使用 BigInteger 要困难得多。 幸运的是，你不必使用它：BigInteger 类的实现者为你做了很多努力。</p><p>　　如果你可以准确预测客户端要在你的不可变类上执行哪些复杂的操作，那么包级私有可变伙伴类的方式可以正常工作。如果不是的话，那么最好的办法就是提供一个公开的可变伙伴类。 这种方法在 Java 平台类库中的主要例子是 String 类，它的可变伙伴类是 StringBuilder（及其过时的前身 StringBuffer 类）。</p><p>　　现在你已经知道如何创建一个不可改变类，并且了解不变性的优点和缺点，下面我们来讨论几个设计方案。 回想一下，为了保证不变性，一个类不得允许子类化。 这可以通过使类用 final 修饰，但是还有另外一个更灵活的选择。 而不是使不可变类设置为 final，<strong><em>可以使其所有的构造方法私有或包级私有，并添加公共静态工厂，而不是公共构造方法</em></strong>（详见第 1 条）。 为了具体说明这种方法，下面以 Complex 为例，看看如何使用这种方法：</p><pre><code>// Immutable class with static factories instead of constructorspublic class Complex {    private final double re;    private final double im;    private Complex(double re, double im) {        this.re = re;        this.im = im;    }    public static Complex valueOf(double re, double im) {        return new Complex(re, im);    }    ... // Remainder unchanged}</code></pre><p>　　这种方法往往是最好的选择。 这是最灵活的，因为它允许使用多个包级私有实现类。 对于驻留在包之外的客户端，不可变类实际上是 final 的，因为不可能继承来自另一个包的类，并且缺少公共或受保护的构造方法。 除了允许多个实现类的灵活性以外，这种方法还可以通过改进静态工厂的对象缓存功能来调整后续版本中类的性能。<br>　　当 BigInteger 和 BigDecimal 刚被编写出来的时候，“不可变类必须是 final”的说法还没有得到广泛地理解，因此它们的所有方法都可能被重写。不幸的是，为了保持向后兼容性，这一问题无法得以纠正。如果你编写一个安全性取决于来自不受信任的客户端的 BigInteger 或 BigDecimal 参数的不变类时，则必须检查该参数是否为“真实的”BigInteger 或者 BigDecimal，而不应该是不受信任的子类的实例。如果是后者，则必须在假设可能是可变的情况下保护性拷贝（defensively copy）（详见第 50 条）：</p><pre><code>public static BigInteger safeInstance(BigInteger val) {    return val.getClass() == BigInteger.class ?            val : new BigInteger(val.toByteArray());}</code></pre><p>　　在本条目开头关于不可变类的规则说明，没有方法可以修改对象，并且它的所有属性必须是 final 的。事实上，这些规则比实际需要的要强硬一些，其实可以有所放松来提高性能。 事实上，任何方法都不能在对象的状态中产生外部可见的变化。 然而，一些不可变类具有一个或多个非 final 属性，在第一次需要时将开销昂贵的计算结果缓存在这些属性中。 如果再次请求相同的值，则返回缓存的值，从而节省了重新计算的成本。 这个技巧的作用恰恰是因为对象是不可变的，这保证了如果重复的话，计算会得到相同的结果。</p><p>　　例如，PhoneNumber 类的 hashCode 方法（详见第 11 条）在第一次调用改方法时计算哈希码，并在再次调用时 对其进行缓存。 这种延迟初始化（详见第 83 条）的一个例子，String 类也使用到了。</p><p>　　关于序列化应该加上一个警告。 如果你选择使您的不可变类实现 Serializable 接口，并且它包含一个或多个引用可变对象的属性，则必须提供显式的 readObject 或 readResolve 方法，或者使用 ObjectOutputStream.writeUnshared 和 ObjectInputStream.readUnshared 方法，即默认的序列化形式也是可以接受的。 否则攻击者可能会创建一个可变的类的实例。 这个主题会在条目 88 中会详细介绍。</p><p>　　总而言之，坚决不要为每个属性编写一个 get 方法后再编写一个对应的 set 方法。<strong><em>除非有充分的理由使类成为可变类，否则类应该是不可变的</em></strong>。 不可变类提供了许多优点，唯一的缺点是在某些情况下可能会出现性能问题。 你应该始终使用较小的值对象（如 PhoneNumber 和 Complex），使其不可变。（Java 平台类库中有几个类，如 java.util.Date 和 java.awt.Point，本应该是不可变的，但实际上并不是）。你应该认真考虑创建更大的值对象，例如 String 和 BigInteger ，设成不可改变的。 只有当你确认有必要实现令人满意的性能（详见第 67 条）时，才应该为不可改变类提供一个公开的可变伙伴类。</p><p>　　对于一些类来说，不变性是不切实际的。<strong><em>如果一个类不能设计为不可变类，那么也要尽可能地限制它的可变性</em></strong> 。减少对象可以存在的状态数量，可以更容易地分析对象，以及降低出错的可能性。因此，除非有足够的理由把属性设置为非 final 的情况下，否则应该每个属性都设置为 final 的。把本条目的建议与条目 15 的建议结合起来，你自然的倾向就是：<strong><em>除非有充分的理由不这样做，否则应该把每个属性声明为私有 final 的</em></strong>。</p><p>　　<strong><em>构造方法应该创建完全初始化的对象，并建立所有的不变性。</em></strong> 除非有令人信服的理由，否则不要提供独立于构造方法或静态工厂的公共初始化方法。 同样，不要提供一个“reinitialize”方法，使对象可以被重用，就好像它是用不同的初始状态构建的。 这样的方法通常以增加的复杂度为代价，仅仅提供很少的性能优势。</p><p>　　CountDownLatch 类是这些原理的例证。 它是可变的，但它的状态空间有意保持最小范围内。 创建一个实例，使用它一次，并完成：一旦 countdown 锁的计数器已经达到零，不能再重用它。</p><p>　　在这个条目中，应该添加关于 Complex 类的最后一个注释。 这个例子只是为了说明不变性。 这不是一个工业强度复杂的复数实现。 它对复数使用了乘法和除法的标准公式，这些公式不正确会进行不正确的四舍五入，没有为复数的 NaN 和无穷大提供良好的语义[Kahan91，Smith62，Thomas94]。</p><h1 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h1><p>　　继承是实现代码重用的有效方式，但并不总是最好的工具。使用不当，会导致脆弱的软件。 在包中使用继承是安全的，其中子类和父类的实现都在同一个程序员的控制之下。对应专门为了继承而设计的，并且有文档说明的类来说（详见第 19 条），使用继承也是安全的。 然而，从普通的具体类跨越包级边界继承，是危险的。 提醒一下，本书使用「继承」一词，其含义是实现继承（当一个类扩展另一个类时）。 在本条目中讨论的问题不适用于接口继承（当类实现接口，或者当接口继承另一个接口时）。</p><p>　　<strong><em>与方法调用不同，继承打破了封装[Snyder86]</em></strong>。 换句话说，一个子类依赖于其父类的实现细节来保证其正确的功能。 父类的实现可能会从发布版本不断变化，如果是这样，子类可能会被破坏，即使它的代码没有任何改变。 因此，一个子类必须与其超类一起更新而变化，除非父类的作者为了继承的目的而专门设计它，并对应有文档的说明。</p><p>　　为了具体说明，假设有一个使用 HashSet 的程序。 为了调整程序的性能，需要查询 HashSet ，从创建它之后已经添加了多少个元素（不要和当前的元素数量混淆，当元素被删除时数量也会下降）。 为了提供这个功能，编写了一个 HashSet 变体，它保留了尝试元素插入的数量，并导出了这个插入数量的一个访问方法。 HashSet 类包含两个添加元素的方法，分别是 add 和 addAll，所以我们重写这两个方法：</p><pre><code>// Broken - Inappropriate use of inheritance!public class InstrumentedHashSet&lt;E&gt; extends HashSet&lt;E&gt; {    // The number of attempted element insertions    private int addCount = 0;    public InstrumentedHashSet() {    }    public InstrumentedHashSet(int initCap, float loadFactor) {        super(initCap, loadFactor);    }    @Override public boolean add(E e) {        addCount++;        return super.add(e);    }    @Override public boolean addAll(Collection&lt;? extends E&gt; c) {        addCount += c.size();        return super.addAll(c);    }    public int getAddCount() {        return addCount;    }}</code></pre><p>这个类看起来很合理，但是不能正常工作。 假设创建一个实例并使用 addAll 方法添加三个元素。 顺便提一句，请注意，下面代码使用在 Java 9 中添加的静态工厂方法 List.of 来创建一个列表；如果使用的是早期版本，请改为使用 Arrays.asList：</p><pre><code>InstrumentedHashSet&lt;String&gt; s = new InstrumentedHashSet&lt;&gt;();s.addAll(List.of(&quot;Snap&quot;, &quot;Crackle&quot;, &quot;Pop&quot;));</code></pre><p>　　我们期望 getAddCount 方法返回的结果是 3，但实际上返回了 6。哪里出来问题？在 HashSet 内部，addAll 方法是基于它的 add 方法来实现的，即使 HashSet 文档中没有指名其实现细节，倒也是合理的。InstrumentedHashSet 中的 addAll 方法首先给 addCount 属性设置为 3，然后使用 super.addAll 方法调用了 HashSet 的 addAll 实现。然后反过来又调用在 InstrumentedHashSet 类中重写的 add 方法，每个元素调用一次。这三次调用又分别给 addCount 加 1，所以，一共增加了 6：通过 addAll 方法每个增加的元素都被计算了两次。</p><p>　　我们可以通过消除 addAll 方法的重写来“修复”子类。 尽管生成的类可以正常工作，但是它依赖于它的正确方法，因为 HashSet 的 addAll 方法是在其 add 方法之上实现的。 这个“自我使用（self-use）”是一个实现细节，并不保证在 Java 平台的所有实现中都可以适用，并且可以随发布版本而变化。 因此，产生的 InstrumentedHashSet 类是脆弱的。</p><p>　　稍微好一点的做法是，重写 addAll 方法遍历指定集合，为每个元素调用 add 方法一次。 不管 HashSet 的 addAll 方法是否在其 add 方法上实现，都会保证正确的结果，因为 HashSet 的 addAll 实现将不再被调用。然而，这种技术并不能解决所有的问题。 这相当于重新实现了父类方法，这样的方法可能不能确定到底是否《时》自用（self-use）的，实现起来也是困难的，耗时的，容易出错的，并且可能会降低性能。 此外，这种方式并不能总是奏效，因为子类无法访问一些私有属性，所以有些方法就无法实现。</p><p>　　导致子类脆弱的一个相关原因是，它们的父类在后续的发布版本中可以添加新的方法。假设一个程序的安全性依赖于这样一个事实：所有被插入到集中的元素都满足一个先决条件。可以通过对集合进行子类化，然后并重写所有添加元素的方法，以确保在添加每个元素之前满足这个先决条件，来确保这一问题。如果在后续的版本中，父类没有新增添加元素的方法，那么这样做没有问题。但是，一旦父类增加了这样的新方法，则很有可能由于调用了未被重写的新方法，将非法的元素添加到子类的实例中。这不是个纯粹的理论问题。在把 Hashtable 和 Vector 类加入到 Collections 框架中的时候，就修复了几个类似性质的安全漏洞。</p><p>　　这两个问题都源于重写方法。 如果仅仅添加新的方法并且不要重写现有的方法，可能会认为继承一个类是安全的。 虽然这种扩展更为安全，但这并非没有风险。 如果父类在后续版本中添加了一个新的方法，并且你不幸给了子类一个具有相同签名和不同返回类型的方法，那么你的子类编译失败[JLS，8.4.8.3]。 如果已经为子类提供了一个与新的父类方法具有相同签名和返回类型的方法，那么你现在正在重写它，因此将遇到前面所述的问题。 此外，你的方法是否会履行新的父类方法的约定，这是值得怀疑的，因为在你编写子类方法时，这个约定还没有写出来。</p><p>　　幸运的是，有一种方法可以避免上述所有的问题。<strong><em>不要继承一个现有的类，而应该给你的新类增加一个私有属性，该属性是 现有类的实例引用，这种设计被称为组合（composition）</em></strong>，因为现有的类成为新类的组成部分。<strong><em>新类中的每个实例方法调用现有类的包含实例上的相应方法并返回结果。这被称为转发（forwarding），而新类中的方法被称为转发方法</em></strong>。由此产生的类将坚如磐石，不依赖于现有类的实现细节。即使将新的方法添加到现有的类中，也不会对新类产生影响。为了具体说用，下面代码使用组合和转发方法替代 InstrumentedHashSet 类。请注意，实现分为两部分，类本身和一个可重用的转发类，其中包含所有的转发方法，没有别的方法：</p><pre><code>// Reusable forwarding classimport java.util.Collection;import java.util.Iterator;import java.util.Set;public class ForwardingSet&lt;E&gt; implements Set&lt;E&gt; {    private final Set&lt;E&gt; s;    public ForwardingSet(Set&lt;E&gt; s) {        this.s = s;    }    public void clear() {        s.clear();    }    public boolean contains(Object o) {        return s.contains(o);    }    public boolean isEmpty() {        return s.isEmpty();    }    public int size() {        return s.size();    }    public Iterator&lt;E&gt; iterator() {        return s.iterator();    }    public boolean add(E e) {        return s.add(e);    }    public boolean remove(Object o) {        return s.remove(o);    }    public boolean containsAll(Collection&lt;?&gt; c) {        return s.containsAll(c);    }    public boolean addAll(Collection&lt;? extends E&gt; c) {        return s.addAll(c);    }    public boolean removeAll(Collection&lt;?&gt; c) {        return s.removeAll(c);    }    public boolean retainAll(Collection&lt;?&gt; c) {        return s.retainAll(c);    }    public Object[] toArray() {        return s.toArray();    }    public &lt;T&gt; T[] toArray(T[] a) {        return s.toArray(a);    }    @Override    public boolean equals(Object o) {        return s.equals(o);    }    @Override    public int hashCode() {        return s.hashCode();    }    @Override    public String toString() {        return s.toString();    }}// Wrapper class - uses composition in place of inheritanceimport java.util.Collection;import java.util.Set;public class InstrumentedSet&lt;E&gt; extends ForwardingSet&lt;E&gt; {    private int addCount = 0;    public InstrumentedSet(Set&lt;E&gt; s) {        super(s);    }    @Override public boolean add(E e) {        addCount++;        return super.add(e);    }    @Override public boolean addAll(Collection&lt;? extends E&gt; c) {        addCount += c.size();        return super.addAll(c);    }    public int getAddCount() {        return addCount;    }}</code></pre><p>InstrumentedSet 类的设计是通过存在的 Set 接口来实现的，该接口包含 HashSet 类的功能特性。除了功能强大，这个设计是非常灵活的。InstrumentedSet 类实现了 Set 接口，并有一个构造方法，其参数也是 Set 类型的。本质上，这个类把 Set 转换为另一个类型 Set， 同时添加了计数的功能。与基于继承的方法不同，该方法仅适用于单个具体类，并且父类中每个需要支持构造方法，提供单独的构造方法，所以可以使用包装类来包装任何 Set 实现，并且可以与任何预先存在的构造方法结合使用：</p><pre><code>Set&lt;Instant&gt; times = new InstrumentedSet&lt;&gt;(new TreeSet&lt;&gt;(cmp));Set&lt;E&gt; s = new InstrumentedSet&lt;&gt;(new HashSet&lt;&gt;(INIT_CAPACITY));</code></pre><p>　　InstrumentedSet 类甚至可以用于临时替换没有计数功能下使用的集合实例：</p><pre><code>static void walk(Set&lt;Dog&gt; dogs) {    InstrumentedSet&lt;Dog&gt; iDogs = new InstrumentedSet&lt;&gt;(dogs);    ... // Within this method use iDogs instead of dogs}</code></pre><p>　　InstrumentedSet 类被称为包装类，因为每个 InstrumentedSet 实例都包含（“包装”）另一个 Set 实例。 这也被称为装饰器模式[Gamma95]，因为 InstrumentedSet 类通过添加计数功能来“装饰”一个集合。 有时组合和转发的结合被不精确地地称为委托（delegation）。 从技术上讲，除非包装对象把自身传递给被包装对象，否则不是委托[Lieberman86; Gamma95]。</p><p>　　包装类的缺点很少。 一个警告是包装类不适合在回调框架（callback frameworks）中使用，其中对象将自我引用传递给其他对象以用于后续调用（「回调」）。 因为一个被包装的对象不知道它外面的包装对象，所以它传递一个指向自身的引用（this），回调时并不记得外面的包装对象。 这被称为 SELF 问题[Lieberman86]。 有些人担心转发方法调用的性能影响，以及包装对象对内存占用。 两者在实践中都没有太大的影响。 编写转发方法有些繁琐，但是只需为每个接口编写一次可重用的转发类，并且提供转发类。 例如，Guava 为所有的 Collection 接口提供转发类[Guava]。</p><p>　　只有在子类真的是父类的子类型的情况下，继承才是合适的。 换句话说，只有在两个类之间存在「is-a」关系的情况下，B 类才能继承 A 类。 如果你试图让 B 类继承 A 类时，问自己这个问题：每个 B 都是 A 吗？ 如果你不能如实回答这个问题，那么 B 就不应该继承 A。如果答案是否定的，那么 B 通常包含一个 A 的私有实例，并且暴露一个不同的 API ：A 不是 B 的重要部分 ，只是其实现细节。</p><p>　　在 Java 平台类库中有一些明显的违反这个原则的情况。 例如，stacks 实例并不是 vector 实例，所以 Stack 类不应该继承 Vector 类。 同样，一个属性列表不是一个哈希表，所以 Properties 不应该继承 Hashtable 类。 在这两种情况下，组合方式更可取。</p><p>　　如果在合适组合的地方使用继承，则会不必要地公开实现细节。由此产生的 API 将与原始实现联系在一起，永远限制类的性能。更严重的是，通过暴露其内部，客户端可以直接访问它们。至少，它可能导致混淆语义。例如，属性 p 指向 Properties 实例，那么 p.getProperty(key) 和 p.get(key) 就有可能返回不同的结果：前者考虑了默认的属性表，而后者是继承 Hashtable 的，它则没有考虑默认属性列表。最严重的是，客户端可以通过直接修改超父类来破坏子类的不变性。在 Properties 类，设计者希望只有字符串被允许作为键和值，但直接访问底层的 Hashtable 允许违反这个不变性。一旦违反，就不能再使用属性 API 的其他部分（load 和 store 方法）。在发现这个问题的时候，纠正这个问题为时已晚，因为客户端依赖于使用非字符串键和值了。</p><p>　　在决定使用继承来代替组合之前，你应该问自己最后一组问题。对于试图继承的类，它的 API 有没有缺陷呢？ 如果有，你是否愿意将这些缺陷传播到你的类的 API 中？继承传播父类的 API 中的任何缺陷，而组合可以让你设计一个隐藏这些缺陷的新 API。</p><p>　　总之，继承是强大的，但它是有问题的，因为它违反封装。 只有在子类和父类之间存在真正的子类型关系时才适用。 即使如此，如果子类与父类不在同一个包中，并且父类不是为继承而设计的，继承可能会导致脆弱性。 为了避免这种脆弱性，使用合成和转发代替继承，特别是如果存在一个合适的接口来实现包装类。 包装类不仅比子类更健壮，而且更强大。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/17.%20%E6%9C%80%E5%B0%8F%E5%8C%96%E5%8F%AF%E5%8F%98%E6%80%A7" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/17.%20%E6%9C%80%E5%B0%8F%E5%8C%96%E5%8F%AF%E5%8F%98%E6%80%A7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章阅读：类和接口&lt;/p&gt;
&lt;p&gt;17.最小化可变性&lt;br&gt;18.组合优于继承&lt;br&gt;灵魂三问：&lt;br&gt;　如果你试图让 B 类继承 A 类时，问自己这个问题：每个 B 都是 A 吗？ 如果你不能如实回答这个问题，那么 B 就不应该继承 A。在决定使用继承来代替组合之前，你应该问自己最后一组问题。对于试图继承的类，它的 API 有没有缺陷呢？ 如果有，你是否愿意将这些缺陷传播到你的类的 API 中？继承传播父类的 API 中的任何缺陷，而组合可以让你设计一个隐藏这些缺陷的新 API。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记VIII</title>
    <link href="http://yoursite.com/2020/01/16/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0VIII/"/>
    <id>http://yoursite.com/2020/01/16/Effective-Java阅读笔记VIII/</id>
    <published>2020-01-16T03:07:12.000Z</published>
    <updated>2020-01-17T01:50:19.117Z</updated>
    
    <content type="html"><![CDATA[<p>第四章阅读：类和接口</p><p>15.使类和成员的可访问性最小化<br>应该尽可能地减少程序元素的可访问性（在合理范围内）。 在仔细设计一个最小化的公共 API 之后，应该防止任何散乱的类，接口或成员成为 API 的一部分。 除了作为常量的公共静态 final 字段之外，公共类不应该有公共字段。 确保 public static final 字段引用的对象是不可变的。</p><p>16.在公共类中使用访问方法而不是公共属性<br>公共类不应该暴露可变属性。 公共类暴露不可变属性的危害虽然仍然存在问题，但其危害较小。 然而，有时需要包级私有或私有内部类来暴露属性，无论此类是否是可变的。</p><a id="more"></a><h1 id="使类和成员的可访问性最小化"><a href="#使类和成员的可访问性最小化" class="headerlink" title="使类和成员的可访问性最小化"></a>使类和成员的可访问性最小化</h1><p>将设计良好的组件与设计不佳的组件区分开来的最重要的因素是，隐藏内部数据和其他实现细节的程度。一个设计良好的组件隐藏了它的所有实现细节，干净地将它的 API 与它的实现分离开来。然后，组件只通过它们的 API 进行通信，并且对彼此的内部工作一无所知。这一概念，被称为信息隐藏或封装，是软件设计的基本原则[Parnas72]。</p><p>　　信息隐藏很重要有很多原因，其中大部分来源于它将组成系统的组件分离开来，允许它们被独立地开发，测试，优化，使用，理解和修改。这加速了系统开发，因为组件可以并行开发。它减轻了维护的负担，因为可以更快速地理解组件，调试或更换组件，而不用担心损害其他组件。虽然信息隐藏本身并不会导致良好的性能，但它可以有效地进行性能调整：一旦系统完成并且分析确定了哪些组件导致了性能问题（条目 67），则可以优化这些组件，而不会影响别人的正确的组件。信息隐藏增加了软件重用，因为松耦合的组件通常在除开发它们之外的其他环境中证明是有用的。最后，隐藏信息降低了构建大型系统的风险，因为即使系统不能运行，各个独立的组件也可能是可用的。</p><p>　　Java 提供了许多机制来帮助信息隐藏。 <strong><em>访问控制机制（access control mechanism）</em></strong>[JLS，6.6] 指定了类，接口和成员的可访问性。 实体的可访问性取决于其声明的位置，以及声明中存在哪些访问修饰符（private，protected 和 public）。 正确使用这些修饰符对信息隐藏至关重要。</p><p>　　经验法则很简单： <strong><em>让每个类或成员尽可能地不可访问</em></strong>。 换句话说，使用尽可能低的访问级别，与你正在编写的软件的对应功能保持一致。</p><p>　　对于顶层（非嵌套的）类和接口，只有两个可能的访问级别：包级私有（package-private）和公共的（public）。如果你使用 public 修饰符声明顶级类或接口，那么它是公开的；否则，它是包级私有的。如果一个顶层类或接口可以被做为包级私有，那么它应该是。通过将其设置为包级私有，可以将其作为实现的一部分，而不是导出的 API，你可以修改它、替换它，或者在后续版本中消除它，而不必担心损害现有的客户端。如果你把它公开，你就有义务永远地支持它，以保持兼容性。</p><p>　　如果一个包级私有顶级类或接口只被一个类使用，那么可以考虑这个类作为使用它的唯一类的私有静态嵌套类 （详见第 24 条）。这将它的可访问性从包级的所有类减少到使用它的一个类。但是，减少不必要的公共类的可访问性要比包级私有的顶级类更重要：公共类是包的 API 的一部分，而包级私有的顶级类已经是这个包实现的一部分了。</p><p>　　对于成员（字段、方法、嵌套类和嵌套接口），有四种可能的访问级别，在这里，按照可访问性从小到大列出：</p><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><p>—— 该成员只能在声明它的顶级类内访问。</p><h2 id="package-private"><a href="#package-private" class="headerlink" title="package-private"></a>package-private</h2><p>—— 成员可以从被声明的包中的任何类中访问。从技术上讲，如果没有指定访问修饰符（接口成员除外，它默认是公共的），这是默认访问级别。</p><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p>—— 成员可以从被声明的类的子类中访问（会受一些限制 [JLS, 6.6.2]），以及它声明的包中的任何类。</p><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>—— 该成员可以从任何地方被访问。<br>　　在仔细设计你的类的公共 API 之后，你的反应应该是让所有其他成员设计为私有的。 只有当同一个包中的其他类真的需要访问成员时，需要删除私有修饰符，从而使成员包成为包级私有的。 如果你发现自己经常这样做，你应该重新检查你的系统的设计，看看另一个分解可能产生更好的解耦的类。 也就是说，私有成员和包级私有成员都是类实现的一部分，通常不会影响其导出的 API。 但是，如果类实现 Serializable 接口（详见第 86 和 87 条），则这些字段可以「泄漏（leak）」到导出的 API 中。</p><p>　　对于公共类的成员，当访问级别从包私有到受保护级时，可访问性会大大增加。 受保护（protected）的成员是类导出的 API 的一部分，并且必须永远支持。 此外，导出类的受保护成员表示对实现细节的公开承诺（详见第 19 条）。 对受保护成员的需求应该相对较少。</p><p>　　有一个关键的规则限制了你减少方法访问性的能力。 如果一个方法重写一个超类方法，那么它在子类中的访问级别就不能低于父类中的访问级别[JLS，8.4.8.3]。 这对于确保子类的实例在父类的实例可用的地方是可用的（Liskov 替换原则，见条目 15）是必要的。 如果违反此规则，编译器将在尝试编译子类时生成错误消息。 这个规则的一个特例是，如果一个类实现了一个接口，那么接口中的所有类方法都必须在该类中声明为 public。</p><p>　　为了便于测试你的代码，你可能会想要让一个类，接口或者成员更容易被访问。 这没问题。 为了测试将公共类的私有成员指定为包级私有是可以接受的，但是提高到更高的访问级别却是不可接受的。 换句话说，将类，接口或成员作为包级导出的 API 的一部分来促进测试是不可接受的。 幸运的是，这不是必须的，因为测试可以作为被测试包的一部分运行，从而获得对包私有元素的访问。</p><p>　　<strong><em>公共类的实例字段很少情况下采用 public 修饰</em></strong>（详见第 16 条）。 如果一个实例字段是非 final 的，或者是对可变对象的引用，那么通过将其公开，你就放弃了限制可以存储在字段中的值的能力。这意味着你放弃了执行涉及该字段的不变量的能力。另外，当字段被修改时，就放弃了采取任何操作的能力，<strong><em>因此带有公共可变字段的类通常不是线程安全的</em></strong> 。即使一个字段是 final 的，并且引用了一个不可变的对象，通过将其公开，你放弃了切换到一个新的内部数据表示的灵活性，而该字段并不存在。</p><p>　　同样的建议适用于静态字段，但有一个例外。 假设常量是类的抽象的一个组成部分，你可以通过 public static final 字段暴露常量。 按照惯例，这些字段的名字由大写字母组成，字母用下划线分隔（详见第 68 条）。 很重要的一点是，这些字段包含基本类型的值或对不可变对象的引用（详见第 17 条）。 包含对可变对象的引用的字段具有非 final 字段的所有缺点。 虽然引用不能被修改，但引用的对象可以被修改，并会带来灾难性的结果。</p><p>　　请注意，非零长度的数组总是可变的，<strong><em>所以类具有公共静态 final 数组字段，或返回这样一个字段的访问器是错误的</em></strong>。 如果一个类有这样的字段或访问方法，客户端将能够修改数组的内容。 这是安全漏洞的常见来源：</p><pre><code>// Potential security hole!public static final Thing[] VALUES = { ... };</code></pre><p>要小心这样的事实，一些 IDE 生成的访问方法返回对私有数组字段的引用，导致了这个问题。 有两种方法可以解决这个问题。 你可以使公共数组私有并添加一个公共的不可变列表：</p><pre><code>private static final Thing[] PRIVATE_VALUES = { ... };public static final List&lt;Thing&gt; VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));</code></pre><p>或者，可以将数组设置为 private，并添加一个返回私有数组拷贝的公共方法：</p><pre><code>private static final Thing[] PRIVATE_VALUES = { ... };public static final Thing[] values() {    return PRIVATE_VALUES.clone();}</code></pre><p>   要在这些方法之间进行选择，请考虑客户端可能如何处理返回的结果。 哪种返回类型会更方便？ 哪个会更好的表现？</p><p>　　在 Java 9 中，作为模块系统（module system）的一部分引入了两个额外的隐式访问级别。模块包含一组包，就像一个包包含一组类一样。模块可以通过模块声明中的导出（export）声明显式地导出某些包 (这是 module-info.java 的源文件中包含的约定)。模块中的未导出包的公共和受保护成员在模块之外是不可访问的；在模块中，可访问性不受导出（export）声明的影响。使用模块系统允许你在模块之间共享类，而不让它们对整个系统可见。在未导出的包中，公共和受保护的公共类的成员会产生两个隐式访问级别，这是普通公共和受保护级别的内部类似的情况。这种共享的需求是相对少见的，并且可以通过重新安排包中的类来消除。</p><p>　　与四个主要访问级别不同，这两个基于模块的级别主要是建议（advisory）。 如果将模块的 JAR 文件放在应用程序的类路径而不是其模块路径中，那么模块中的包将恢复为非模块化行为：包的公共类的所有公共类和受保护成员都具有其普通的可访问性，不管包是否由模块导出[Reinhold，1.2]。 新引入的访问级别严格执行的地方是 JDK 本身：Java 类库中未导出的包在模块之外真正无法访问。</p><p>　　对于典型的 Java 程序员来说，不仅程序模块所提供的访问保护存在局限性，而且在本质上是很大程度上建议性的；为了利用它，你必须把你的包组合成模块，在模块声明中明确所有的依赖关系，重新安排你的源码树层级，并采取特殊的行动来适应你的模块内任何对非模块化包的访问[Reinhold, 3]。 现在说模块是否会在 JDK 之外得到广泛的使用还为时尚早。 与此同时，除非你有迫切的需要，否则似乎最好避免它们。</p><p>　　总而言之，应该尽可能地减少程序元素的可访问性（在合理范围内）。 在仔细设计一个最小化的公共 API 之后，你应该防止任何散乱的类，接口或成员成为 API 的一部分。 除了作为常量的公共静态 final 字段之外，公共类不应该有公共字段。 确保 public static final 字段引用的对象是不可变的。</p><h1 id="在公共类中使用访问方法而不是公共属性"><a href="#在公共类中使用访问方法而不是公共属性" class="headerlink" title="在公共类中使用访问方法而不是公共属性"></a>在公共类中使用访问方法而不是公共属性</h1><p>有时候，你可能会试图写一些退化的类（degenerate classes），除了集中实例属性之外别无用处：</p><pre><code>// Degenerate classes like this should not be public!class Point {    public double x;    public double y;}</code></pre><p>由于这些类的数据属性可以直接被访问，因此这些类不提供封装的好处（详见第 15 条）。 如果不更改 API，则无法更改其表示形式，无法强制执行不变量，并且在访问属性时无法执行辅助操作。 坚持面向对象的程序员觉得这样的类是厌恶的，应该被具有私有属性和公共访问方法的类（getter）所取代，而对于可变类来说，它们应该被替换为 setter 设值方法：</p><pre><code>// Encapsulation of data by accessor methods and mutatorsclass Point {    private double x;    private double y;    public Point(double x, double y) {        this.x = x;        this.y = y;    }    public double getX() { return x; }    public double getY() { return y; }    public void setX(double x) { this.x = x; }    public void setY(double y) { this.y = y; }}</code></pre><p>　　当然，对于公共类来说，坚持面向对象是正确的：如果一个类在其包之外是可访问的，则提供访问方法来保留更改类内部表示的灵活性。 如果一个公共类暴露其数据属性，那么以后更改其表示形式基本上没有可能，因为客户端代码可以散布在很多地方。</p><p>　　但是，如果一个类是包级私有的，或者是一个私有的内部类，那么暴露它的数据属性就没有什么本质上的错误——假设它们提供足够描述该类提供的抽象。 在类定义和使用它的客户端代码中，这种方法比访问方法产生更少的视觉混乱。 虽然客户端代码绑定到类的内部表示，但是这些代码仅限于包含该类的包。 如果类的内部表示是可取的，可以在不触碰包外的任何代码的情况下进行更改。 在私有内部类的情况下，更改作用范围进一步限制在封闭类中。</p><p>　　Java 平台类库中的几个类违反了公共类不应直接暴露属性的建议。 著名的例子包括 java.awt 包中的 Point 和 Dimension 类。 这些类别应该被视为警示性的示例，而不是模仿的例子。 如条目 67 所述，时至今日，暴露 Dimension 的内部结构的决定仍然导致着严重的性能问题。</p><p>　　虽然公共类直接暴露属性并不是一个好主意，但是如果属性是不可变的，那么危害就不那么大了。当一个属性是只读的时候，除了更改类的 API 外，你不能改变类的内部表示形式，也不能采取一些辅助的行为，但是可以加强不变性。例如，下面的例子中保证每个实例表示一个有效的时间：</p><pre><code>// Public class with exposed immutable fields - questionablepublic final class Time {    private static final int HOURS_PER_DAY    = 24;    private static final int MINUTES_PER_HOUR = 60;    public final int hour;    public final int minute;    public Time(int hour, int minute) {        if (hour &lt; 0 || hour &gt;= HOURS_PER_DAY)           throw new IllegalArgumentException(&quot;Hour: &quot; + hour);        if (minute &lt; 0 || minute &gt;= MINUTES_PER_HOUR)           throw new IllegalArgumentException(&quot;Min: &quot; + minute);        this.hour = hour;        this.minute = minute;    }    ... // Remainder omitted}</code></pre><p>　　总之，公共类不应该暴露可变属性。 公共类暴露不可变属性的危害虽然仍然存在问题，但其危害较小。 然而，有时需要包级私有或私有内部类来暴露属性，无论此类是否是可变的。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/15.%20%E4%BD%BF%E7%B1%BB%E5%92%8C%E6%88%90%E5%91%98%E7%9A%84%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%9C%80%E5%B0%8F%E5%8C%96" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/15.%20%E4%BD%BF%E7%B1%BB%E5%92%8C%E6%88%90%E5%91%98%E7%9A%84%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%9C%80%E5%B0%8F%E5%8C%96</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章阅读：类和接口&lt;/p&gt;
&lt;p&gt;15.使类和成员的可访问性最小化&lt;br&gt;应该尽可能地减少程序元素的可访问性（在合理范围内）。 在仔细设计一个最小化的公共 API 之后，应该防止任何散乱的类，接口或成员成为 API 的一部分。 除了作为常量的公共静态 final 字段之外，公共类不应该有公共字段。 确保 public static final 字段引用的对象是不可变的。&lt;/p&gt;
&lt;p&gt;16.在公共类中使用访问方法而不是公共属性&lt;br&gt;公共类不应该暴露可变属性。 公共类暴露不可变属性的危害虽然仍然存在问题，但其危害较小。 然而，有时需要包级私有或私有内部类来暴露属性，无论此类是否是可变的。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的spfk主题修改</title>
    <link href="http://yoursite.com/2020/01/15/Hexo%E7%9A%84spfk%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/"/>
    <id>http://yoursite.com/2020/01/15/Hexo的spfk主题修改/</id>
    <published>2020-01-15T03:34:12.000Z</published>
    <updated>2020-01-17T10:15:13.464Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo的spfk主题修改：添加字数统计和阅读时长，添加网站运行时间，访问量统计，添加live2d卡通人物</p><a id="more"></a><p>新年新气象，使用Hexo的spfk主题博客很久了，想要做一些主题上的改动，准备在保持简洁风格前提下适当加一些有趣的小功能。</p><h1 id="添加字数统计和阅读时长"><a href="#添加字数统计和阅读时长" class="headerlink" title="添加字数统计和阅读时长"></a>添加字数统计和阅读时长</h1><p>先在博客目录下执行以下命令安装 hexo-wordcount 插件：</p><pre><code>$ npm i --save hexo-wordcount</code></pre><p>同样的，以 spfk 主题为例，在 \themes\hexo-theme-spfk\layout_partial\post 目录下创建 word.ejs 文件，在 word.ejs 文件中写入以下代码：</p><pre><code>&lt;div style=&quot;margin-top:10px;&quot;&gt;    &lt;span class=&quot;post-time&quot;&gt;      &lt;span class=&quot;post-meta-item-icon&quot;&gt;        &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;        &lt;span class=&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;/span&gt;        &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;      &lt;/span&gt;    &lt;/span&gt;    &amp;nbsp; | &amp;nbsp;    &lt;span class=&quot;post-time&quot;&gt;      &lt;span class=&quot;post-meta-item-icon&quot;&gt;        &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt;        &lt;span class=&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;/span&gt;        &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;      &lt;/span&gt;    &lt;/span&gt;&lt;/div&gt;</code></pre><p>然后在 \themes\hexo-theme-spfk\layout_partial\article.ejs 中适当位置添加以下代码：<br>添加前：</p><pre><code>&lt;% if (post.link || post.title){ %&gt;  &lt;header class=&quot;article-header&quot;&gt;    &lt;%- partial(&apos;post/title&apos;, {class_name: &apos;article-title&apos;}) %&gt;  &lt;/header&gt;</code></pre><p>添加后：</p><pre><code>&lt;% if (post.link || post.title){ %&gt;  &lt;header class=&quot;article-header&quot;&gt;    &lt;%- partial(&apos;post/title&apos;, {class_name: &apos;article-title&apos;}) %&gt;  &lt;% if(theme.word_count &amp;&amp; !post.no_word_count){ %&gt;    &lt;%- partial(&apos;post/word&apos;) %&gt;    &lt;% } %&gt;  &lt;/header&gt;</code></pre><p>但是这样发现在阅读每条博客时tag会和字数统计重叠，前端布局有待改动</p><p>最后在主题目录下的 _config.yml 添加以下配置</p><pre><code>word_count: true</code></pre><p>另外：要在博客底部显示所有文章的总字数，可以点击此处，根据你博客底部文件的类型选择相应的代码放在适当的位置即可，前提是要安装好 hexo-wordcount 插件，例如我使用 spfk 主题，在 \themes\material-x\layout_partial 目录下的 footer.ejs 文件中添加如下代码：</p><pre><code>&lt;i class=&quot;fas fa-chart-area&quot;&gt;&lt;/i&gt;&lt;span class=&quot;post-count&quot;&gt;字数统计：&lt;%= totalcount(site) %&gt;&lt;/span&gt;</code></pre><p>添加前的位置：</p><pre><code>&lt;div class=&quot;outer&quot;&gt;    &lt;div id=&quot;footer-info&quot;&gt;        &lt;div class=&quot;footer-left&quot;&gt;            &amp;copy; &lt;%= date(new Date(), &apos;YYYY&apos;) %&gt; &lt;%= config.author || config.title %&gt;        &lt;/div&gt;        &lt;div class=&quot;footer-right&quot;&gt;            &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;  Theme &lt;a href=&quot;https://github.com/luuman/hexo-theme-spfk&quot; target=&quot;_blank&quot;&gt;spfk&lt;/a&gt; by luuman        &lt;/div&gt;    &lt;/div&gt;</code></pre><p>添加后的位置：</p><pre><code>&lt;div class=&quot;outer&quot;&gt;    &lt;div id=&quot;footer-info&quot;&gt;        &lt;div class=&quot;footer-left&quot;&gt;            &amp;copy; &lt;%= date(new Date(), &apos;YYYY&apos;) %&gt; &lt;%= config.author || config.title %&gt;        &lt;/div&gt;        &lt;i class=&quot;fas fa-chart-area&quot;&gt;&lt;/i&gt;            &lt;span class=&quot;post-count&quot;&gt;总字数：&lt;%= totalcount(site) %&gt;&lt;/span&gt;        &lt;div class=&quot;footer-right&quot;&gt;            &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;  Theme &lt;a href=&quot;https://github.com/luuman/hexo-theme-spfk&quot; target=&quot;_blank&quot;&gt;spfk&lt;/a&gt; by luuman        &lt;/div&gt;    &lt;/div&gt;</code></pre><h1 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h1><p>一个比较好的小功能，可以看见自己的博客运行多久了，时间一天天的增加，成就感也会一天天增加的<br>在 \themes\hexo-theme-spfk\layout_partial\footer.ejs 文件下添加以下代码：</p><pre><code>&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;&lt;script&gt;    var now = new Date();    function createtime() {        var grt= new Date(&quot;11/16/2017 21:14:20&quot;);//在此处修改你的建站时间，格式：月/日/年 时:分:秒        now.setTime(now.getTime()+250);        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);        if(String(hnum).length ==1 ){hnum = &quot;0&quot; + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);        mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = &quot;0&quot; + mnum;}        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);        snum = Math.round(seconds); if(String(snum).length ==1 ){snum = &quot;0&quot; + snum;}        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;    }setInterval(&quot;createtime()&quot;,250);&lt;/script&gt;</code></pre><h1 id="访问量统计"><a href="#访问量统计" class="headerlink" title="访问量统计"></a>访问量统计</h1><p>使用不蒜子提供的服务，因为其域名更改，所以把原有的：</p><pre><code>&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre><p>域名改一下即可：</p><pre><code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre><h1 id="安装脚本（必选）"><a href="#安装脚本（必选）" class="headerlink" title="安装脚本（必选）"></a>安装脚本（必选）</h1><p>要使用不蒜子必须在页面中引入busuanzi.js，目前最新版如下。</p><pre><code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre><p>不蒜子可以给任何类型的个人站点使用，如果是用的hexo，打开themes/主题/layout/_partial/footer.ejs添加上述脚本即可，当然你也可以添加到 header 中。</p><h1 id="安装标签（可选）"><a href="#安装标签（可选）" class="headerlink" title="安装标签（可选）"></a>安装标签（可选）</h1><p>只需要复制相应的html标签到网站要显示访问量的位置即可。可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分扩展开发。根据要显示内容的不同，这分几种情况。</p><h2 id="显示站点总访问量"><a href="#显示站点总访问量" class="headerlink" title="显示站点总访问量"></a>显示站点总访问量</h2><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选：</p><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p><pre><code>&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</code></pre><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p><pre><code>&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;  本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt;</code></pre><p>如果你是用的hexo，打开themes/主题/layout/_partial/footer.ejs添加即可。</p><h1 id="显示单页面访问量"><a href="#显示单页面访问量" class="headerlink" title="显示单页面访问量"></a>显示单页面访问量</h1><p>要显示每篇文章的访问量，复制以下代码添加到需要显示的位置。</p><p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。</p><pre><code>&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;  本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</code></pre><p>代码中文字是可以修改的，只要保留id正确即可。</p><h1 id="Hexo博客添加live2d卡通人物"><a href="#Hexo博客添加live2d卡通人物" class="headerlink" title="Hexo博客添加live2d卡通人物"></a>Hexo博客添加live2d卡通人物</h1><p>因为之前自己对卡通形象不太感冒所以没有在博客里加入卡通人物，这次在live2d里找到了几个还比较有趣的形象。<br>参见：<br><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a><br>Hexo</p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块:"></a>安装模块:</h2><pre><code>npm install --save hexo-helper-live2d</code></pre><h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><p>请向Hexo的_config.yml 文件或主题的_config.yml 文件中添加配置:</p><pre><code>live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-gf  display:    position: right    width: 150    height: 300  mobile:    show: true  react:    opacity: 0.7</code></pre><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>有许多方法来使用不同的模型:</p><p>a. live2d_models子目录名称<br>在博客根目录下创建一个 live2d_models 文件夹.</p><p>在此文件夹内新建一个子文件夹.</p><p>将 Live2D 模型复制到这个子文件夹中.</p><p>将子文件夹的名称输入_config.yml 的 model.use 中.</p><p>示例</p><pre><code>你的模型叫 mymiku.在博客根目录 (应当有_config.yml 、sources 、 themes ) 新建名为 mymiku 的子文件夹.将模型复制到 /live2d_models/mymiku/ 中.现在, 在这里应当有一个 .model.json 文件 (例如 mymiku.model.json)在 /live2d_models/mymiku/ 中.将 mymiku 输入到位于_config.yml 的 model.use 中.</code></pre><p>b. 相对于博客根目录的自定义路径<br>可直接输入相对于博客根目录的自定义路径到 model.use 中.</p><p>示例: ./wives/wanko</p><p>c. npm 模块名<br>使用现有的的模型<br>需要先使用 npm install 模型的包名 来安装,</p><p>然后将包名输入位于_config.yml 的 model.use 中.</p><p>但在安装过程中遇到问题：</p><pre><code>make: *** [Release/obj.target/fse/fsevents.o] Error 1gyp ERR! build errorgyp ERR! stack Error: `make` failed with exit code: 2gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:262:23)gyp ERR! stack     at ChildProcess.emit (events.js:203:13)gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)gyp ERR! System Darwin 18.7.0gyp ERR! command &quot;/usr/local/Cellar/node/12.6.0/bin/node&quot; &quot;/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;build&quot; &quot;--fallback-to-build&quot; &quot;--module=/Users/liyiye/yiye-project/liyiye012.github.io/node_modules/fsevents/lib/binding/Release/node-v72-darwin-x64/fse.node&quot; &quot;--module_name=fse&quot; &quot;--module_path=/Users/liyiye/yiye-project/liyiye012.github.io/node_modules/fsevents/lib/binding/Release/node-v72-darwin-x64&quot; &quot;--napi_version=4&quot; &quot;--node_abi_napi=napi&quot;gyp ERR! cwd /Users/liyiye/yiye-project/liyiye012.github.io/node_modules/fseventsgyp ERR! node -v v12.6.0gyp ERR! node-gyp -v v3.8.0gyp ERR! not oknode-pre-gyp ERR! build errornode-pre-gyp ERR! stack Error: Failed to execute &apos;/usr/local/Cellar/node/12.6.0/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/Users/liyiye/yiye-project/liyiye012.github.io/node_modules/fsevents/lib/binding/Release/node-v72-darwin-x64/fse.node --module_name=fse --module_path=/Users/liyiye/yiye-project/liyiye012.github.io/node_modules/fsevents/lib/binding/Release/node-v72-darwin-x64 --napi_version=4 --node_abi_napi=napi&apos; (1)</code></pre><p>类似问题在<a href="https://github.com/nodejs/node-gyp/issues/1547中找到：" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp/issues/1547中找到：</a></p><p>执行命令：</p><pre><code>sudo npm i --unsafe-permsudo npm audit fix --forcesudo npm install live2d-widget-model-gf</code></pre><p>但做完这个功能后个人感觉有点花哨，容易分散阅读注意力，就暂时不上线了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://cniter.github.io/posts/b1e9411b.html" target="_blank" rel="noopener">https://cniter.github.io/posts/b1e9411b.html</a><br>【2】<a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/85420403</a><br>【3】<a href="https://zhuanlan.zhihu.com/p/69213954" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69213954</a><br>【4】<a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/" target="_blank" rel="noopener">https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/</a><br>【5】<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a><br>【6】<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo的spfk主题修改：添加字数统计和阅读时长，添加网站运行时间，访问量统计，添加live2d卡通人物&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记VII</title>
    <link href="http://yoursite.com/2020/01/15/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0VII/"/>
    <id>http://yoursite.com/2020/01/15/Effective-Java阅读笔记VII/</id>
    <published>2020-01-15T02:48:12.000Z</published>
    <updated>2020-01-17T01:50:19.121Z</updated>
    
    <content type="html"><![CDATA[<p>第三章阅读：Methods Common to All Objects<br>13.谨慎地重写 clone 方法<br>14.考虑实现 Comparable 接口<br>总而言之，无论何时实现具有合理排序的值类，你都应该让该类实现 Comparable 接口，以便在基于比较的集合中轻松对其实例进行排序，搜索和使用。 比较<br>compareTo 方法的实现中的字段值时，请避免使用「&lt;」和「&gt;」运算符。 相反，使用包装类中的静态 compare 方法或 Comparator 接口中的构建方法</p><a id="more"></a><h1 id="谨慎地重写-clone-方法"><a href="#谨慎地重写-clone-方法" class="headerlink" title="谨慎地重写 clone 方法"></a>谨慎地重写 clone 方法</h1><p>TODO：这一条没有读懂，留待看过20/65条后再回头来读。</p><p>Cloneable 接口的目的是作为一个 mixin 接口 （详见第 20 条），公布这样的类允许克隆。不幸的是，它没有达到这个目的。它的主要缺点是缺少 clone 方法，而 Object 的 clone 方法是受保护的。你不能，不借助反射 （详见第 65 条），仅仅因为它实现了 Cloneable 接口，就调用对象上的 clone 方法。即使是反射调用也可能失败，因为不能保证对象具有可访问的 clone 方法。尽管存在许多缺陷，该机制在合理的范围内使用，所以理解它是值得的。这个条目告诉你如何实现一个行为良好的 clone 方法，在适当的时候讨论这个方法，并提出替代方案。</p><p>　　既然 Cloneable 接口不包含任何方法，那它用来做什么？ 它决定了 Object 的受保护的 clone 方法实现的行为：如果一个类实现了 Cloneable 接口，那么 Object 的 clone 方法将返回该对象的逐个属性（field-by-field）拷贝；否则会抛出 CloneNotSupportedException 异常。这是一个非常反常的接口使用，而不应该被效仿。 通常情况下，实现一个接口用来表示可以为客户做什么。但对于 Cloneable 接口，它会修改父类上受保护方法的行为。</p><p>　　虽然规范并没有说明，但在实践中，实现 Cloneable 接口的类希望提供一个正常运行的公共 clone 方法。为了实现这一目标，该类及其所有父类必须遵循一个复杂的、不可执行的、稀疏的文档协议。由此产生的机制是脆弱的、危险的和不受语言影响的（extralinguistic）：它创建对象而不需要调用构造方法。</p><p>　　clone 方法的通用规范很薄弱的。 以下内容是从 Object 规范中复制出来的：</p><p>　　创建并返回此对象的副本。 「复制（copy）」的确切含义可能取决于对象的类。 一般意图是，对于任何对象 x，表达式 x.clone() != x 返回 true，并且 x.clone().getClass() == x.getClass() 也返回 true，但它们不是绝对的要求，但通常情况下，x.clone().equals(x) 返回 true，当然这个要求也不是绝对的。</p><p>　　根据约定，这个方法返回的对象应该通过调用 super.clone 方法获得的。 如果一个类和它的所有父类（Object 除外）都遵守这个约定，情况就是如此，x.clone().getClass() == x.getClass()。</p><p>　　根据约定，返回的对象应该独立于被克隆的对象。 为了实现这种独立性，在返回对象之前，可能需要修改由 super.clone 返回的对象的一个或多个属性。</p><p>　　这种机制与构造方法链（chaining）很相似，只是它没有被强制执行；如果一个类的 clone 方法返回一个通过调用构造方法获得而不是通过调用 super.clone 的实例，那么编译器不会抱怨，但是如果一个类的子类调用了 super.clone，那么返回的对象包含错误的类，从而阻止子类 clone 方法正常执行。如果一个类重写的 clone 方法是有 final 修饰的，那么这个约定可以被安全地忽略，因为子类不需要担心。但是，如果一个 final 类有一个不调用 super.clone 的 clone 方法，那么这个类没有理由实现 Cloneable 接口，因为它不依赖于 Object 的 clone 实现的行为。</p><p>　　假设你希望在一个类中实现 Cloneable 接口，它的父类提供了一个行为良好的 clone 方法。首先调用 super.clone。 得到的对象将是原始的完全功能的复制品。 在你的类中声明的任何属性将具有与原始属性相同的值。 如果每个属性包含原始值或对不可变对象的引用，则返回的对象可能正是你所需要的，在这种情况下，不需要进一步的处理。 例如，对于条目 11 中的 PhoneNumber 类，情况就是这样，但是请注意，不可变类永远不应该提供 clone 方法，因为这只会浪费复制。 有了这个警告，以下是 PhoneNumber 类的 clone 方法：</p><pre><code>// Clone method for class with no references to mutable state@Override public PhoneNumber clone() {    try {        return (PhoneNumber) super.clone();    } catch (CloneNotSupportedException e) {        throw new AssertionError();  // Can&apos;t happen    }}</code></pre><p>为了使这个方法起作用，PhoneNumber 的类声明必须被修改，以表明它实现了 Cloneable 接口。 虽然 Object 类的 clone 方法返回 Object 类，但是这个 clone 方法返回 PhoneNumber 类。 这样做是合法和可取的，<strong><em>因为 Java 支持协变返回类型。 换句话说，重写方法的返回类型可以是重写方法的返回类型的子类。</em></strong> 这消除了在客户端转换的需要。 在返回之前，我们必须将 Object 的 super.clone 的结果强制转换为 PhoneNumber，但保证强制转换成功。</p><p>　　super.clone 的调用包含在一个 try-catch 块中。 这是因为 Object 声明了它的 clone 方法来抛出 CloneNotSupportedException 异常，这是一个检查时异常。 由于 PhoneNumber 实现了 Cloneable 接口，所以我们知道调用 super.clone 会成功。 这里引用的需要表明 CloneNotSupportedException 应该是未被检查的（详见第 71条）。</p><p>　　如果对象包含引用可变对象的属性，则前面显示的简单 clone 实现可能是灾难性的。 例如，考虑条目 7 中的 Stack 类：</p><pre><code>public class Stack {    private Object[] elements;    private int size = 0;    private static final int DEFAULT_INITIAL_CAPACITY = 16;    public Stack() {        this.elements = new Object[DEFAULT_INITIAL_CAPACITY];    }    public void push(Object e) {        ensureCapacity();        elements[size++] = e;    }    public Object pop() {        if (size == 0)            throw new EmptyStackException();        Object result = elements[--size];        elements[size] = null; // Eliminate obsolete reference        return result;    }    // Ensure space for at least one more element.    private void ensureCapacity() {        if (elements.length == size)            elements = Arrays.copyOf(elements, 2 * size + 1);    }}</code></pre><p>假设你想让这个类可以克隆。 如果 clone 方法仅返回 super.clone() 调用的对象，那么生成的 Stack 实例在其 size 属性中具有正确的值，但 elements 属性引用与原始 Stack 实例相同的数组。 修改原始实例将破坏克隆中的不变量，反之亦然。 你会很快发现你的程序产生了无意义的结果，或者抛出 NullPointerException 异常。</p><p>　　这种情况永远不会发生，因为调用 Stack 类中的唯一构造方法。 实际上，clone 方法作为另一种构造方法; 必须确保它不会损坏原始对象，并且可以在克隆上正确建立不变量。 为了使 Stack 上的 clone 方法正常工作，它必须复制 stack 对象的内部。 最简单的方法是对元素数组递归调用 clone 方法：</p><pre><code>// Clone method for class with references to mutable state@Override public Stack clone() {    try {        Stack result = (Stack) super.clone();        result.elements = elements.clone();        return result;    } catch (CloneNotSupportedException e) {        throw new AssertionError();    }}</code></pre><p>请注意，我们不必将 elements.clone 的结果转换为 Object[] 数组。 在数组上调用 clone 会返回一个数组，其运行时和编译时类型与被克隆的数组相同。 这是复制数组的首选习语(行话)。 事实上，数组是 clone 机制的唯一有力的用途。</p><p>　　还要注意，如果 elements 属性是 final 的，则以前的解决方案将不起作用，因为克隆将被禁止向该属性分配新的值。 这是一个基本的问题：像序列化一样，Cloneable 体系结构与引用可变对象的 final 属性的正常使用不兼容，除非可变对象可以在对象和其克隆之间安全地共享。 为了使一个类可以克隆，可能需要从一些属性中移除 final 修饰符。</p><p>　　仅仅递归地调用 clone 方法并不总是足够的。 例如，假设您正在为哈希表编写一个 clone 方法，其内部包含一个哈希桶数组，每个哈希桶都指向「键-值」对链表的第一项。 为了提高性能，该类实现了自己的轻量级单链表，而没有使用 java 内部提供的 java.util.LinkedList：</p><pre><code>public class HashTable implements Cloneable {    private Entry[] buckets = ...;    private static class Entry {        final Object key;        Object value;        Entry  next;        Entry(Object key, Object value, Entry next) {            this.key   = key;            this.value = value;            this.next  = next;          }    }    ... // Remainder omitted}</code></pre><p>假设你只是递归地克隆哈希桶数组，就像我们为 Stack 所做的那样：</p><pre><code>// Broken clone method - results in shared mutable state!@Override public HashTable clone() {    try {        HashTable result = (HashTable) super.clone();        result.buckets = buckets.clone();        return result;    } catch (CloneNotSupportedException e) {        throw new AssertionError();    }}</code></pre><p>虽然被克隆的对象有自己的哈希桶数组，但是这个数组引用与原始数组相同的链表，这很容易导致克隆对象和原始对象中的不确定性行为。 要解决这个问题，你必须复制包含每个桶的链表。 下面是一种常见的方法：</p><pre><code>// Recursive clone method for class with complex mutable statepublic class HashTable implements Cloneable {    private Entry[] buckets = ...;    private static class Entry {        final Object key;        Object value;        Entry  next;        Entry(Object key, Object value, Entry next) {            this.key   = key;            this.value = value;            this.next  = next;          }        // Recursively copy the linked list headed by this Entry        Entry deepCopy() {            return new Entry(key, value,                next == null ? null : next.deepCopy());        }    }    @Override public HashTable clone() {        try {            HashTable result = (HashTable) super.clone();            result.buckets = new Entry[buckets.length];            for (int i = 0; i &lt; buckets.length; i++)                if (buckets[i] != null)                    result.buckets[i] = buckets[i].deepCopy();            return result;        } catch (CloneNotSupportedException e) {            throw new AssertionError();        }    }    ... // Remainder omitted}</code></pre><p>　私有类 HashTable.Entry 已被扩充以支持「深度复制」方法。 HashTable 上的 clone 方法分配一个合适大小的新哈希桶数组，迭代原来哈希桶数组，深度复制每个非空的哈希桶。 Entry 上的 deepCopy 方法递归地调用它自己以复制由头节点开始的整个链表。 如果哈希桶不是太长，这种技术很聪明并且工作正常。但是，克隆链表不是一个好方法，因为它为列表中的每个元素消耗一个栈帧（stack frame）。 如果列表很长，这很容易导致堆栈溢出。 为了防止这种情况发生，可以用迭代来替换 deepCopy 中的递归：</p><pre><code>// Iteratively copy the linked list headed by this EntryEntry deepCopy() {   Entry result = new Entry(key, value, next);   for (Entry p = result; p.next != null; p = p.next)      p.next = new Entry(p.next.key, p.next.value, p.next.next);   return result;}</code></pre><p>克隆复杂可变对象的最后一种方法是调用 super.clone，将结果对象中的所有属性设置为其初始状态，然后调用更高级别的方法来重新生成原始对象的状态。 以 HashTable 为例，bucket 属性将被初始化为一个新的 bucket 数组，并且 put(key, value) 方法（未示出）被调用用于被克隆的哈希表中的键值映射。 这种方法通常产生一个简单，合理的优雅 clone 方法，其运行速度不如直接操纵克隆内部的方法快。 虽然这种方法是干净的，但它与整个 Cloneable 体系结构是对立的，因为它会盲目地重写构成体系结构基础的逐个属性对象复制。</p><p>　　与构造方法一样，clone 方法绝对不可以在构建过程中，调用一个可以重写的方法（详见第 19 条）。如果 clone 方法调用一个在子类中重写的方法，则在子类有机会在克隆中修复它的状态之前执行该方法，很可能导致克隆和原始对象的损坏。因此，我们在前面讨论的 put(key, value) 方法应该时 final 或 private 修饰的。（如果时 private 修饰，那么大概是一个非 final 公共方法的辅助方法）。</p><p>　　Object 类的 clone 方法被声明为抛出 CloneNotSupportedException 异常，但重写方法时不需要。 公共 clone 方法应该省略 throws 子句，因为不抛出检查时异常的方法更容易使用（详见第 71 条）。</p><p>　　在为继承设计一个类时（详见第 19 条），通常有两种选择，但无论选择哪一种，都不应该实现 Clonable 接口。你可以选择通过实现正确运行的受保护的 clone 方法来模仿 Object 的行为，该方法声明为抛出 CloneNotSupportedException 异常。 这给了子类实现 Cloneable 接口的自由，就像直接继承 Object 一样。 或者，可以选择不实现工作的 clone 方法，并通过提供以下简并 clone 实现来阻止子类实现它：</p><pre><code>// clone method for extendable class not supporting Cloneable@Overrideprotected final Object clone() throws CloneNotSupportedException {    throw new CloneNotSupportedException();}</code></pre><p>还有一个值得注意的细节。 如果你编写一个实现了 Cloneable 的线程安全的类，记得它的 clone 方法必须和其他方法一样（详见第 78 条）需要正确的同步。 Object 类的 clone 方法是不同步的，所以即使它的实现是令人满意的，也可能需要编写一个返回 super.clone() 的同步 clone 方法。</p><p>　　回顾一下，实现 Cloneable 的所有类应该重写公共 clone 方法，而这个方法的返回类型是类本身。 这个方法应该首先调用 super.clone，然后修复任何需要修复的属性。 通常，这意味着复制任何包含内部「深层结构」的可变对象，并用指向新对象的引用来代替原来指向这些对象的引用。虽然这些内部拷贝通常可以通过递归调用 clone 来实现，但这并不总是最好的方法。 如果类只包含基本类型或对不可变对象的引用，那么很可能是没有属性需要修复的情况。 这个规则也有例外。 例如，表示序列号或其他唯一 ID 的属性即使是基本类型的或不可变的，也需要被修正。</p><p>　　这么复杂是否真的有必要？很少。 如果你继承一个已经实现了 Cloneable 接口的类，你别无选择，只能实现一个行为良好的 clone 方法。 否则，通常你最好提供另一种对象复制方法。 对象复制更好的方法是提供一个复制构造方法或复制工厂。 复制构造方法接受参数，其类型为包含此构造方法的类，例如：</p><pre><code>// Copy constructorpublic Yum(Yum yum) { ... };</code></pre><p>复制工厂类似于复制构造方法的静态工厂：</p><pre><code>// Copy factorypublic static Yum newInstance(Yum yum) { ... };</code></pre><p>复制构造方法及其静态工厂变体与 Cloneable/clone 相比有许多优点：它们不依赖风险很大的语言外的对象创建机制；不要求遵守那些不太明确的惯例；不会与 final 属性的正确使用相冲突; 不会抛出不必要的检查异常; 而且不需要类型转换。</p><p>　　此外，复制构造方法或复制工厂可以接受类型为该类实现的接口的参数。 例如，按照惯例，所有通用集合实现都提供了一个构造方法，其参数的类型为 Collection 或 Map。 基于接口的复制构造方法和复制工厂（更适当地称为转换构造方法和转换工厂）允许客户端选择复制的实现类型，而不是强制客户端接受原始实现类型。 例如，假设你有一个 HashSet，并且你想把它复制为一个 TreeSet。 clone 方法不能提供这种功能，但使用转换构造方法很容易：new TreeSet&lt;&gt;(s)。</p><p>　　考虑到与 Cloneable 接口相关的所有问题，新的接口不应该继承它，新的可扩展类不应该实现它。 虽然实现 Cloneable 接口对于 final 类没有什么危害，但应该将其视为性能优化的角度，仅在极少数情况下才是合理的（详见第 67 条）。 通常，复制功能最好由构造方法或工厂提供。 这个规则的一个明显的例外是数组，它最好用 clone 方法复制。</p><h1 id="考虑实现-Comparable-接口"><a href="#考虑实现-Comparable-接口" class="headerlink" title="考虑实现 Comparable 接口"></a>考虑实现 Comparable 接口</h1><p>与本章讨论的其他方法不同，compareTo 方法并没有在 Object 类中声明。 相反，它是 Comparable 接口中的唯一方法。 它与 Object 类的 equals 方法在性质上是相似的，除了它允许在简单的相等比较之外的顺序比较，它是泛型的。 通过实现 Comparable 接口，一个类表明它的实例有一个自然顺序（natural ordering）。 对实现 Comparable 接口的对象数组排序非常简单，如下所示：</p><pre><code>Arrays.sort(a);</code></pre><p>它很容易查找，计算极端数值，以及维护 Comparable 对象集合的自动排序。例如，在下面的代码中，依赖于 String 类实现了 Comparable 接口，去除命令行参数输入重复的字符串，并按照字母顺序排序：</p><pre><code>public class WordList {    public static void main(String[] args) {        Set&lt;String&gt; s = new TreeSet&lt;&gt;();        Collections.addAll(s, args);        System.out.println(s);    }}</code></pre><p>通过实现 Comparable 接口，可以让你的类与所有依赖此接口的通用算法和集合实现进行互操作。 只需少量的努力就可以获得巨大的能量。 几乎 Java 平台类库中的所有值类以及所有枚举类型（详见第 34 条）都实现了 Comparable 接口。 如果你正在编写具有明显自然顺序（如字母顺序，数字顺序或时间顺序）的值类，则应该实现 Comparable 接口：</p><pre><code>public interface Comparable&lt;T&gt; {    int compareTo(T t);}</code></pre><p>compareTo 方法的通用约定与 equals 相似：</p><p>　　将此对象与指定的对象按照排序进行比较。 返回值可能为负整数，零或正整数，因为此对象对应小于，等于或大于指定的对象。 如果指定对象的类型与此对象不能进行比较，则引发 ClassCastException 异常。</p><p>　　下面的描述中，符号 sgn(expression) 表示数学中的 signum 函数，它根据表达式的值为负数、零、正数，对应返回-1、0 和 1。</p><p>实现类必须确保所有 x 和 y 都满足 sgn(x.compareTo(y)) == -sgn(y. compareTo(x))。 （这意味着当且仅当 y.compareTo(x) 抛出异常时，x.compareTo(y) 必须抛出异常。）<br>实现类还必须确保该关系是可传递的：(x. compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0) 意味着 x.compareTo(z) &gt; 0。<br>最后，对于所有的 z，实现类必须确保 x.compareTo(y) == 0 意味着 sgn(x.compareTo(z)) == sgn(y.compareTo(z))。<br>强烈推荐 (x.compareTo(y) == 0) == (x.equals(y))，但不是必需的。 一般来说，任何实现了 Comparable 接口的类违反了这个条件都应该清楚地说明这个事实。 推荐的语言是「注意：这个类有一个自然顺序，与 equals 不一致」。<br>　　与 equals 方法一样，不要被上述约定的数学特性所退缩。这个约定并不像看起来那么复杂。 与 equals 方法不同，equals 方法在所有对象上施加了全局等价关系，compareTo 不必跨越不同类型的对象：当遇到不同类型的对象时，compareTo 被允许抛出 ClassCastException 异常。 通常，这正是它所做的。 约定确实允许进行不同类型间比较，这种比较通常在由被比较的对象实现的接口中定义。</p><p>　　正如一个违反 hashCode 约定的类可能会破坏依赖于哈希的其他类一样，违反 compareTo 约定的类可能会破坏依赖于比较的其他类。 依赖于比较的类，包括排序后的集合 TreeSet 和 TreeMap 类，以及包含搜索和排序算法的实用程序类 Collections 和 Arrays。</p><p>　　我们来看看 compareTo 约定的规定。 第一条规定，如果反转两个对象引用之间的比较方向，则会发生预期的事情：如果第一个对象小于第二个对象，那么第二个对象必须大于第一个; 如果第一个对象等于第二个，那么第二个对象必须等于第一个; 如果第一个对象大于第二个，那么第二个必须小于第一个。 第二项约定说，如果一个对象大于第二个对象，而第二个对象大于第三个对象，则第一个对象必须大于第三个对象。 最后一条规定，所有比较相等的对象与任何其他对象相比，都必须得到相同的结果。</p><p>　　这三条规定的一个结果是，compareTo 方法所实施的平等测试必须遵守 equals 方法约定所施加的相同限制：自反性，对称性和传递性。 因此，同样需要注意的是：除非你愿意放弃面向对象抽象（详见第 10 条）的好处，否则无法在保留 compareTo 约定的情况下使用新的值组件继承可实例化的类。 同样的解决方法也适用。 如果要将值组件添加到实现 Comparable 的类中，请不要继承它；编写一个包含第一个类实例的不相关的类。 然后提供一个返回包含实例的「视图”方法。 这使你可以在包含类上实现任何 compareTo 方法，同时客户端在需要时，把包含类的实例视同以一个类的实例。</p><p>　　compareTo 约定的最后一段是一个强烈的建议，而不是一个真正的要求，只是声明 compareTo 方法施加的相等性测试，通常应该返回与 equals 方法相同的结果。 如果遵守这个约定，则 compareTo 方法施加的顺序被认为与 equals 相一致。 如果违反，顺序关系被认为与 equals 不一致。 其 compareTo 方法施加与 equals 不一致顺序关系的类仍然有效，但包含该类元素的有序集合可能不服从相应集合接口（Collection，Set 或 Map）的一般约定。 这是因为这些接口的通用约定是用 equals 方法定义的，但是排序后的集合使用 compareTo 强加的相等性测试来代替 equals。 如果发生这种情况，虽然不是一场灾难，但仍是一件值得注意的事情。</p><p>　　例如，考虑 BigDecimal 类，其 compareTo 方法与 equals 不一致。 如果你创建一个空的 HashSet 实例，然后添加 new BigDecimal(“1.0”) 和 new BigDecimal(“1.00”)，则该集合将包含两个元素，因为与 equals 方法进行比较时，添加到集合的两个 BigDecimal 实例是不相等的。 但是，如果使用 TreeSet 而不是 HashSet 执行相同的过程，则该集合将只包含一个元素，因为使用 compareTo 方法进行比较时，两个 BigDecimal 实例是相等的。 （有关详细信息，请参阅 BigDecimal 文档。）</p><p>　　编写 compareTo 方法与编写 equals 方法类似，但是有一些关键的区别。 因为 Comparable 接口是参数化的，compareTo 方法是静态类型的，所以你不需要输入检查或者转换它的参数。 如果参数是错误的类型，那么调用将不会编译。 如果参数为 null，则调用应该抛出一个 NullPointerException 异常，并且一旦该方法尝试访问其成员，它就会立即抛出这个异常。</p><p>　　在 compareTo 方法中，比较属性的顺序而不是相等。 要比较对象引用属性，请递归调用 compareTo 方法。 如果一个属性没有实现 Comparable，或者你需要一个非标准的顺序，那么使用 Comparator 接口。 可以编写自己的比较器或使用现有的比较器，如在条目 10 中的 CaseInsensitiveString 类的 compareTo 方法中：</p><pre><code>// Single-field Comparable with object reference fieldpublic final class CaseInsensitiveString        implements Comparable&lt;CaseInsensitiveString&gt; {    public int compareTo(CaseInsensitiveString cis) {        return String.CASE_INSENSITIVE_ORDER.compare(s, cis.s);    }    ... // Remainder omitted}</code></pre><p>请注意，CaseInsensitiveString 类实现了 Comparable<caseinsensitivestring> 接口。 这意味着 CaseInsensitiveString 引用只能与另一个 CaseInsensitiveString 引用进行比较。 当声明一个类来实现 Comparable 接口时，这是正常模式。</caseinsensitivestring></p><p>　　在本书第二版中，曾经推荐如果比较整型基本类型的属性，使用关系运算符「&lt;」和 「&gt;」，对于浮点类型基本类型的属性，使用 Double.compare 和 Float.compare 静态方法。在 Java 7 中，静态比较方法被添加到 Java 的所有包装类中。 在 compareTo 方法中使用关系运算符「&lt;」和「&gt;」是冗长且容易出错的，不再推荐。</p><p>　　如果一个类有多个重要的属性，那么比较他们的顺序是至关重要的。 从最重要的属性开始，逐步比较所有的重要属性。 如果比较结果不是零（零表示相等），则表示比较完成; 只是返回结果。 如果最重要的字段是相等的，比较下一个重要的属性，依此类推，直到找到不相等的属性或比较剩余不那么重要的属性。 以下是条目 11 中 PhoneNumber 类的 compareTo 方法，演示了这种方法：</p><pre><code>// Multiple-field `Comparable` with primitive fieldspublic int compareTo(PhoneNumber pn) {    int result = Short.compare(areaCode, pn.areaCode);    if (result == 0) {        result = Short.compare(prefix, pn.prefix);        if (result == 0)            result = Short.compare(lineNum, pn.lineNum);    }    return result;}</code></pre><p>在 Java 8 中 Comparator 接口提供了一系列比较器方法，可以使比较器流畅地构建。 这些比较器可以用来实现 compareTo 方法，就像 Comparable 接口所要求的那样。 许多程序员更喜欢这种方法的简洁性，尽管它的性能并不出众：在我的机器上排序 PhoneNumber 实例的数组速度慢了大约 10％。 在使用这种方法时，考虑使用 Java 的静态导入，以便可以通过其简单名称来引用比较器静态方法，以使其清晰简洁。 以下是 PhoneNumber 的 compareTo 方法的使用方法：</p><pre><code>// Comparable with comparator construction methodsprivate static final Comparator&lt;PhoneNumber&gt; COMPARATOR =        comparingInt((PhoneNumber pn) -&gt; pn.areaCode)          .thenComparingInt(pn -&gt; pn.prefix)          .thenComparingInt(pn -&gt; pn.lineNum);public int compareTo(PhoneNumber pn) {    return COMPARATOR.compare(this, pn);}</code></pre><p>此实现在类初始化时构建比较器，使用两个比较器构建方法。第一个是 comparingInt 方法。它是一个静态方法，它使用一个 <strong><em>键提取器函数式接口</em></strong> (key extractor function）作为参数，将对象引用映射为 int 类型的键，并返回一个根据该键排序的实例的比较器。在前面的示例中，comparingInt 方法使用 lambda 表达式，它从 PhoneNumber 中提取区域代码，并返回一个 Comparator<phonenumber>，根据它们的区域代码来排序电话号码。注意，lambda 表达式显式指定了其输入参数的类型 (PhoneNumber pn)。事实证明，在这种情况下，Java 的类型推断功能不够强大，无法自行判断类型，因此我们不得不帮助它以使程序编译。</phonenumber></p><p>　　如果两个电话号码实例具有相同的区号，则需要进一步细化比较，这正是第二个比较器构建方法，即 thenComparingInt 方法做的。 它是 Comparator 上的一个实例方法，接受一个 int 类型 <strong><em>键提取器函数式接口</em></strong> key extractor function）作为参数，并返回一个比较器，该比较器首先应用原始比较器，然后使用提取的键来打破连接。 你可以按照喜欢的方式多次调用 thenComparingInt 方法，从而产生一个字典顺序。 在上面的例子中，我们将两个调用叠加到 thenComparingInt，产生一个排序，它的二级键是 prefix，而其三级键是 lineNum。 请注意，我们不必指定传递给 thenComparingInt 的任何一个调用的 <strong><em>键提取器函数式接口</em></strong> 的参数类型：Java 的类型推断足够聪明，可以自己推断出参数的类型。</p><p>　　Comparator 类具有完整的构建方法。对于 long 和 double 基本类型，也有对应的类似于 comparingInt 和 thenComparingInt 的方法，int 版本的方法也可以应用于取值范围小于 int 的类型上，如 short 类型，如 PhoneNumber 实例中所示。对于 double 版本的方法也可以用在 float 类型上。这提供了所有 Java 的基本数字类型的覆盖。</p><p>　　也有对象引用类型的比较器构建方法。静态方法 comparing 有两个重载方式。第一个方法使用 <strong><em>键提取器函数式接口</em></strong> 并按键的自然顺序。第二种方法是 <strong><em>键提取器函数式接口</em></strong> 和比较器，用于键的排序。thenComparing 方法有三种重载。第一个重载只需要一个比较器，并使用它来提供一个二级排序。第二次重载只需要一个 <strong><em>键提取器函数式接口</em></strong> ，并使用键的自然顺序作为二级排序。最后的重载方法同时使用一个 <strong><em>键提取器函数式接口</em></strong> 和一个比较器来用在提取的键上。</p><p>　　有时，你可能会看到 compareTo 或 compare 方法依赖于两个值之间的差值，如果第一个值小于第二个值，则为负；如果两个值相等则为零，如果第一个值大于，则为正值。这是一个例子：</p><pre><code>// BROKEN difference-based comparator - violates transitivity!static Comparator&lt;Object&gt; hashCodeOrder = new Comparator&lt;&gt;() {    public int compare(Object o1, Object o2) {        return o1.hashCode() - o2.hashCode();    }};</code></pre><p>不要使用这种技术！它可能会导致整数最大长度溢出和 IEEE 754 浮点运算失真的危险[JLS 15.20.1,15.21.1]。 此外，由此产生的方法不可能比使用上述技术编写的方法快得多。 使用静态 compare 方法：</p><pre><code>// Comparator based on static compare methodstatic Comparator&lt;Object&gt; hashCodeOrder = new Comparator&lt;&gt;() {    public int compare(Object o1, Object o2) {        return Integer.compare(o1.hashCode(), o2.hashCode());    }};</code></pre><p>或者使用 Comparator 的构建方法：</p><pre><code>// Comparator based on Comparator construction methodstatic Comparator&lt;Object&gt; hashCodeOrder =        Comparator.comparingInt(o -&gt; o.hashCode());</code></pre><p><strong><em>总而言之，无论何时实现具有合理排序的值类，你都应该让该类实现 Comparable 接口，以便在基于比较的集合中轻松对其实例进行排序，搜索和使用。 比较<br>compareTo 方法的实现中的字段值时，请避免使用「&lt;」和「&gt;」运算符。 相反，使用包装类中的静态 compare 方法或 Comparator 接口中的构建方法</em></strong></p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/13.%20%E8%B0%A8%E6%85%8E%E5%9C%B0%E9%87%8D%E5%86%99%20clone%20%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/13.%20%E8%B0%A8%E6%85%8E%E5%9C%B0%E9%87%8D%E5%86%99%20clone%20%E6%96%B9%E6%B3%95</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章阅读：Methods Common to All Objects&lt;br&gt;13.谨慎地重写 clone 方法&lt;br&gt;14.考虑实现 Comparable 接口&lt;br&gt;总而言之，无论何时实现具有合理排序的值类，你都应该让该类实现 Comparable 接口，以便在基于比较的集合中轻松对其实例进行排序，搜索和使用。 比较&lt;br&gt;compareTo 方法的实现中的字段值时，请避免使用「&amp;lt;」和「&amp;gt;」运算符。 相反，使用包装类中的静态 compare 方法或 Comparator 接口中的构建方法&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记VI</title>
    <link href="http://yoursite.com/2020/01/14/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0VI/"/>
    <id>http://yoursite.com/2020/01/14/Effective-Java阅读笔记VI/</id>
    <published>2020-01-14T06:56:12.000Z</published>
    <updated>2020-01-17T01:50:19.118Z</updated>
    
    <content type="html"><![CDATA[<p>第三章阅读：Methods Common to All Objects<br>11.重写 equals 方法时同时也要重写 hashcode 方法<br>每次重写 equals 方法时都必须重写 hashCode 方法，否则程序将无法正常运行。hashCode 方法必须遵从 Object 类指定的常规约定，并且必须执行合理的工作，将不相等的哈希码分配给不相等的实例。<br>12.始终重写 toString 方法<br>除非父类已经这样做了，否则在每个实例化的类中重写 Object 的 toString 实现。 它使得类更加舒适地使用和协助调试。 toString 方法应该以一种美观的格式返回对象的简明有用的描述。</p><a id="more"></a><h1 id="重写-equals-方法时同时也要重写-hashcode-方法"><a href="#重写-equals-方法时同时也要重写-hashcode-方法" class="headerlink" title="重写 equals 方法时同时也要重写 hashcode 方法"></a>重写 equals 方法时同时也要重写 hashcode 方法</h1><p>在每个类中，在重写 equals 方法的时侯，一定要重写 hashcode 方法。 如果不这样做，你的类违反了 hashCode 的通用约定，这会阻止它在 HashMap 和 HashSet 这样的集合中正常工作。根据 Object 规范，以下时具体约定。</p><p>1.当在一个应用程序执行过程中，如果在 equals 方法比较中没有修改任何信息，在一个对象上重复调用 hashCode 方法时，它必须始终返回相同的值。从一个应用程序到另一个应用程序的每一次执行返回的值可以是不一致的。<br>2.如果两个对象根据 equals(Object) 方法比较是相等的，那么在两个对象上调用 hashCode 就必须产生的结果是相同的整数。<br>3.如果两个对象根据 equals(Object) 方法比较并不相等，则不要求在每个对象上调用 hashCode 都必须产生不同的结果。 但是，程序员应该意识到，为不相等的对象生成不同的结果可能会提高散列表（hash tables）的性能。<br>　　当无法重写 hashCode 时，所违反第二个关键条款是：相等的对象必须具有相等的哈希码（ hash codes）。 根据类的 equals 方法，两个不同的实例可能在逻辑上是相同的，但是对于 Object 类的 hashCode 方法，它们只是两个没有什么共同之处的对象。因此， Object 类的 hashCode 方法返回两个看似随机的数字，而不是按约定要求的两个相等的数字。</p><p>举例说明，假设你使用条目 10 中的 PhoneNumber 类的实例做为 HashMap 的键（key）：</p><pre><code>Map&lt;PhoneNumber, String&gt; m = new HashMap&lt;&gt;();m.put(new PhoneNumber(707, 867, 5309), &quot;Jenny&quot;);</code></pre><p>你可能期望 m.get(new PhoneNumber(707, 867, 5309)) 方法返回 Jenny 字符串，但实际上，返回了 null。注意，这里涉及到两个 PhoneNumber 实例：一个实例插入到 HashMap 中，另一个作为判断相等的实例用来检索。PhoneNumber 类没有重写 hashCode 方法导致两个相等的实例返回了不同的哈希码，违反了 hashCode 约定。put 方法把 PhoneNumber 实例保存在了一个哈希桶（ hash bucket）中，但 get 方法却是从不同的哈希桶中去查找，即使恰好两个实例放在同一个哈希桶中，get 方法几乎肯定也会返回 null。因为 HashMap 做了优化，缓存了与每一项（entry）相关的哈希码，如果哈希码不匹配，则不会检查对象是否相等了。</p><p>　　解决这个问题很简单，只需要为 PhoneNumber 类重写一个合适的 hashCode 方法。hashCode 方法是什么样的？写一个不规范的方法的是很简单的。以下示例，虽然永远是合法的，但绝对不能这样使用：</p><pre><code>// The worst possible legal hashCode implementation - never use!@Override public int hashCode() { return 42; }</code></pre><p>这是合法的，因为它确保了相等的对象具有相同的哈希码。这很糟糕，因为它确保了每个对象都有相同的哈希码。因此，每个对象哈希到同一个桶中，哈希表退化为链表。应该在线性时间内运行的程序，运行时间变成了平方级别。对于数据很大的哈希表而言，会影响到能够正常工作。</p><p>　　一个好的 hash 方法趋向于为不相等的实例生成不相等的哈希码。这也正是 hashCode 约定中第三条的表达。理想情况下，hash 方法为集合中不相等的实例均匀地分配 int 范围内的哈希码。实现这种理想情况可能是困难的。 幸运的是，要获得一个合理的近似的方式并不难。 以下是一个简单的配方：</p><p>1.声明一个 int 类型的变量 result，并将其初始化为对象中第一个重要属性 c 的哈希码，如下面步骤 2.a 中所计算的那样。（回顾条目 10，重要的属性是影响比较相等的领域。）</p><p>2.对于对象中剩余的重要属性 f，请执行以下操作：<br>a. 比较属性 f 与属性 c 的 int 类型的哈希码：</p><pre><code>-- i. 如果这个属性是基本类型的，使用 Type.hashCode(f) 方法计算，其中 Type 类是对应属性 f 基本类型的包装类。-- ii. 如果该属性是一个对象引用，并且该类的 equals 方法通过递归调用 equals 来比较该属性，并递归地调用 hashCode 方法。 如果需要更复杂的比较，则计算此字段的“范式（“canonical representation）”，并在范式上调用 hashCode。 如果该字段的值为空，则使用 0（也可以使用其他常数，但通常来使用 0 表示）。 -- iii. 如果属性 f 是一个数组，把它看作每个重要的元素都是一个独立的属性。 也就是说，通过递归地应用这些规则计算每个重要元素的哈希码，并且将每个步骤 2.b 的值合并。 如果数组没有重要的元素，则使用一个常量，最好不要为 0。如果所有元素都很重要，则使用 Arrays.hashCode 方法。</code></pre><p>b. 将步骤 2.a 中属性 c 计算出的哈希码合并为如下结果：result = 31 * result + c;</p><p>3.返回 result 值。</p><p>当你写完 hashCode 方法后，问自己是否相等的实例有相同的哈希码。 编写单元测试来验证你的直觉（除非你使用 AutoValue 框架来生成你的 equals 和 hashCode 方法，在这种情况下，你可以放心地忽略这些测试）。 如果相同的实例有不相等的哈希码，找出原因并解决问题。</p><p>　　可以从哈希码计算中排除派生属性（derived fields）。换句话说，如果一个属性的值可以根据参与计算的其他属性值计算出来，那么可以忽略这样的属性。您必须排除在 equals 比较中没有使用的任何属性，否则可能会违反 hashCode 约定的第二条。</p><p>　　步骤 2.b 中的乘法计算结果取决于属性的顺序，如果类中具有多个相似属性，则产生更好的散列函数。 例如，如果乘法计算从一个 String 散列函数中被省略，则所有的字符将具有相同的散列码。 之所以选择 31，因为它是一个奇数的素数。 如果它是偶数，并且乘法溢出，信息将会丢失，因为乘以 2 相当于移位。 使用素数的好处不太明显，但习惯上都是这么做的。 31 的一个很好的特性，是在一些体系结构中乘法可以被替换为移位和减法以获得更好的性能：31 * i ==（i &lt;&lt; 5） - i。 现代 JVM 可以自动进行这种优化。</p><p>　　让我们把上述办法应用到 PhoneNumber 类中：</p><pre><code>// Typical hashCode method@Overridepublic int hashCode() {    int result = Short.hashCode(areaCode);    result = 31 * result + Short.hashCode(prefix);    result = 31 * result + Short.hashCode(lineNum);    return result;}</code></pre><p>因为这个方法返回一个简单的确定性计算的结果，它的唯一的输入是 PhoneNumber 实例中的三个重要的属性，所以显然相等的 PhoneNumber 实例具有相同的哈希码。 实际上，这个方法是 PhoneNumber 的一个非常好的 hashCode 实现，与 Java 平台类库中的实现一样。 它很简单，速度相当快，并且合理地将不相同的电话号码分散到不同的哈希桶中。</p><p>　　虽然在这个项目的方法产生相当好的哈希函数，但并不是最先进的。 它们的质量与 Java 平台类库的值类型中找到的哈希函数相当，对于大多数用途来说都是足够的。 如果真的需要哈希函数而不太可能产生碰撞，请参阅 Guava 框架的的com.google.common.hash.Hashing [Guava] 方法。</p><p>　　Objects 类有一个静态方法，它接受任意数量的对象并为它们返回一个哈希码。 这个名为 hash 的方法可以让你编写一行 hashCode 方法，其质量与根据这个项目中的上面编写的方法相当。 不幸的是，它们的运行速度更慢，因为它们需要创建数组以传递可变数量的参数，以及如果任何参数是基本类型，则进行装箱和取消装箱。 这种哈希函数的风格建议仅在性能不重要的情况下使用。 以下是使用这种技术编写的 PhoneNumber 的哈希函数：</p><pre><code>// One-line hashCode method - mediocre performance@Overridepublic int hashCode() {   return Objects.hash(lineNum, prefix, areaCode);}</code></pre><p>如果一个类是不可变的，并且计算哈希码的代价很大，那么可以考虑在对象中缓存哈希码，而不是在每次请求时重新计算哈希码。 如果你认为这种类型的大多数对象将被用作哈希键，那么应该在创建实例时计算哈希码。 否则，可以选择在首次调用 hashCode 时延迟初始化（lazily initialize）哈希码。 需要注意确保类在存在延迟初始化属性的情况下保持线程安全（项目 83）。 PhoneNumber 类不适合这种情况，但只是为了展示它是如何完成的。 请注意，属性 hashCode 的初始值（在本例中为 0）不应该是通常创建的实例的哈希码：</p><pre><code>// hashCode method with lazily initialized cached hash codeprivate int hashCode; // Automatically initialized to 0@Overridepublic int hashCode() {    int result = hashCode;    if (result == 0) {        result = Short.hashCode(areaCode);        result = 31 * result + Short.hashCode(prefix);        result = 31 * result + Short.hashCode(lineNum);        hashCode = result;    }    return result;}</code></pre><p>不要试图从哈希码计算中排除重要的属性来提高性能。 由此产生的哈希函数可能运行得更快，但其质量较差可能会降低哈希表的性能，使其无法使用。 具体来说，哈希函数可能会遇到大量不同的实例，这些实例主要在你忽略的区域中有所不同。 如果发生这种情况，哈希函数将把所有这些实例映射到少许哈希码上，而应该以线性时间运行的程序将会运行平方级的时间。</p><p>　　这不仅仅是一个理论问题。 在 Java 2 之前，String 类哈希函数在整个字符串中最多使用 16 个字符，从第一个字符开始，在整个字符串中均匀地选取。 对于大量的带有层次名称的集合（如 URL），此功能正好显示了前面描述的病态行为。</p><p>　　不要为 hashCode 返回的值提供详细的规范，因此客户端不能合理地依赖它； 你可以改变它的灵活性。 Java 类库中的许多类（例如 String 和 Integer）都将 hashCode 方法返回的确切值指定为实例值的函数。 这不是一个好主意，而是一个我们不得不忍受的错误：它妨碍了在未来版本中改进哈希函数的能力。 如果未指定细节并在散列函数中发现缺陷，或者发现了更好的哈希函数，则可以在后续版本中对其进行更改。</p><p>　　总之，每次重写 equals 方法时都必须重写 hashCode 方法，否则程序将无法正常运行。你的 hashCode 方法必须遵从 Object 类指定的常规约定，并且必须执行合理的工作，将不相等的哈希码分配给不相等的实例。如果使用第 51 页的配方，这很容易实现。如条目 10 所述，AutoValue 框架为手动编写 equals 和 hashCode 方法提供了一个很好的选择，IDE 也提供了一些这样的功能。</p><h1 id="始终重写-toString-方法"><a href="#始终重写-toString-方法" class="headerlink" title="始终重写 toString 方法"></a>始终重写 toString 方法</h1><p>虽然 Object 类提供了 toString 方法的实现，但它返回的字符串通常不是你的类的用户想要看到的。 它由类名后跟一个「at」符号（@）和哈希码的无符号十六进制表示组成，例如 PhoneNumber@163b91。 toString 的通用约定要求，返回的字符串应该是「一个简洁但内容丰富的表示，对人们来说是很容易阅读的」。虽然可以认为 PhoneNumber@163b91 简洁易读，但相比于 707-867-5309，但并不是很丰富 。 toString 通用约定「建议所有的子类重写这个方法」。好的建议，的确如此！</p><p>　　虽然它并不像遵守 equals 和 hashCode 约定那样重要 (条目 10 和 11)，但是提供一个良好的 toString 实现使你的类更易于使用，并对使用此类的系统更易于调试。当对象被传递到 println、printf、字符串连接操作符或断言，或者由调试器打印时，toString 方法会自动被调用。即使你从不调用对象上的 toString，其他人也可以。例如，对对象有引用的组件可能包含在日志错误消息中对象的字符串表示。如果未能重写 toString，则消息可能是无用的。</p><p>　　如果为 PhoneNumber 提供了一个很好的 toString 方法，那么生成一个有用的诊断消息就像下面这样简单：</p><pre><code>System.out.println(&quot;Failed to connect to &quot; + phoneNumber);</code></pre><p>程序员将以这种方式生成诊断消息，不管你是否重写 toString，但是除非你这样做，否则这些消息将不会有用。 提供一个很好的 toString 方法的好处不仅包括类的实例，同样有益于包含实例引用的对象，特别是集合。 打印 map 对象时你会看到哪一个，{Jenny=PhoneNumber@163b91} 还是 {Jenny=707-867-5309}?</p><p>　　实际上，toString 方法应该返回对象中包含的所有需要关注的信息，如电话号码示例中所示。 如果对象很大或者包含不利于字符串表示的状态，这是不切实际的。 在这种情况下，toString 应该返回一个摘要，如 Manhattan residential phone directory (1487536 listings) 或线程[main，5，main]。 理想情况下，字符串应该是不言自明的（线程示例并没有遵守这点）。 如果未能将所有对象的值得关注的信息包含在字符串表示中，则会导致一个特别烦人的处罚：测试失败报告如下所示：</p><pre><code>Assertion failure: expected {abc, 123}, but was {abc, 123}.</code></pre><p>实现 toString 方法时，必须做出的一个重要决定是：在文档中指定返回值的格式。 建议你对值类进行此操作，例如电话号码或矩阵类。 指定格式的好处是它可以作为标准的，明确的，可读的对象表示。 这种表示形式可以用于输入、输出以及持久化可读性的数据对象，如 CSV 文件。 如果指定了格式，通常提供一个匹配的静态工厂或构造方法，是个好主意，所以程序员可以轻松地在对象和字符串表示之间来回转换。 Java 平台类库中的许多值类都采用了这种方法，包括 BigInteger，BigDecimal 和大部分基本类型包装类。</p><p>　　指定 toString 返回值的格式的缺点是，假设你的类被广泛使用，一旦指定了格式，就会终身使用。程序员将编写代码来解析表达式，生成它，并将其嵌入到持久数据中。如果在将来的版本中更改了格式的表示，那么会破坏他们的代码和数据，并且还会抱怨。但通过选择不指定格式，就可以保留在后续版本中添加信息或改进格式的灵活性。</p><p>　　无论是否决定指定格式，你都应该清楚地在文档中表明你的意图。如果指定了格式，则应该这样做。例如，这里有一个 toString 方法，该方法在条目 11 中使用 PhoneNumber 类：</p><pre><code>/** * Returns the string representation of this phone number. * The string consists of twelve characters whose format is * &quot;XXX-YYY-ZZZZ&quot;, where XXX is the area code, YYY is the * prefix, and ZZZZ is the line number. Each of the capital * letters represents a single decimal digit. * * If any of the three parts of this phone number is too small * to fill up its field, the field is padded with leading zeros. * For example, if the value of the line number is 123, the last * four characters of the string representation will be &quot;0123&quot;. */@Overridepublic String toString() {    return String.format(&quot;%03d-%03d-%04d&quot;,            areaCode, prefix, lineNum);}</code></pre><p>如果你决定不指定格式，那么文档注释应该是这样的：</p><pre><code>/** * Returns a brief description of this potion. The exact details * of the representation are unspecified and subject to change, * but the following may be regarded as typical: * * &quot;[Potion #9: type=love, smell=turpentine, look=india ink]&quot; */@Overridepublic String toString() { ... }</code></pre><p>在阅读了这条注释之后，那些生成依赖于格式细节的代码或持久化数据的程序员，在这种格式发生改变的时候，只能怪他们自己。</p><p>　　无论是否指定格式，都可以通过编程方式访问 toString 返回的值中包含的信息。 例如，PhoneNumber 类应该包含 areaCode, prefix, lineNum 这三个属性。 如果不这样做，就会强迫程序员需要这些信息来解析字符串。 除了降低性能和程序员做不必要的工作之外，这个过程很容易出错，如果改变格式就会中断，并导致脆弱的系统。 由于未能提供访问器，即使已指定格式可能会更改，也可以将字符串格式转换为事实上的 API。</p><p>　　在静态工具类（详见第 4 条）中编写 toString 方法是没有意义的。 你也不应该在大多数枚举类型（条目 34）中写一个 toString 方法，因为 Java 为你提供了一个非常好的方法。 但是，你应该在任何抽象类中定义 toString 方法，该类的子类共享一个公共字符串表示形式。 例如，大多数集合实现上的 toString 方法都是从抽象集合类继承的。</p><p>　　Google 的开放源代码 AutoValue 工具在条目 10 中讨论过，它为你生成一个 toString 方法，就像大多数 IDE 工具一样。 这些方法非常适合告诉你每个属性的内容，但并不是专门针对类的含义。 因此，例如，为我们的 PhoneNumber 类使用自动生成的 toString 方法是不合适的（因为电话号码具有标准的字符串表示形式），但是对于我们的 Potion 类来说，这是完全可以接受的。 也就是说，自动生成的 toString 方法比从 Object 继承的方法要好得多，它不会告诉你对象的值。</p><p>　　回顾一下，除非父类已经这样做了，否则在每个实例化的类中重写 Object 的 toString 实现。 它使得类更加舒适地使用和协助调试。 toString 方法应该以一种美观的格式返回对象的简明有用的描述。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/11.%20%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E6%97%B6%E5%90%8C%E6%97%B6%E4%B9%9F%E8%A6%81%E9%87%8D%E5%86%99hashcode%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/11.%20%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E6%97%B6%E5%90%8C%E6%97%B6%E4%B9%9F%E8%A6%81%E9%87%8D%E5%86%99hashcode%E6%96%B9%E6%B3%95</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章阅读：Methods Common to All Objects&lt;br&gt;11.重写 equals 方法时同时也要重写 hashcode 方法&lt;br&gt;每次重写 equals 方法时都必须重写 hashCode 方法，否则程序将无法正常运行。hashCode 方法必须遵从 Object 类指定的常规约定，并且必须执行合理的工作，将不相等的哈希码分配给不相等的实例。&lt;br&gt;12.始终重写 toString 方法&lt;br&gt;除非父类已经这样做了，否则在每个实例化的类中重写 Object 的 toString 实现。 它使得类更加舒适地使用和协助调试。 toString 方法应该以一种美观的格式返回对象的简明有用的描述。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记III</title>
    <link href="http://yoursite.com/2020/01/13/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0III/"/>
    <id>http://yoursite.com/2020/01/13/Git学习笔记III/</id>
    <published>2020-01-13T10:12:12.000Z</published>
    <updated>2020-01-13T10:25:57.647Z</updated>
    
    <content type="html"><![CDATA[<p>使用Git进行工程开发时需要的常见规范，常见的Git命令， Git 客户端SourceTree简介</p><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。</p><h1 id="Git的特点"><a href="#Git的特点" class="headerlink" title="Git的特点"></a>Git的特点</h1><p>Git有很多优点，其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便，但如果管理不善，分支太多会导致杂乱不堪。</p><p>Vincent Driessen提出了一个分支管理的策略，我觉得非常值得借鉴。它可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。</p><h1 id="Git分支管理策略"><a href="#Git分支管理策略" class="headerlink" title="Git分支管理策略"></a>Git分支管理策略</h1><p>主分支：应该有且只有一个主分支，所有提供给用户使用的正式上线版本都是从该主分支上发布。</p><p>开发分支：日常开发任务在develop分支上进行。<br>如果想要对外发布，就需要提交merge request，申请从develop分支merge到master中进行合并。</p><p>临时性分支：除了发布和开发，我们还需要一些临时性分支，用于 功能分支（feature）、预发布功能（release）分支、修正bug（fixbug）分支等，以及敏捷开发中的Sprint分支，在使用完成后，都需要将其快速删除，使得代码库的分支始终只会有 develop 和 master 分支。</p><h1 id="当前功能分支命名规范"><a href="#当前功能分支命名规范" class="headerlink" title="当前功能分支命名规范"></a>当前功能分支命名规范</h1><p>功能分支（feature，命名规范 feature-XXX）<br>Sprint分支（命名规范 sprint-XXX），在Sprint结束之后，合并至develop并进行预发布；<br>预发布功能分支（release）：在正式发布之前，我们需要一个预发布版本用来做测试，可以考虑将测试Lain环境中的分支都指向release分支而非develop；<br>修正bug（fixbug）分支：修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-XXX的形式。<br>根据JIRA问题创建出来的分支（jira-XXX）：当存在JIRA问题，并以此作为修改代码的依据时，可以使用这种方式的分支命名。</p><h1 id="Git-Commit信息的编写"><a href="#Git-Commit信息的编写" class="headerlink" title="Git Commit信息的编写"></a>Git Commit信息的编写</h1><p>如果有对应JIRA问题，编写格式可以直接以JIRA问题为准（这样可以在IDEA中查看代码时能够快速链接到该问题的描述）</p><pre><code>Git JIRA 提交信息JIRA-56http://jira/XXX</code></pre><p>如果没有JIRA问题，首先尝试在JIRA系统上建立问题并按照第一条原则。如果确实没有必要，则需要在提交时指定问题类型，基本的模板为：</p><pre><code>Git 普通问题提交信息&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;typefeat：新功能（feature）fix：修补bugdoc：文档（documentation）style： 代码风格或格式（不影响代码运行的变动）refactor：重构（即不是新增功能，也不是修改bug的代码变动）test：增加测试build: 构建过程或辅助工具的变动chore：其它类型提交,无关src目录以及test目scope用于说明此次提交影响的范围subject  commit 目的的简短描述。以动词开头，使用第一人称现在时，比如change，而不是changed或changes第一个字母小写结尾不加句号（。）</code></pre><h1 id="Git-标准流程"><a href="#Git-标准流程" class="headerlink" title="Git 标准流程"></a>Git 标准流程</h1><p>Git分支管理流程遵循以下几点：</p><p>developer没有任何权限能直接将codepush到develop、release和master分支。<br>developer开发feature时先建立issue之后再从develop创建相应的feature分支。<br>feature开发完毕后提交测试，测试可对此feature分支需要按照之前设计的case进行测试，并将bug录入到JIRA中。<br>上线日前1天从develop分支创建release分支命名规则遵守：release_yyyy/MM/dd<br>与产品沟通最后确认上线内容，并于涉及到的项目组沟通确认上线日配合验证测试。<br>将所有需要上线的feature分支提交merge request到release分支此时由中级或高级developer进行code review。<br>代码合并后测试进行主干的测试。确保上线前一天封版（理论上上线当天不进行代码改动）。<br>上线当上午发送上线通知邮件。</p><h1 id="代码提交规范："><a href="#代码提交规范：" class="headerlink" title="代码提交规范："></a>代码提交规范：</h1><p>首先master 拉取分支—–&gt;建立开发分支——&gt;开发完成-→合并develop 分支—-&gt;提交测试—–&gt;测试完成—-&gt;开发分支合并到master分支</p><h2 id="流程阻塞型功能提测"><a href="#流程阻塞型功能提测" class="headerlink" title="流程阻塞型功能提测"></a>流程阻塞型功能提测</h2><p>如果为后端必须零流量进行线上的回归，再开权限。</p><h1 id="提交测试："><a href="#提交测试：" class="headerlink" title="提交测试："></a>提交测试：</h1><p>项目开发完毕后，发邮件提测，提测内容如下：</p><p>背景：提测项目的背景和目的<br>修改点：代码变动和参数参数变动，以及配置文件有哪些变动<br>单元测试的覆盖率报表地址<br>有代码变动，可将git的diff结果页面的链接附上（是否建立代码的卡关流程，测试看完后，高工review确认合主分支）<br>测试或验证功能点：本次测试的重点check点，标明和强调（例如功能、兼容性、参数、代码逻辑，防止漏侧改动点）</p><h2 id="后端提测"><a href="#后端提测" class="headerlink" title="后端提测:"></a>后端提测:</h2><p>(1).需要指明哪些接口，接口的请求(新接口、老接口、内部接口)的必要参数和接口响应结果的重要业务字段，另外这些字段的重要逻辑需要指明<br>(2).接口的功能是什么<br>(3).测试的功能点是什么，需要测试做什么<br>前端和安卓测试：<br>(1).交互逻辑有哪些修改,交互的条件有哪些<br>(2).新增UI页面、前端效果有哪些<br>(3).交互完成的功能主要是什么<br>(4).主要测试的功能点是什么<br>测试范围：哪个端（pc\移动\h5）<br>自测范围和自测机型：自测功能点要详细说明（自测中验证了什么）</p><p>附上各个应用中git基本操作流程<br>个人可以根据需要，选择适合自己的工具（建议从原理入手，选择命令行）</p><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>查看当前分支信息</p><pre><code>git branch -a  （-a 表示列出所有的本地分支以及远程分支）git branch -d xxx (删除合并过的分支xxx)git branch -D xxx (强制删除分支xxx，及时xxx未被合并过)</code></pre><p>切换分支</p><pre><code>git checkout xxx (切换至存在的分支)git checkout -b yyy (以当前分支为基础，新建分支yyy，并切换至分支yyy)</code></pre><p>更改工作区内容至暂存区</p><pre><code>git add . (添加所有文件至暂存区)git add  source/to/file (添加指定文件至暂存区)git rm source/to/file (删除工作区和暂存区的指定文件)git mv source/to/file destination/to/file (移动工作区和暂存区的指定文件)</code></pre><p>提交暂存区内容至本地分支</p><pre><code>git commit -m &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot;</code></pre><p>同步本地分支至远程分支</p><pre><code>git push origin branch</code></pre><p>拉取远程代码至本地</p><pre><code>git fetchgit rebase master</code></pre><h1 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h1><pre><code>SourceTree 是 Windows 和Mac OS X 下的 Git 客户端，下载地址：https://www.sourcetreeapp.com/</code></pre><h2 id="提交代码-（git-commit-amp-push）"><a href="#提交代码-（git-commit-amp-push）" class="headerlink" title="提交代码 （git commit &amp; push）"></a>提交代码 （git commit &amp; push）</h2><p>1.提交代码前应仔细看代码变更，不提交的改动可以选择暂存或舍弃。</p><p>2.选择要提交的文件后，会显示在已暂存文件列表中。</p><p>3.填写提交信息。</p><p>4.提交（勾选立即推送可立即推送到远端）</p><h2 id="本地合并分支（git-merge）"><a href="#本地合并分支（git-merge）" class="headerlink" title="本地合并分支（git merge）"></a>本地合并分支（git merge）</h2><p>提交代码后，如果有冲突无法在远端解决，可以在本地合并，解决冲突。</p><p>假设将 feature-test 合并到 master 上，先切换到 master 分支，再右键选择合并 feature-test 到 master。</p><h2 id="贮藏-（git-stash）"><a href="#贮藏-（git-stash）" class="headerlink" title="贮藏 （git stash）"></a>贮藏 （git stash）</h2><p>贮藏是一项十分有用的功能。当你处在开发阶段，有代码没提交，却需要切换分支或临时解决其他问题时，贮藏是最好的解决办法。</p><p>贮藏可以将当前改动暂时存起来，在左侧已贮藏列表显示已储存的代码。</p><p>在解决完临时问题后，通过应用贮藏将代码变更应用到当前分支。</p><p>SourceTree 的基本操作介绍如上，更多详细操作可以参考以下文档：</p><p>官方文档：<a href="https://confluence.atlassian.com/get-started-with-sourcetree" target="_blank" rel="noopener">https://confluence.atlassian.com/get-started-with-sourcetree</a></p><p>SoureTree使用方法：<a href="https://www.jianshu.com/p/6d2717c2a3e1" target="_blank" rel="noopener">https://www.jianshu.com/p/6d2717c2a3e1</a></p><p>提交merge request之后，如果source branch没有其他用处，可在merge完直接删除掉</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Git进行工程开发时需要的常见规范，常见的Git命令， Git 客户端SourceTree简介&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Java阅读笔记V</title>
    <link href="http://yoursite.com/2020/01/06/Effective-Java%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0V/"/>
    <id>http://yoursite.com/2020/01/06/Effective-Java阅读笔记V/</id>
    <published>2020-01-06T01:46:12.000Z</published>
    <updated>2020-01-17T01:50:19.121Z</updated>
    
    <content type="html"><![CDATA[<p>第三章阅读：Methods Common to All Objects<br>09.使用 try-with-resources 语句替代 try-finally 语句<br>10.重写 equals 方法时遵守通用约定</p><p>除非必须：在很多情况下，不要重写 equals 方法，从 Object 继承的实现完全是你想要的。 如果你确实重写了 equals 方法，那么一定要比较这个类的所有重要属性，并且以保护前面 equals 约定里五个规定的方式去比较：自反性，对称性，传递性，一致性，非空性。</p><a id="more"></a><h1 id="使用-try-with-resources-语句替代-try-finally-语句"><a href="#使用-try-with-resources-语句替代-try-finally-语句" class="headerlink" title="使用 try-with-resources 语句替代 try-finally 语句"></a>使用 try-with-resources 语句替代 try-finally 语句</h1><p>从以往来看，try-finally 语句是保证资源正确关闭的最佳方式，即使是在程序抛出异常或返回的情况下：</p><pre><code>// try-finally - No longer the best way to close resources!static String firstLineOfFile(String path) throws IOException {    BufferedReader br = new BufferedReader(new FileReader(path));    try {        return br.readLine();    } finally {        br.close();    }}</code></pre><p>这可能看起来并不坏，但是当添加第二个资源时，情况会变得更糟：</p><pre><code>// try-finally is ugly when used with more than one resource!static void copy(String src, String dst) throws IOException {    InputStream in = new FileInputStream(src);    try {        OutputStream out = new FileOutputStream(dst);        try {            byte[] buf = new byte[BUFFER_SIZE];            int n;            while ((n = in.read(buf)) &gt;= 0)                out.write(buf, 0, n);        } finally {            out.close();        }    } finally {        in.close();    }}</code></pre><p>即使是用 try-finally 语句关闭资源的正确代码，如前面两个代码示例所示，也有一个微妙的缺陷。 try-with-resources 块和 finally 块中的代码都可以抛出异常。 例如，在前面的 firstLineOfFile 方法中，由于底层物理设备发生故障，对 readLine 方法的调用可能会引发异常，并且由于相同的原因，调用 close 方法可能会失败。 在这种情况下，第二个异常完全冲掉了第一个异常。 在异常堆栈跟踪中没有第一个异常的记录，这可能使实际系统中的调试非常复杂——通常这是你想要诊断问题的第一个异常。 虽然可以编写代码来抑制第二个异常，但是实际上没有人这样做，因为它太冗长了。</p><p>　　当 Java 7 引入了 try-with-resources 语句时，所有这些问题一下子都得到了解决。要使用这个构造，资源必须实现 AutoCloseable 接口，该接口由一个返回为 void 的 close 组成。Java 类库和第三方类库中的许多类和接口现在都实现或继承了 AutoCloseable 接口。如果你编写的类表示必须关闭的资源，那么这个类也应该实现 AutoCloseable 接口。</p><p>　　以下是我们的第一个使用 try-with-resources 的示例：</p><pre><code>// try-with-resources - the the best way to close resources!static String firstLineOfFile(String path) throws IOException {    try (BufferedReader br = new BufferedReader(new FileReader(path))) {       return br.readLine();    }}</code></pre><p>　以下是我们的第二个使用 try-with-resources 的示例：</p><pre><code>// try-with-resources on multiple resources - short and sweetstatic void copy(String src, String dst) throws IOException {    try (InputStream   in = new FileInputStream(src);         OutputStream out = new FileOutputStream(dst)) {        byte[] buf = new byte[BUFFER_SIZE];        int n;        while ((n = in.read(buf)) &gt;= 0)            out.write(buf, 0, n);    }}</code></pre><p>不仅 try-with-resources 版本比原始版本更精简，更好的可读性，而且它们提供了更好的诊断。 考虑 firstLineOfFile 方法。 如果调用 readLine 和（不可见）close 方法都抛出异常，则后一个异常将被抑制（suppressed），而不是前者。 事实上，为了保留你真正想看到的异常，可能会抑制多个异常。 这些抑制的异常没有被抛弃， 而是打印在堆栈跟踪中，并标注为被抑制了。 你也可以使用 getSuppressed 方法以编程方式访问它们，该方法在 Java 7 中已添加到的 Throwable 中。</p><p>　　可以在 try-with-resources 语句中添加 catch 子句，就像在常规的 try-finally 语句中一样。这允许你处理异常，而不会在另一层嵌套中污染代码。作为一个稍微有些做作的例子，这里有一个版本的 firstLineOfFile 方法，它不会抛出异常，但是如果它不能打开或读取文件，则返回默认值：</p><pre><code>// try-with-resources with a catch clausestatic String firstLineOfFile(String path, String defaultVal) {    try (BufferedReader br = new BufferedReader(           new FileReader(path))) {        return br.readLine();    } catch (IOException e) {        return defaultVal;    }}</code></pre><p>结论很明确：在处理必须关闭的资源时，使用 try-with-resources 语句替代 try-finally 语句。 生成的代码更简洁，更清晰，并且生成的异常更有用。 try-with-resources 语句在编写必须关闭资源的代码时会更容易，也不会出错，而使用 try-finally 语句实际上是不可能的。</p><h1 id="重写-equals-方法时遵守通用约定"><a href="#重写-equals-方法时遵守通用约定" class="headerlink" title="重写 equals 方法时遵守通用约定"></a>重写 equals 方法时遵守通用约定</h1><p>写在前面的读后感：这一节十分冗长，作者举例说明了尽量不要重写equals方法，如果一定要重写，那么要按照约定遵循自反性，对称性，传递性，一致性和非空性。</p><p>　虽然 Object 是一个具体的类，但它主要是为继承而设计的。它的所有非 final 方法（equals、hashCode、toString、clone 和 finalize）都有清晰的通用约定（ general contracts），因为它们被设计为被子类重写。任何类要重写这些方法时，都有义务去遵从它们的通用约定；如果不这样做，将会阻止其他依赖于约定的类 (例如 HashMap 和 HashSet) 与此类一起正常工作。</p><p>重写 equals 方法看起来很简单，但是有很多方式会导致重写出错，其结果可能是可怕的。避免此问题的最简单方法是不覆盖 equals 方法，在这种情况下，类的每个实例只与自身相等。如果满足以下任一下条件，则说明是正确的做法：</p><p>每个类的实例都是固有唯一的。 对于像 Thread 这样代表活动实体而不是值的类来说，这是正确的。 Object 提供的 equals 实现对这些类完全是正确的行为。</p><p>类不需要提供一个「逻辑相等（logical equality）」的测试功能。例如 java.util.regex.Pattern 可以重写 equals 方法检查两个是否代表完全相同的正则表达式 Pattern 实例，但是设计者并不认为客户需要或希望使用此功能。在这种情况下，从 Object 继承的 equals 实现是最合适的。</p><p>父类已经重写了 equals 方法，则父类行为完全适合于该子类。例如，大多数 Set 从 AbstractSet 继承了 equals 实现、List 从 AbstractList 继承了 equals 实现，Map 从 AbstractMap 的 Map 继承了 equals 实现。</p><p>类是私有的或包级私有的，可以确定它的 equals 方法永远不会被调用。如果你非常厌恶风险，可以重写 equals 方法，以确保不会被意外调用：</p><pre><code>@Overridepublic boolean equals(Object o) {    throw new AssertionError(); // Method is never called}</code></pre><p>什么时候需要重写 equals 方法呢？如果一个类包含一个逻辑相等（logical equality）的概念，此概念有别于对象标识（object identity），而且父类还没有重写过 equals 方法。这通常用在值类（value classes）的情况。值类只是一个表示值的类，例如 Integer 或 String 类。程序员使用 equals 方法比较值对象的引用，期望发现它们在逻辑上是否相等，而不是引用相同的对象。重写 equals 方法不仅可以满足程序员的期望，它还支持重写过 equals 的实例作为 Map 的键（key），或者 Set 里的元素，以满足预期和期望的行为。</p><p>　　一种不需要 equals 方法重写的值类是使用实例控制（instance control）（详见第 1 条）的类，以确保每个值至多存在一个对象。 枚举类型（详见第 34 条）属于这个类别。 对于这些类，逻辑相等与对象标识是一样的，所以 Object 的 equals 方法作用逻辑 equals 方法。</p><p>　　当你重写 equals 方法时，必须遵守它的通用约定。Object 的规范如下： equals 方法实现了一个等价关系（equivalence relation）。它有以下这些属性:</p><p><strong><em>自反性</em></strong>： 对于任何非空引用 x，x.equals(x) 必须返回 true。<br><strong><em>对称性</em></strong>： 对于任何非空引用 x 和 y，如果且仅当 y.equals(x) 返回 true 时 x.equals(y) 必须返回 true。<br><strong><em>传递性</em></strong>： 对于任何非空引用 x、y、z，如果 x.equals(y) 返回 true，y.equals(z) 返回 true，则 x.equals(z) 必须返回 true。<br><strong><em>一致性</em></strong>： 对于任何非空引用 x 和 y，如果在 equals 比较中使用的信息没有修改，则 x.equals(y) 的多次调用必须始终返回 true 或始终返回 false。<br><strong><em>非空性</em></strong>：<br>对于任何非空引用 x，x.equals(null) 必须返回 false。</p><p>　　除非你喜欢数学，否则这看起来有点吓人，但不要忽略它！如果一旦违反了它，很可能会发现你的程序运行异常或崩溃，并且很难确定失败的根源。套用约翰·多恩（John Donne）的说法，没有哪个类是孤立存在的。一个类的实例常常被传递给另一个类的实例。许多类，包括所有的集合类，都依赖于传递给它们遵守 equals 约定的对象。</p><p>　　既然已经意识到违反 equals 约定的危险，让我们详细地讨论一下这个约定。好消息是，表面上看，这并不是很复杂。一旦你理解了，就不难遵守这一约定。</p><p>　　那么什么是等价关系？ 笼统地说，它是一个运算符，它将一组元素划分为彼此元素相等的子集。 这些子集被称为等价类（equivalence classes）。 为了使 equals 方法有用，每个等价类中的所有元素必须从用户的角度来说是可以互换（interchangeable）的。 现在让我们依次看下这个五个要求：</p><p>　　自反性（Reflexivity）——第一个要求只是说一个对象必须与自身相等。 很难想象无意中违反了这个规定。 如果你违反了它，然后把类的实例添加到一个集合中，那么 contains 方法可能会说集合中没有包含刚添加的实例。</p><p>　　对称性（Symmetry）——第二个要求是，任何两个对象必须在是否相等的问题上达成一致。与第一个要求不同的是，我们不难想象在无意中违反了这一要求。例如，考虑下面的类，它实现了不区分大小写的字符串。字符串被 toString 保存，但在 equals 比较中被忽略：</p><pre><code>import java.util.Objects;public final class CaseInsensitiveString {    private final String s;    public CaseInsensitiveString(String s){        this.s = Objects.requireNonNull(s);    }    // Broken - violates symmetry!    @Override    public boolean equals(Object o){        if(o instanceof CaseInsensitiveString){            return s.equalsIgnoreCase(                    ((CaseInsensitiveString)o).s);        }        if(o instanceof String){// One-way interoperability!            return s.equalsIgnoreCase((String)o);        }        return false;    }}</code></pre><p>上面CaseInsensitiveString（大小写不敏感）类中的 equals 试图与正常的字符串进行操作，假设我们有一个不区分大小写的字符串和一个正常的字符串：</p><pre><code>CaseInsensitiveString cis = new CaseInsensitiveString(&quot;Polish&quot;);String s = &quot;polish&quot;;System.out.println(cis.equals(s)); // trueSystem.out.println(s.equals(cis)); // false</code></pre><p>正如所料，cis.equals(s) 返回 true。 问题是，尽管 CaseInsensitiveString 类中的 equals 方法知道正常字符串，但 String 类中的 equals 方法却忽略了不区分大小写的字符串。 因此，s.equals(cis) 返回 false，明显违反对称性。 假设把一个不区分大小写的字符串放入一个集合中：</p><pre><code>List&lt;CaseInsensitiveString&gt; list = new ArrayList&lt;&gt;();list.add(cis);</code></pre><p>list.contains(s) 返回了什么？谁知道呢？在当前的 OpenJDK 实现中，它会返回 false，但这只是一个实现构件。在另一个实现中，它可以很容易地返回 true 或抛出运行时异常。一旦违反了 equals 约定，就不知道其他对象在面对你的对象时会如何表现了。</p><p>　　要消除这个问题，只需删除 equals 方法中与 String 类相互操作的恶意尝试。这样做之后，可以将该方法重构为单个返回语句:</p><pre><code>@Overridepublic boolean equals(Object o) {    return o instanceof CaseInsensitiveString &amp;&amp;            ((CaseInsensitiveString) o).s.equalsIgnoreCase(s);}</code></pre><p>传递性（Transitivity）—— equals 约定的第三个要求是，如果第一个对象等于第二个对象，第二个对象等于第三个对象，那么第一个对象必须等于第三个对象。同样，也不难想象，无意中违反了这一要求。考虑子类的情况， 将新值组件（value component）添加到其父类中。换句话说，子类添加了一个信息，它影响了 equals 方法比较。让我们从一个简单不可变的二维整数类型 Point 类开始：</p><pre><code>public class Point {    private final int x;    private final int y;    public Point(int x, int y) {        this.x = x;        this.y = y;    }    @Override    public boolean equals(Object o) {        if (!(o instanceof Point))            return false;        Point p = (Point) o;        return p.x == x &amp;&amp; p.y == y;    }    ...  // Remainder omitted}</code></pre><p>假设想继承这个类，将表示颜色的 Color 类添加到 Point 类中：</p><pre><code>public class ColorPoint extends Point {    private final Color color;    public ColorPoint(int x, int y, Color color) {        super(x, y);        this.color = color;    }    ...  // Remainder omitted}</code></pre><p>equals 方法应该是什么样子？如果完全忽略，则实现是从 Point 类上继承的，颜色信息在 equals 方法比较中被忽略。虽然这并不违反 equals 约定，但这显然是不可接受的。假设你写了一个 equals 方法，它只在它的参数是另一个具有相同位置和颜色的 ColorPoint 实例时返回 true：</p><pre><code>// Broken - violates symmetry!@Overridepublic boolean equals(Object o) {    if (!(o instanceof ColorPoint))        return false;    return super.equals(o) &amp;&amp; ((ColorPoint) o).color == color;}</code></pre><p>当你比较 Point 对象和 ColorPoint 对象时，可以会得到不同的结果，反之亦然。前者的比较忽略了颜色属性，而后者的比较会一直返回 false，因为参数的类型是错误的。为了让问题更加具体，我们创建一个 Point 对象和 ColorPoint 对象：</p><pre><code>Point p = new Point(1, 2);ColorPoint cp = new ColorPoint(1, 2, Color.RED);</code></pre><p>　　p.equals(cp) 返回 true，但是 cp.equals(p) 返回 false。你可能想使用 ColorPoint.equals 通过混合比较的方式来解决这个问题。</p><pre><code>@Overridepublic boolean equals(Object o) {if (!(o instanceof Point))    return false;// If o is a normal Point, do a color-blind comparisonif (!(o instanceof ColorPoint))    return o.equals(this);// o is a ColorPoint; do a full comparisonreturn super.equals(o) &amp;&amp; ((ColorPoint) o).color == color;}</code></pre><p>这种方法确实提供了对称性，但是丧失了传递性：</p><pre><code>ColorPoint p1 = new ColorPoint(1, 2, Color.RED);Point p2 = new Point(1, 2);ColorPoint p3 = new ColorPoint(1, 2, Color.BLUE);</code></pre><p>现在，p1.equals(p2) 和 p2.equals(p3) 返回了 true，但是 p1.equals(p3) 却返回了 false，很明显违背了传递性的要求。前两个比较都是不考虑颜色信息的，而第三个比较时却包含颜色信息。</p><p>　　此外，这种方法可能导致无限递归：假设有两个 Point 的子类，比如 ColorPoint 和 SmellPoint，每个都有这种 equals 方法。 然后调用 myColorPoint.equals(mySmellPoint) 将抛出一个 StackOverflowError 异常。</p><p>　　那么解决方案是什么？ 事实证明，这是面向对象语言中关于等价关系的一个基本问题。 除非您愿意放弃面向对象抽象的好处，否则无法继承可实例化的类，并在保留 equals 约定的同时添加一个值组件。</p><p>　　你可能听说过，可以继承一个可实例化的类并添加一个值组件，同时通过在 equals 方法中使用一个 getClass 测试代替 instanceof 测试来保留 equals 约定：</p><pre><code>@Overridepublic boolean equals(Object o) {    if (o == null || o.getClass() != getClass())        return false;    Point p = (Point) o;    return p.x == x &amp;&amp; p.y == y;}</code></pre><p>　只有当对象具有相同的实现类时，才会产生相同的效果。这看起来可能不是那么糟糕，但是结果是不可接受的:一个 Point 类子类的实例仍然是一个 Point 的实例，它仍然需要作为一个 Point 来运行，但是如果你采用这个方法，就会失败！假设我们要写一个方法来判断一个 Point 对象是否在 unitCircle 集合中。我们可以这样做：</p><pre><code>private static final Set&lt;Point&gt; unitCircle = Set.of(        new Point( 1,  0), new Point( 0,  1),        new Point(-1,  0), new Point( 0, -1));public static boolean onUnitCircle(Point p) {    return unitCircle.contains(p);}</code></pre><p>　虽然这可能不是实现功能的最快方法，但它可以正常工作。假设以一种不添加值组件的简单方式继承 Point 类，比如让它的构造方法跟踪记录创建了多少实例：</p><pre><code>public class CounterPoint extends Point {    private static final AtomicInteger counter =            new AtomicInteger();    public CounterPoint(int x, int y) {        super(x, y);        counter.incrementAndGet();    }    public static int numberCreated() {        return counter.get();    }}</code></pre><p>里氏替代原则（Liskov substitution principle）指出，任何类型的重要属性都应该适用于所有的子类型，因此任何为这种类型编写的方法都应该在其子类上同样适用。 这是我们之前声明的一个正式陈述，即 Point 的子类（如 CounterPoint）仍然是一个 Point，必须作为一个 Point 类来看待。 但是，假设我们将一个 CounterPoint 对象传递给 onUnitCircle 方法。 如果 Point 类使用基于 getClass 的 equals 方法，则无论 CounterPoint 实例的 x 和 y 坐标如何，onUnitCircle 方法都将返回 false。 这是因为大多数集合（包括 onUnitCircle 方法使用的 HashSet）都使用 equals 方法来测试是否包含元素，并且 CounterPoint 实例并不等于任何 Point 实例。 但是，如果在 Point 上使用了适当的基于 instanceof 的 equals 方法，则在使用 CounterPoint 实例呈现时，同样的 onUnitCircle 方法可以正常工作。</p><p>　　虽然没有令人满意的方法来继承一个可实例化的类并添加一个值组件，但是有一个很好的变通方法：按照条目 18 的建议，“优先使用组合而不是继承”。取代继承 Point 类的 ColorPoint 类，可以在 ColorPoint 类中定义一个私有 Point 属性，和一个公共的视图（view）（详见第 6 条）方法，用来返回具有相同位置的 ColorPoint 对象。</p><pre><code>// Adds a value component without violating the equals contractpublic class ColorPoint {    private final Point point;    private final Color color;    public ColorPoint(int x, int y, Color color) {        point = new Point(x, y);        this.color = Objects.requireNonNull(color);    }    /**     * Returns the point-view of this color point.     */    public Point asPoint() {        return point;    }    @Override    public boolean equals(Object o) {        if (!(o instanceof ColorPoint))            return false;        ColorPoint cp = (ColorPoint) o;        return cp.point.equals(point) &amp;&amp; cp.color.equals(color);    }    ...    // Remainder omitted}</code></pre><p>Java 平台类库中有一些类可以继承可实例化的类并添加一个值组件。 例如，java.sql.Timestamp 继承了 java.util.Date 并添加了一个 nanoseconds 字段。 Timestamp 的等价 equals 确实违反了对称性，并且如果 Timestamp 和 Date 对象在同一个集合中使用，或者以其他方式混合使用，则可能导致不稳定的行为。 Timestamp 类有一个免责声明，告诫程序员不要混用 Timestamp 和 Date。 虽然只要将它们分开使用就不会遇到麻烦，但没有什么可以阻止你将它们混合在一起，并且由此产生的错误可能很难调试。 Timestamp 类的这种行为是一个错误，不应该被仿效。</p><p>你可以将值组件添加到抽象类的子类中，而不会违反 equals 约定。这对于通过遵循第 23 个条目中“优先考虑类层级（class hierarchies）来代替标记类（tagged classes）”中的建议而获得的类层级，是非常重要的。例如，可以有一个没有值组件的抽象类 Shape，子类 Circle 有一个 radius 属性，另一个子类 Rectangle 包含 length 和 width 属性 。 只要不直接创建父类实例，就不会出现前面所示的问题。</p><p>　　一致性（Consistent）——equals 约定的第四个要求是，如果两个对象是相等的，除非一个（或两个）对象被修改了， 那么它们必须始终保持相等。 换句话说，可变对象可以在不同时期可以与不同的对象相等，而不可变对象则不会。 当你写一个类时，要认真思考它是否应该设计为不可变的（详见第 17 条）。 如果你认为应该这样做，那么确保你的 equals 方法强制执行这样的限制：相等的对象永远相等，不相等的对象永远都不会相等。</p><p>　　不管一个类是不是不可变的，都不要写一个依赖于不可靠资源的 equals 方法。 如果违反这一禁令，满足一致性要求是非常困难的。 例如，java.net.URL 类中的 equals 方法依赖于与 URL 关联的主机的 IP 地址的比较。 将主机名转换为 IP 地址可能需要访问网络，并且不能保证随着时间的推移会产生相同的结果。 这可能会导致 URL 类的 equals 方法违反 equals 约定，并在实践中造成问题。 URL 类的 equals 方法的行为是一个很大的错误，不应该被效仿。 不幸的是，由于兼容性的要求，它不能改变。 为了避免这种问题，equals 方法应该只对内存驻留对象执行确定性计算。</p><p>　　非空性（Non-nullity）——最后 equals 约定的要求没有官方的名称，所以我冒昧地称之为“非空性”。意思是说说所有的对象都必须不等于 null。虽然很难想象在调用 o.equals(null) 的响应中意外地返回 true，但不难想象不小心抛出 NullPointerException 异常的情况。通用的约定禁止抛出这样的异常。许多类中的 equals 方法都会明确阻止对象为 null 的情况：</p><pre><code>@Overridepublic boolean equals(Object o) {    if (o == null)        return false;    ...}</code></pre><p>　这个判断是不必要的。 为了测试它的参数是否相等，equals 方法必须首先将其参数转换为合适类型，以便调用访问器或允许访问的属性。 在执行类型转换之前，该方法必须使用 instanceof 运算符来检查其参数是否是正确的类型：</p><pre><code>@Overridepublic boolean equals(Object o) {    if (!(o instanceof MyType))        return false;    MyType mt = (MyType) o;    ...}</code></pre><p>如果此类型检查漏掉，并且 equals 方法传递了错误类型的参数，那么 equals 方法将抛出 ClassCastException 异常，这违反了 equals 约定。 但是，如果第一个操作数为 null，则指定 instanceof 运算符返回 false，而不管第二个操作数中出现何种类型[JLS，15.20.2]。 因此，如果传入 null，类型检查将返回 false，因此不需要 明确的 null 检查。</p><p>划重点：<br>　　<strong>* 综合起来，以下是编写高质量 equals 方法的配方（recipe）：*</strong></p><p>1.使用 == 运算符检查参数是否为该对象的引用。如果是，返回 true。这只是一种性能优化，但是如果这种比较可能很昂贵的话，那就值得去做。</p><p>2.使用 instanceof 运算符来检查参数是否具有正确的类型。 如果不是，则返回 false。 通常，正确的类型是 equals 方法所在的那个类。 有时候，改类实现了一些接口。 如果类实现了一个接口，该接口可以改进 equals 约定以允许实现接口的类进行比较，那么使用接口。 集合接口（如 Set，List，Map 和 Map.Entry）具有此特性。</p><p>3.参数转换为正确的类型。因为转换操作在 instanceof 中已经处理过，所以它肯定会成功。</p><p>4.对于类中的每个「重要」的属性，请检查该参数属性是否与该对象对应的属性相匹配。如果所有这些测试成功，返回 true，否则返回 false。如果步骤 2 中的类型是一个接口，那么必须通过接口方法访问参数的属性;如果类型是类，则可以直接访问属性，这取决于属性的访问权限。</p><p>　　对于类型为非 float 或 double 的基本类型，使用 == 运算符进行比较；对于对象引用属性，递归地调用 equals 方法；对于 float 基本类型的属性，使用静态 Float.compare(float, float) 方法；对于 double 基本类型的属性，使用 Double.compare(double, double) 方法。由于存在 Float.NaN，-0.0f 和类似的 double 类型的值，所以需要对 float 和 double 属性进行特殊的处理；有关详细信息，请参阅 JLS 15.21.1 或 Float.equals 方法的详细文档。 虽然你可以使用静态方法 Float.equals 和 Double.equals 方法对 float 和 double 基本类型的属性进行比较，这会导致每次比较时发生自动装箱，引发非常差的性能。 对于数组属性，将这些准则应用于每个元素。 如果数组属性中的每个元素都很重要，请使用其中一个重载的 Arrays.equals 方法。</p><p>　　某些对象引用的属性可能合法地包含 null。 为避免出现 NullPointerException 异常，请使用静态方法 Objects.equals(Object, Object) 检查这些属性是否相等。</p><p>　　对于一些类，例如上的 CaseInsensitiveString 类，属性比较相对于简单的相等性测试要复杂得多。在这种情况下，你想要保存属性的一个规范形式（canonical form），这样 equals 方法就可以基于这个规范形式去做开销很小的精确比较，来取代开销很大的非标准比较。这种方式其实最适合不可变类（详见第 17 条）。一旦对象发生改变，一定要确保把对应的规范形式更新到最新。</p><p>　　equals 方法的性能可能受到属性比较顺序的影响。 为了获得最佳性能，你应该首先比较最可能不同的属性，开销比较小的属性，或者最好是两者都满足（derived fields）。 你不要比较不属于对象逻辑状态的属性，例如用于同步操作的 lock 属性。 不需要比较可以从“重要属性”计算出来的派生属性，但是这样做可以提高 equals 方法的性能。 如果派生属性相当于对整个对象的摘要描述，比较这个属性将节省在比较失败时再去比较实际数据的开销。 例如，假设有一个 Polygon 类，并缓存该区域。 如果两个多边形的面积不相等，则不必费心比较它们的边和顶点。</p><p>　　当你完成编写完 equals 方法时，问你自己三个问题：它是对称的吗?它是传递吗?它是一致的吗?除此而外，编写单元测试加以排查，除非使用 AutoValue 框架（第 49 页）来生成 equals 方法，在这种情况下可以安全地省略测试。如果持有的属性失败，找出原因，并相应地修改 equals 方法。当然，equals 方法也必须满足其他两个属性 (自反性和非空性)，但这两个属性通常都会满足。</p><p>　　在下面这个简单的 PhoneNumber 类中展示了根据之前的配方构建的 equals 方法：</p><pre><code>public final class PhoneNumber {    private final short areaCode, prefix, lineNum;    public PhoneNumber(int areaCode, int prefix, int lineNum) {        this.areaCode = rangeCheck(areaCode, 999, &quot;area code&quot;);        this.prefix = rangeCheck(prefix, 999, &quot;prefix&quot;);        this.lineNum = rangeCheck(lineNum, 9999, &quot;line num&quot;);    }    private static short rangeCheck(int val, int max, String arg) {        if (val &lt; 0 || val &gt; max)            throw new IllegalArgumentException(arg + &quot;: &quot; + val);        return (short) val;    }    @Override    public boolean equals(Object o) {        if (o == this)            return true;        if (!(o instanceof PhoneNumber))            return false;        PhoneNumber pn = (PhoneNumber) o;        return pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix                &amp;&amp; pn.areaCode == areaCode;    }    ... // Remainder omitted}</code></pre><p>以下是一些最后提醒：</p><p>当重写 equals 方法时，同时也要重写 hashCode 方法（详见第 11 条）。<br>不要让 equals 方法试图太聪明。 如果只是简单地测试用于相等的属性，那么要遵守 equals 约定并不困难。如果你在寻找相等方面过于激进，那么很容易陷入麻烦。一般来说，考虑到任何形式的别名通常是一个坏主意。例如，File 类不应该试图将引用的符号链接等同于同一文件对象。幸好 File 类并没这么做。<br>在 equal 时方法声明中，不要将参数 Object 替换成其他类型。 对于程序员来说，编写一个看起来像这样的 equals 方法并不少见，然后花上几个小时苦苦思索为什么它不能正常工作：</p><pre><code>// Broken - parameter type must be Object!public boolean equals(MyClass o) {       …}</code></pre><p>　问题在于这个方法并没有重写 Object.equals 方法，它的参数是 Object 类型的，这样写只是重载了 equals 方法（详见第 52 条）。 即使除了正常的方法之外，提供这种“强类型”的 equals 方法也是不可接受的，因为它可能会导致子类中的 Override 注解产生误报，提供不安全的错觉。 在这里，使用 Override 注解会阻止你犯这个错误 （详见第 40 条）。这个 equals 方法不会编译，错误消息会告诉你到底错在哪里：</p><p>编写和测试 equals（和 hashCode）方法很繁琐，生的代码也很普通。替代手动编写和测试这些方法的优雅的手段是，使用谷歌 AutoValue 开源框架，该框架自动为你生成这些方法，只需在类上添加一个注解即可。在大多数情况下，AutoValue 框架生成的方法与你自己编写的方法本质上是相同的。</p><p>　　很多 IDE（例如 Eclipse，NetBeans，IntelliJ IDEA 等）也有生成 equals 和 hashCode 方法的功能，但是生成的源代码比使用 AutoValue 框架的代码更冗长、可读性更差，不会自动跟踪类中的更改，因此需要进行测试。这就是说，使用 IDE 工具生成 equals(和 hashCode) 方法通常比手动编写它们更可取，因为 IDE 工具不会犯粗心大意的错误，而人类则会。</p><p>　　总之，除非必须：在很多情况下，不要重写 equals 方法，从 Object 继承的实现完全是你想要的。 如果你确实重写了 equals 方法，那么一定要比较这个类的所有重要属性，并且以保护前面 equals 约定里五个规定的方式去比较。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/10.%20%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E6%97%B6%E9%81%B5%E5%AE%88%E9%80%9A%E7%94%A8%E7%BA%A6%E5%AE%9A" target="_blank" rel="noopener">http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/10.%20%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E6%97%B6%E9%81%B5%E5%AE%88%E9%80%9A%E7%94%A8%E7%BA%A6%E5%AE%9A</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章阅读：Methods Common to All Objects&lt;br&gt;09.使用 try-with-resources 语句替代 try-finally 语句&lt;br&gt;10.重写 equals 方法时遵守通用约定&lt;/p&gt;
&lt;p&gt;除非必须：在很多情况下，不要重写 equals 方法，从 Object 继承的实现完全是你想要的。 如果你确实重写了 equals 方法，那么一定要比较这个类的所有重要属性，并且以保护前面 equals 约定里五个规定的方式去比较：自反性，对称性，传递性，一致性，非空性。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo标签与md文件冲突问题解决</title>
    <link href="http://yoursite.com/2020/01/03/Hexo%E6%A0%87%E7%AD%BE%E4%B8%8Emd%E6%96%87%E4%BB%B6%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2020/01/03/Hexo标签与md文件冲突问题解决/</id>
    <published>2020-01-03T10:23:12.000Z</published>
    <updated>2020-01-15T07:19:44.739Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo标签与md文件冲突问题解决</p><a id="more"></a><p>今天使用 Github+Hexo 搭建的博客写文章时遇到一个 Bug，查阅资料解决之后，发现很多人都遇到过由于 nunjucks 模板标签导致 MD 文件解析报错的问题，于是记录一下这个问题的解决方法。</p><h1 id="报错及原因"><a href="#报错及原因" class="headerlink" title="报错及原因"></a>报错及原因</h1><p>  今天使用 hexo generate 生成文章时，出现了如下报错：</p><pre><code>INFO  Start processingFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) [Line 17, Column 30]  unexpected token: }}    at Object._prettifyError</code></pre><p>出现上述情况的原因是 Markdown 文件中内容含有的双大括号 标签与 nunjucks 模板引擎的标签发生了冲突。双大括号等这些标签都是模板引擎的占位标签，如果 MarkDown 文件中包含这些标签，且不被 ``` 代码块包裹，那么解析时就会把 MD 文件中的标签动态解析了，于是导致 MD 文件解析时报错。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="修改-Markdown-文件"><a href="#修改-Markdown-文件" class="headerlink" title="修改 Markdown 文件"></a>修改 Markdown 文件</h2><p>将含有双大括号的内容首尾添加如下标签进行处理：</p><pre><code>{% raw %}    {{ 双大括号内包裹的内容 }}    {% endraw %}</code></pre><p>用这个标签虽然可以解决问题，但之后再遇到类似的情况每次都需要对 MarkDown 文件进行修改。下面介绍一种更便捷的方法。</p><h2 id="修改-nunjucks-模块源代码"><a href="#修改-nunjucks-模块源代码" class="headerlink" title="修改 nunjucks 模块源代码"></a>修改 nunjucks 模块源代码</h2><p>我们还可以直接在 nunjucks 模块上修改源代码，更改有冲突的渲染标签。<br>首先打开这个文件，路径如下：<br>    node_modules/nunjucks/src/lexer.js<br>找到下述两行代码：</p><pre><code>var VARIABLE_START = &apos;{{';    var VARIABLE_END = '}}&apos;;</code></pre><p>将其修改为：</p><pre><code>var VARIABLE_START = &apos;{$&apos;;var VARIABLE_END = &apos;$}&apos;;</code></pre><p>将有冲突的模板引擎的占位符更改为其他字符，进行模板解析时就不会与 MarkDown 的内容发生冲突了，且这种方法对所有 MarkDown 文件都是有效的，一劳永逸。<br>类似的，如果出现类似符号的解析错误时，也可以根据情况将其更改为其他占位符（自定义）。</p><h2 id="搜索、RSS-插件同步修改"><a href="#搜索、RSS-插件同步修改" class="headerlink" title="搜索、RSS 插件同步修改"></a>搜索、RSS 插件同步修改</h2><p>若博客使用 hexo-generator-search 或 hexo-generator-feed 等其他依赖于 nunjucks 模板的插件，那么这些插件的模板处理标签也需要进行同步修改。以搜索插件为例，打开如下路径的文件：<br>node_modules/hexo-generator-search/templates/search.xml<br>根据之前修改的 nunjucks 的内容，将此文件的  也更改为 {$ 和 $} 即可。</p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>如果在项目下执行 npm install 更新 nunjucks 模板时，那么之前更改的内容会被还原，需要重新对有冲突的符号进行更改。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】<a href="https://www.jianshu.com/p/6032a1a2dc25" target="_blank" rel="noopener">https://www.jianshu.com/p/6032a1a2dc25</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo标签与md文件冲突问题解决&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java编程思想-第二十三章阅读笔记</title>
    <link href="http://yoursite.com/2020/01/03/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/03/Java编程思想-第二十三章阅读笔记/</id>
    <published>2020-01-03T08:12:12.000Z</published>
    <updated>2020-01-03T07:51:20.308Z</updated>
    
    <content type="html"><![CDATA[<p>第二十三章 注解</p><a id="more"></a><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>【1】<a href="https://lingcoder.github.io/OnJava8/#/book/23-Annotations?id=%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95" target="_blank" rel="noopener">https://lingcoder.github.io/OnJava8/#/book/23-Annotations?id=%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二十三章 注解&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java开发中的易错点</title>
    <link href="http://yoursite.com/2020/01/03/Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/"/>
    <id>http://yoursite.com/2020/01/03/Java开发中的易错点/</id>
    <published>2020-01-03T08:11:12.000Z</published>
    <updated>2020-01-15T07:23:28.776Z</updated>
    
    <content type="html"><![CDATA[<p>Java开发中的易错点</p><a id="more"></a><h1 id="避免非空判断仅判断是否为empty"><a href="#避免非空判断仅判断是否为empty" class="headerlink" title="避免非空判断仅判断是否为empty"></a>避免非空判断仅判断是否为empty</h1><p>反例：</p><pre><code>public  static  void  main(String[] args){    Map data=new HashMap();    data=null;    if(data.isEmpty()){        return;    }}</code></pre><p>只判断data是否为isEmpty，但当数据为null时会报空指针异常</p><pre><code>Exception in thread &quot;main&quot; java.lang.NullPointerException    at Application.main(Application.java:454)</code></pre><h1 id="log抛出要有详情和具体说明"><a href="#log抛出要有详情和具体说明" class="headerlink" title="log抛出要有详情和具体说明"></a>log抛出要有详情和具体说明</h1><p>反例：</p><pre><code>try {  param = JSONObject.parseObject(methodParam,method.getParameterTypes()[0]);} catch (Exception e){  throw new ParamException(e.getMessage());}</code></pre><p>信息需要详细具体，参见<br>正例：</p><pre><code>try {  ...} catch (IOException e){  logger.error(&quot;....Failed&quot;,e);  return null;}</code></pre><h1 id="配置文件尽量在配置文件定义，代码中不要配置"><a href="#配置文件尽量在配置文件定义，代码中不要配置" class="headerlink" title="配置文件尽量在配置文件定义，代码中不要配置"></a>配置文件尽量在配置文件定义，代码中不要配置</h1><p>反例：</p><p>  String ip=”127.0.0.1”;<br>  Socket socket=new Socket(ip,6667);</p><p>正例：</p><p>  String ip= System.getProperty(“myapplication.ip”);<br>  Socket socket=new Socket(ip,6667);</p><h1 id="精度转换"><a href="#精度转换" class="headerlink" title="精度转换"></a>精度转换</h1><p>BigDecimal转double，需先转换为string再 BigDecimal（String s），再使用BigDecimal.valueOf()方法，避免精度丢失</p><p>BigDecimal(double val)构造，用double当参数来构造一个BigDecimal对象。<br>但是BigDecimal(0.1)实际上等于0.1000000000000000055511151231257827021181583404541015625，因为准确的来说0.1本身不能算是一个double（其实0.1不能代表任何一个定长二进制分数）。</p><p>BigDecimal(String val)构造是靠谱的，BigDecimal(“0.1”)就是等于0.1，推荐大家用这个构造。</p><p>如果非要用一个double变量来构造一个BigDecimal，请使用静态方法valueOf(double)，这个方法跟new Decimal(Double.toString(double))效果是一样的。</p><pre><code>public static void doubleToBigDecimal(){    float f=0.1f;    BigDecimal decimal1=new BigDecimal(f);    System.out.println(decimal1);    double d=0.1;    BigDecimal decimal2=new BigDecimal(d);    System.out.println(decimal2);    BigDecimal decimal3=new BigDecimal(Double.toString(d));    System.out.println(decimal3);    BigDecimal decimal4=BigDecimal.valueOf(d);    System.out.println(decimal4);}</code></pre><p>输出结果：</p><pre><code>0.1000000014901161193847656250.10000000000000000555111512312578270211815834045410156250.10.1</code></pre><h1 id="Map、Set、list初始化"><a href="#Map、Set、list初始化" class="headerlink" title="Map、Set、list初始化"></a>Map、Set、list初始化</h1><pre><code>Map source = new HashMap(){{ // Noncompliant        put("firstName", "John");        put("lastName", "Smith");    }};</code></pre><p>上述方式潜在问题：</p><p>看起来优雅了不少，一步到位。问题来了，这里的双大括号到底什么意思，什么用法呢？<br>双大括号,用来初始化，使代码简洁易读。<br>第一层括弧实际是定义了一个匿名内部类 (Anonymous Inner Class)，第二层括弧实际上是一个实例初始化块 (instance initializer block)，这个块在内部匿名类构造时被执行。</p><p>1.此种方式是匿名内部类的声明方式，所以引用中持有着外部类的引用。所以当时串行化这个集合时外部类也会被不知不觉的串行化，当外部类没有实现serialize接口时，就会报错。</p><p>2.上例中，其实是声明了一个继承自HashMap的子类。然而有些串行化方法，例如要通过Gson串行化为json，或者要串行化为xml时，类库中提供的方式，是无法串行化Hashset或者HashMap的子类的，从而导致串行化失败。<br>解决办法：重新初始化为一个HashMap对象：<br>new HashMap(map);<br>这样就可以正常初始化了。</p><pre><code>Map source = new HashMap() // compliantsource.put(&quot;firstName&quot;, &quot;John&quot;);source.put(&quot;lastName&quot;, &quot;Smith&quot;);</code></pre><h1 id="null值时刻注意非空判断"><a href="#null值时刻注意非空判断" class="headerlink" title="null值时刻注意非空判断"></a>null值时刻注意非空判断</h1><p>反例：</p><pre><code>TreeMap&lt;String,String&gt; paramTreeMap=convertMapToTreeMap(paramMap);try{  .....} catch (Exception e){  throw new FailException(&quot; .... param=&quot;+ paramMap.toString() e);}</code></pre><p>paramMap.toString()这里没有考虑为null的情况</p><h1 id="文件数据流、zip流、字节流等一定要谨记在finally关闭数据流"><a href="#文件数据流、zip流、字节流等一定要谨记在finally关闭数据流" class="headerlink" title="文件数据流、zip流、字节流等一定要谨记在finally关闭数据流"></a>文件数据流、zip流、字节流等一定要谨记在finally关闭数据流</h1><p>反例1:</p><pre><code>private void readFile() throw IOException{  Path path=Paths.get(this.fileName);  BufferedReader reader=Files.newBufferedReader(path,this.charset);  reader.close();   //Noncompliant}</code></pre><p>反例2:</p><pre><code>private void doSomething(){  OutputStream stream=null;  try {    for(String property:propertyList){      stream = new FileOutputStream(&quot;file.txt&quot;); //Noncompliant      // ...    }  } catch (Exception e){    //...  } finally{    stream.close(); //Multiple streams were opened. Only the last is closed.  }}</code></pre><h1 id="返回值尽量不要进行复杂的条件判断，条件和结果尽量清楚明了"><a href="#返回值尽量不要进行复杂的条件判断，条件和结果尽量清楚明了" class="headerlink" title="返回值尽量不要进行复杂的条件判断，条件和结果尽量清楚明了"></a>返回值尽量不要进行复杂的条件判断，条件和结果尽量清楚明了</h1><h1 id="把数组转成ArrayList"><a href="#把数组转成ArrayList" class="headerlink" title="把数组转成ArrayList"></a>把数组转成ArrayList</h1><p>为了将数组转换为ArrayList，开发者经常会这样做：</p><pre><code>List list = Arrays.asList(arr);</code></pre><p>使用Arrays.asList()方法可以得到一个ArrayList，但是得到这个ArrayList其实是定义在Arrays类中的一个私有的静态内部类。这个类虽然和java.util.ArrayList同名，但是并不是同一个类。java.util.Arrays.ArrayList类中实现了set(), get(), contains()等方法，但是并没有定义向其中增加元素的方法。也就是说通过Arrays.asList()得到的ArrayList的大小是固定的。</p><p>如果在开发过程中，想得到一个真正的ArrayList对象（java.util.ArrayList的实例），可以通过以下方式：</p><pre><code>ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;(Arrays.asList(arr));</code></pre><p>java.util.ArrayList中包含一个可以接受集合类型参数的构造函数。因为java.util.Arrays.ArrayList这个内部类继承了AbstractList类，所以，该类也是Collection的子类。</p><h1 id="判断一个数组是否包含某个值"><a href="#判断一个数组是否包含某个值" class="headerlink" title="判断一个数组是否包含某个值"></a>判断一个数组是否包含某个值</h1><p>在判断一个数组中是否包含某个值的时候，开发者经常这样做：</p><pre><code>Set&lt;String&gt; set = new HashSet&lt;String&gt;(Arrays.asList(arr));return set.contains(targetValue);</code></pre><p>在《在Java中如何高效的判断数组中是否包含某个元素》[2]中深入分析过,以上方式虽然可以实现功能，但是效率却比较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。<br>在判断一个数组是否包含某个值的时候，推荐使用for循环遍历的形式或者使用Apache Commons类库中提供的ArrayUtils类的contains方法。</p><h1 id="在循环中删除列表中的元素"><a href="#在循环中删除列表中的元素" class="headerlink" title="在循环中删除列表中的元素"></a>在循环中删除列表中的元素</h1><p>在讨论这个问题之前，先考虑以下代码的输出结果：</p><pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;));for(int i=0;i&lt;list.size();i++){list.remove(i);}System.out.println(list);</code></pre><p>输出结果：</p><pre><code>[b,d]</code></pre><p>以上代码的目的是想遍历删除list中所有元素，但是结果却没有成功。原因是忽略了一个关键的问题：当一个元素被删除时，列表的大小缩小并且下标也会随之变化，所以当你想要在一个循环中用下标删除多个元素的时候，它并不会正常的生效。</p><p>也有些人知道以上代码的问题就由于数组下标变换引起的。所以，他们想到使用增强for循环的形式：</p><pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;));for(String s:list){    if(s.equals(&quot;a&quot;)){        list.remove(s);    }}</code></pre><p>但是，很不幸的是，以上代码会抛出ConcurrentModificationException，有趣的是，如果在remove操作后增加一个break，代码就不会报错：</p><pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;));for(String s:list){    if(s.equals(&quot;a&quot;)){        list.remove(s);        break;    }}</code></pre><p>在《Java中的fail-fast机制》[3]一文中，深入分析了几种在遍历数组的同时删除其中元素的方法以及各种方法存在的问题。其中就介绍了上面的代码出错的原因。<br>迭代器（Iterator）是工作在一个独立的线程中，并且拥有一个 mutex 锁。 迭代器被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 迭代器会马上抛出java.util.ConcurrentModificationException 异常。</p><p>所以，正确的在遍历过程中删除元素的方法应该是使用Iterator：</p><pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));Iterator&lt;String&gt; iter = list.iterator();while (iter.hasNext()) {    String s = iter.next();    if (s.equals(&quot;a&quot;)) {        iter.remove();    }}</code></pre><p>next()方法必须在调用remove()方法之前调用。如果在循环过程中先调用remove()，再调用next()，就会导致异常ConcurrentModificationException。原因如上。</p><h1 id="HashTable-和-HashMap-的选择"><a href="#HashTable-和-HashMap-的选择" class="headerlink" title="HashTable 和 HashMap 的选择"></a>HashTable 和 HashMap 的选择</h1><p>了解算法的人可能对HashTable比较熟悉，因为他是一个数据结构的名字。但在Java里边，用HashMap来表示这样的数据结构。Hashtable和 HashMap的一个关键性的不同是，HashTable是同步的，而HashMap不是。所以通常不需要HashTable，HashMap用的更多。<br>《HashMap完全解读》[4]、《Java中常见亲属比较》[5]等文章中介绍了他们的区别和如何选择。</p><h1 id="使用原始集合类型"><a href="#使用原始集合类型" class="headerlink" title="使用原始集合类型"></a>使用原始集合类型</h1><p>在Java里边，原始类型和无界通配符类型很容易混合在一起。以Set为例，Set是一个原始类型，而Set&lt; ? &gt;是一个无界通配符类型。 （可以把原始类型理解为没有使用泛型约束的类型）</p><p>考虑下面使用原始类型List作为参数的代码：</p><pre><code>public static void add(List list, Object o){    list.add(o);}public static void main(String[] args){    List&lt;String&gt; list = new ArrayList&lt;String&gt;();    add(list, 10);    String s = list.get(0);}</code></pre><p>上面的代码将会抛出异常：</p><pre><code>java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</code></pre><p>使用原始集合类型是很危险的，因为原始集合类型跳过了泛型类型检查，是不安全的。Set、Set&lt; ? &gt;和Set&lt; Object &gt;之间有很大差别。关于泛型，可以参考下列文章：《Java基础知识——泛型》[12]</p><h1 id="访问级别"><a href="#访问级别" class="headerlink" title="访问级别"></a>访问级别</h1><p>程序员们经常使用public作为类中的字段的修饰符，因为这样可以很简单的通过引用得到值，但这并不是好的设计，按照经验，分配给成员变量的访问级别应该尽可能的低。参考《Java中的四种访问级别》[13]</p><h1 id="ArrayList与LinkedList的选择"><a href="#ArrayList与LinkedList的选择" class="headerlink" title="ArrayList与LinkedList的选择"></a>ArrayList与LinkedList的选择</h1><p>当程序员们不知道ArrayList与LinkedList的区别时，他们经常使用ArrayList，因为它看起来比较熟悉。然而，它们之前有巨大的性能差别。在《ArrayList vs LinkedList vs Vector 区别》[8]、《Java中常见亲属比较》[9]等文章中介绍过，简而言之，如果有大量的增加删除操作并且没有很多的随机访问元素的操作，应该首先LinkedList。（LinkedList更适合从中间插入或者删除（链表的特性））</p><h1 id="可变与不可变"><a href="#可变与不可变" class="headerlink" title="可变与不可变"></a>可变与不可变</h1><p>在《为什么Java要把字符串设计成不可变的》[10]一文中介绍过，不可变对象有许多的优点，比如简单，安全等等。同时，也有人提出疑问：既然不可变有这么多好处，为什么不把所有类都搞成不可变的呢？</p><p>通常情况下，可变对象可以用来避免产生过多的中间对象。一个经典的实例就是连接大量的字符串，如果使用不可变的字符串，将会产生大量的需要进行垃圾回收的对象。这会浪费CPU大量的时间，使用可变对象才是正确的方案(比如StringBuilder)。</p><pre><code>String result=&quot;&quot;;for(String s: arr){    result = result + s;}</code></pre><p>StackOverflow[11]中也有关于这个的讨论。</p><h1 id="””还是构造函数"><a href="#””还是构造函数" class="headerlink" title="””还是构造函数"></a>””还是构造函数</h1><p>关于这个问题，也是程序员经常出现困惑的地方，在《该如何创建字符串，使用” “还是构造函数？》[12]中也介绍过。<br>如果你只需要创建一个字符串，你可以使用双引号的方式，如果你需要在堆中创建一个新的对象，你可以选择构造函数的方式。<br>在String d = new String(“abcd”)时，因为字面值“abcd”已经是字符串类型，那么使用构造函数方式只会创建一个额外没有用处的对象。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://www.hollischuang.com/archives/1360" target="_blank" rel="noopener">https://www.hollischuang.com/archives/1360</a><br>【2】<a href="http://www.hollischuang.com/archives/1269" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1269</a><br>【3】<a href="http://www.hollischuang.com/archives/33" target="_blank" rel="noopener">http://www.hollischuang.com/archives/33</a><br>【4】<a href="http://www.hollischuang.com/archives/82" target="_blank" rel="noopener">http://www.hollischuang.com/archives/82</a><br>【5】<a href="http://www.hollischuang.com/archives/442" target="_blank" rel="noopener">http://www.hollischuang.com/archives/442</a><br>【6】<a href="http://www.hollischuang.com/archives/1182" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1182</a><br>【7】<a href="http://www.hollischuang.com/archives/1182" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1182</a><br>【8】<a href="http://www.hollischuang.com/archives/1349" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1349</a><br>【9】<a href="http://www.hollischuang.com/archives/442" target="_blank" rel="noopener">http://www.hollischuang.com/archives/442</a><br>【10】<a href="http://www.hollischuang.com/archives/1246" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1246</a><br>【11】<a href="https://stackoverflow.com/questions/23616211/why-we-need-mutable-classes" target="_blank" rel="noopener">https://stackoverflow.com/questions/23616211/why-we-need-mutable-classes</a><br>【12】<a href="http://www.hollischuang.com/archives/1249" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1249</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java开发中的易错点&lt;/p&gt;
    
    </summary>
    
      <category term="2020年1月" scheme="http://yoursite.com/categories/2020%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>

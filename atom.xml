<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiye Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-03T07:54:39.379Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yiye Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>128. 最长连续序列</title>
    <link href="http://yoursite.com/2020/08/31/128.%20%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2020/08/31/128. 最长连续序列/</id>
    <published>2020-08-31T07:20:12.000Z</published>
    <updated>2020-09-03T07:54:39.379Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><a id="more"></a><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><pre><code>输入: [100, 4, 200, 1, 3, 2]输出: 4解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</code></pre><h1 id="方法一：排序"><a href="#方法一：排序" class="headerlink" title="方法一：排序"></a>方法一：排序</h1><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><details>    <summary>排序</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// max 最终结果, curr 当前长度, last 上个数字</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>, curr = <span class="number">1</span>, last = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == last + <span class="number">1</span>) curr++; <span class="comment">// 符合连续，长度 +1</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            max = Math.max(max, curr); <span class="comment">// 连不上了，记录长度</span></span><br><span class="line">            curr = <span class="number">1</span>; <span class="comment">// 重新开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        last = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    max = Math.max(max, curr); <span class="comment">// 别忘了最后一段的连续区间</span></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>## 复杂度分析<ul><li>时间复杂度：<em>O(nlog(n))</em></li><li>空间复杂度：<em>O(1)</em><ul><li>副作用：影响原数组</li></ul></li></ul><hr><h1 id="方法二：集合"><a href="#方法二：集合" class="headerlink" title="方法二：集合"></a>方法二：集合</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>利用 <em>O(1)</em> 时间复杂度「查询是否有下一个」</li><li>优化：如果有比自己小一点的，那自己不查，让小的去查（详见代码）<ul><li>贪心思想？</li></ul></li></ul><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><details>    <summary>集合</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = nums.length, max = <span class="number">1</span>;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : nums) set.add(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : nums) &#123;</span><br><span class="line">        <span class="comment">// 技巧：如果有比自己小一点的，那自己不查，让小的去查</span></span><br><span class="line">        <span class="keyword">if</span> (set.contains(v - <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> r = v; <span class="comment">// r: right 表示「以 v 开头，能连续到多少」</span></span><br><span class="line">        <span class="keyword">while</span> (set.contains(r + <span class="number">1</span>)) r++; <span class="comment">// 逐个查看</span></span><br><span class="line">        max = Math.max(max, r - v + <span class="number">1</span>); <span class="comment">// 记录区间 [v, r] 长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>## 复杂度分析<ul><li>时间复杂度：<em>O(n)</em><ul><li>虽 <code>for</code> 内有 <code>while</code>，但每个元素最多被查 <code>2</code> 次</li><li>第一次在 <code>set.contains(v - 1)</code>，如元素 <code>5</code> 被 <code>6</code> 查</li><li>第二次在 <code>set.contains(r + 1)</code>，如元素 <code>5</code> 被 <code>4</code> 查</li></ul></li><li>空间复杂度：<em>O(n)</em></li></ul><hr><h1 id="方法三：哈希表"><a href="#方法三：哈希表" class="headerlink" title="方法三：哈希表"></a>方法三：哈希表</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li>虽然代码结构与上述 「方法二：集合」十分相似，但思路由差异，值得提及</li><li>少了方法二的优化：只对小的执行查询</li><li>利用前面已知的右边界，快速找到当前需要的右边界（详见代码）<ul><li>记忆化</li></ul></li></ul><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><details>    <summary>哈希表</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 记录区间 [v, r]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : nums) map.put(v, v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = v;</span><br><span class="line">        <span class="keyword">while</span> (map.containsKey(r + <span class="number">1</span>))</span><br><span class="line">            r = map.get(r + <span class="number">1</span>); <span class="comment">// 利用前面已知的右边界，快速找到当前需要的右边界</span></span><br><span class="line">        map.put(v, r);</span><br><span class="line">        max = Math.max(max, r - v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>## 复杂度分析<ul><li>时间复杂度：<em>O(n)</em></li><li>空间复杂度：<em>O(n)</em></li></ul><hr><h1 id="方法四：并查集"><a href="#方法四：并查集" class="headerlink" title="方法四：并查集"></a>方法四：并查集</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ul><li>初始：所有元素各自为战</li><li>首次遍历：所有元素 <code>x</code> 向各自邻居 <code>x + 1</code>，发起结盟，并「以大者为领队」<ul><li>若有邻居，才结盟成功</li><li>领队，即 区间右边界</li><li>不只是元素 <code>x</code> 与邻居 <code>x + 1</code> 结盟，而是整个 <code>x</code> 所在队伍与整个 <code>x + 1</code> 所在队伍结盟<ul><li>如 <code>[1, 2, 3]</code> 与 <code>[4, 5]</code> 两个队伍结盟</li></ul></li></ul></li><li>二次遍历：记录所有人与其领队距离<ul><li>距离，即 区间右边界 - 当前元素 + 1</li></ul></li></ul><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><details>    <summary>并查集</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首次遍历，与邻居结盟</span></span><br><span class="line">    UnionFind uf = <span class="keyword">new</span> UnionFind(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : nums)</span><br><span class="line">        uf.union(v, v + <span class="number">1</span>); <span class="comment">// uf.union() 结盟</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二次遍历，记录领队距离</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : nums)</span><br><span class="line">        max = Math.max(max, uf.find(v) - v + <span class="number">1</span>); <span class="comment">// uf.find() 查找领队</span></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>并查集定义，放在一起即可通过</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//还剩几支队伍</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; parent; <span class="comment">// (curr, leader)</span></span><br><span class="line"></span><br><span class="line">    UnionFind(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        count = arr.length;</span><br><span class="line">        parent = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : arr)</span><br><span class="line">            parent.put(v, v); <span class="comment">// 初始时，各自为战，自己是自己的领队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结盟</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不只是 p 与 q 结盟，而是整个 p 所在队伍 与 q 所在队伍结盟</span></span><br><span class="line">        <span class="comment">// 结盟需各领队出面，而不是小弟出面</span></span><br><span class="line">        Integer rootP = find(p), rootQ = find(q);</span><br><span class="line">        <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (rootP == <span class="keyword">null</span> || rootQ == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结盟</span></span><br><span class="line">        parent.put(rootP, rootQ); <span class="comment">// 谁大听谁</span></span><br><span class="line">        <span class="comment">// 应取 max，而本题已明确 p &lt; q 才可这么写</span></span><br><span class="line">        <span class="comment">// 当前写法有损封装性，算法题可不纠结</span></span><br><span class="line"></span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找领队</span></span><br><span class="line">    <span class="function">Integer <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!parent.containsKey(p))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归向上找领队</span></span><br><span class="line">        <span class="keyword">int</span> root = p;</span><br><span class="line">        <span class="keyword">while</span> (root != parent.get(root))</span><br><span class="line">            root = parent.get(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路径压缩：扁平化管理，避免日后找领队层级过深</span></span><br><span class="line">        <span class="keyword">while</span> (p != parent.get(p)) &#123;</span><br><span class="line">            <span class="keyword">int</span> curr = p;</span><br><span class="line">            p = parent.get(p);</span><br><span class="line">            parent.put(curr, root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>## 复杂度分析<ul><li>时间复杂度：<em>O(n)</em></li><li>空间复杂度：<em>O(n)</em></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>124. 二叉树中的最大路径和</title>
    <link href="http://yoursite.com/2020/08/31/124.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://yoursite.com/2020/08/31/124. 二叉树中的最大路径和/</id>
    <published>2020-08-31T07:20:12.000Z</published>
    <updated>2020-08-31T08:28:38.431Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空二叉树，返回其最大路径和。</p><a id="more"></a><p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。</p><p>示例 1:</p><pre><code>输入: [1,2,3]       1      / \     2   3输出: 6</code></pre><p>示例 2:</p><pre><code>输入: [-10,9,20,null,null,15,7]   -10   / \  9  20    /  \   15   7输出: 42</code></pre><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="0fc716bb-576b-482f-8ec4-a1659b427b4f">124. 二叉树中的最大路径.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h2><p>首先，考虑实现一个简化的函数 <code>maxGain(node)</code>，该函数计算二叉树中的一个节点的最大贡献值，具体而言，就是在以该节点为根节点的子树中寻找以该节点为起点的一条路径，使得该路径上的节点值之和最大。</p><p>具体而言，该函数的计算如下。</p><ul><li><p>空节点的最大贡献值等于 <em>0</em>。</p></li><li><p>非空节点的最大贡献值等于节点值与其子节点中的最大贡献值之和（对于叶节点而言，最大贡献值等于节点值）。</p></li></ul><p>例如，考虑如下二叉树。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> -10</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>叶节点 <em>9</em>、<em>15<em>、</em>7</em> 的最大贡献值分别为 <em>9</em>、<em>15</em>、<em>7</em>。</p><p>得到叶节点的最大贡献值之后，再计算非叶节点的最大贡献值。节点 <em>20</em> 的最大贡献值等于 20+max(15,7)=35，节点 <em>-10</em> 的最大贡献值等于-10+max(9,35)=25  。</p><p>上述计算过程是递归的过程，因此，对根节点调用函数 <code>maxGain</code>，即可得到每个节点的最大贡献值。</p><p>根据函数 <code>maxGain</code> 得到每个节点的最大贡献值之后，如何得到二叉树的最大路径和？对于二叉树中的一个节点，该节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值，如果子节点的最大贡献值为正，则计入该节点的最大路径和，否则不计入该节点的最大路径和。维护一个全局变量 <code>maxSum</code> 存储最大路径和，在递归过程中更新 <code>maxSum</code> 的值，最后得到的 <code>maxSum</code> 的值即为二叉树中的最大路径和。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/124/1.PNG" target="_blank" rel="noopener">fig1</a> <a href="https://assets.leetcode-cn.com/solution-static/124/2.PNG" target="_blank" rel="noopener">fig2</a> <a href="https://assets.leetcode-cn.com/solution-static/124/3.PNG" target="_blank" rel="noopener">fig3</a> <a href="https://assets.leetcode-cn.com/solution-static/124/4.PNG" target="_blank" rel="noopener">fig4</a> <a href="https://assets.leetcode-cn.com/solution-static/124/5.PNG" target="_blank" rel="noopener">fig5</a> <a href="https://assets.leetcode-cn.com/solution-static/124/6.PNG" target="_blank" rel="noopener">fig6</a> <a href="https://assets.leetcode-cn.com/solution-static/124/7.PNG" target="_blank" rel="noopener">fig7</a> </p><p>这题目的难点在于理解题意和转化题意。<br>我们可以结合 数组的最大子数组和 的思路去解题。</p><ol><li><p>「可以从任意节点出发, 到达任意节点」 的路径,<br>一定是先上升（ 0 ～ n 个）节点, 到达顶点, 后下降（ 0 ～ n 个）节点。<br>我们可以通过枚举顶点的方式来枚举路径。</p></li><li><p>我们枚举顶点时, 可以把路径分拆成3部分： 左侧路径、右侧路径和顶点。</p><pre><code> 如下面的路径, 顶点为 20, 左侧路径为 6 -&gt; 15, 右侧为 6 -&gt; 7。   -10   / \  9 [20]    /  \  [15] [7]  /    / \[6]   4  [6]   </code></pre><p>以当前节点为顶点的路径中, 最大和为 两侧路径的最大和 + 节点的值。<br>需要注意的是, 两侧路径也可能不选, 此时取 0。</p></li><li><p>如何求两侧路径最大和？ 看一个类似问题：求数组的最大子数组和。<br>动态规划： dp[i] 代表以 nums[i] 为结尾的子数组的最大和。<br>转移方程： dp[i] = max(dp[i-1], 0) + nums[i]。</p></li><li><p>在树上, 设 dp[C] 代表以当前节点为结尾的最大上升路径和,<br>则我们需要对节点的左右子树做一个选择, 有<br>dp[C] = max(max(dp[L], 0), max(dp[R], 0)) + C.val<br>式中, C,L,R 分别代指 当前节点、左子节点、右子节点。</p></li><li><p>最后, 以当前节点为顶点的路径中, 最大的和为<br>max(dp[L], 0) + max(dp[R], 0) + C.val。<br>我们枚举顶点, 并记录最大答案。</p></li></ol><details>    <summary>递归Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        maxGain(root);</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxGain</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归计算左右子节点的最大贡献值</span></span><br><span class="line">        <span class="comment">// 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">        <span class="keyword">int</span> leftGain = Math.max(maxGain(node.left), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> rightGain = Math.max(maxGain(node.right), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">int</span> priceNewpath = node.val + leftGain + rightGain;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新答案</span></span><br><span class="line">        maxSum = Math.max(maxSum, priceNewpath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">return</span> node.val + Math.max(leftGain, rightGain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归Python</summary><figure class="highlight python"><figcaption><span>[sol1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.maxSum = float(<span class="string">"-inf"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxGain</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 递归计算左右子节点的最大贡献值</span></span><br><span class="line">            <span class="comment"># 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">            leftGain = max(maxGain(node.left), <span class="number">0</span>)</span><br><span class="line">            rightGain = max(maxGain(node.right), <span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">            priceNewpath = node.val + leftGain + rightGain</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新答案</span></span><br><span class="line">            self.maxSum = max(self.maxSum, priceNewpath)</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 返回节点的最大贡献值</span></span><br><span class="line">            <span class="keyword">return</span> node.val + max(leftGain, rightGain)</span><br><span class="line">   </span><br><span class="line">        maxGain(root)</span><br><span class="line">        <span class="keyword">return</span> self.maxSum</span><br></pre></td></tr></table></figure></details><details>    <summary>递归C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> maxSum = INT_MIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxGain</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归计算左右子节点的最大贡献值</span></span><br><span class="line">        <span class="comment">// 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">        <span class="keyword">int</span> leftGain = max(maxGain(node-&gt;left), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> rightGain = max(maxGain(node-&gt;right), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">int</span> priceNewpath = node-&gt;val + leftGain + rightGain;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新答案</span></span><br><span class="line">        maxSum = max(maxSum, priceNewpath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">return</span> node-&gt;val + max(leftGain, rightGain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        maxGain(root);</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxPathSum</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    maxSum := math.MinInt32</span><br><span class="line">    <span class="keyword">var</span> maxGain <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function">    <span class="title">maxGain</span> = <span class="title">func</span><span class="params">(node *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归计算左右子节点的最大贡献值</span></span><br><span class="line">        <span class="comment">// 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">        leftGain := max(maxGain(node.Left), <span class="number">0</span>)</span><br><span class="line">        rightGain := max(maxGain(node.Right), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">        priceNewPath := node.Val + leftGain + rightGain</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新答案</span></span><br><span class="line">        maxSum = max(maxSum, priceNewPath)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">return</span> node.Val + max(leftGain, rightGain)</span><br><span class="line">    &#125;</span><br><span class="line">    maxGain(root)</span><br><span class="line">    <span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归C#</summary><figure class="highlight csharp"><figcaption><span>[sol1-C#]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = <span class="keyword">int</span>.MinValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MaxPathSum</span>(<span class="params">TreeNode root</span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MaxGain(root);</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MaxGain</span>(<span class="params">TreeNode node</span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归计算左右子节点的最大贡献值</span></span><br><span class="line">        <span class="comment">// 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">        <span class="keyword">int</span> leftGain = Math.Max(MaxGain(node.left), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> rightGain = Math.Max(MaxGain(node.right), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">int</span> priceNewpath = node.val + leftGain + rightGain;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新答案</span></span><br><span class="line">        maxSum = Math.Max(maxSum, priceNewpath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回节点的最大贡献值</span></span><br><span class="line">        <span class="keyword">return</span> node.val + Math.Max(leftGain, rightGain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N)*，其中 *N</em> 是二叉树中的节点个数。对每个节点访问不超过 <em>2</em> 次。</p></li><li><p>空间复杂度：<em>O(N)*，其中 *N</em> 是二叉树中的节点个数。空间复杂度主要取决于递归调用层数，最大层数等于二叉树的高度，最坏情况下，二叉树的高度等于二叉树中的节点个数。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个非空二叉树，返回其最大路径和。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://yoursite.com/tags/Depth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>395. 至少有K个重复字符的最长子串</title>
    <link href="http://yoursite.com/2020/08/31/395.%20%E8%87%B3%E5%B0%91%E6%9C%89K%E4%B8%AA%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://yoursite.com/2020/08/31/395. 至少有K个重复字符的最长子串/</id>
    <published>2020-08-31T02:40:12.000Z</published>
    <updated>2020-08-31T07:17:03.148Z</updated>
    
    <content type="html"><![CDATA[<p>找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。</p><a id="more"></a><p>示例 1:</p><pre><code>输入:s = &quot;aaabb&quot;, k = 3输出:3</code></pre><p>最长子串为 “aaa” ，其中 ‘a’ 重复了 3 次。<br>示例 2:</p><pre><code>输入:s = &quot;ababbc&quot;, k = 2输出:5</code></pre><p>最长子串为 “ababb” ，其中 ‘a’ 重复了 2 次， ‘b’ 重复了 3 次。</p><h1 id="Java递归"><a href="#Java递归" class="headerlink" title="Java递归"></a>Java递归</h1><p>解题思路：递归拆分子串，分治。先统计出每个字符出现的频次，维护一对双指针，从首尾开始统计，从首尾往中间排除，如果出现次数小于k则不可能出现在最终子串中，排除并挪动指针，然后得到临时子串，依次从头遍历，一旦发现出现频次小于k的字符，以该字符为分割线，分别递归求其最大值返回。</p><details>    <summary>递归</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int longestSubstring(String s, int k) &#123;</span><br><span class="line">        int len = s.length();</span><br><span class="line">        if (len == 0 || k &gt; len) return 0;</span><br><span class="line">        if (k &lt; 2) return len;</span><br><span class="line"></span><br><span class="line">        return count(s.toCharArray(), k, 0, len - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int count(char[] chars, int k, int p1, int p2) &#123;</span><br><span class="line">        if (p2 - p1 + 1 &lt; k) return 0;</span><br><span class="line">        int[] times = new int[26];  //  26个字母</span><br><span class="line">        //  统计出现频次</span><br><span class="line">        for (int i = p1; i &lt;= p2; ++i) &#123;</span><br><span class="line">            ++times[chars[i] - &apos;a&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">        //  如果该字符出现频次小于k，则不可能出现在结果子串中</span><br><span class="line">        //  分别排除，然后挪动两个指针</span><br><span class="line">        while (p2 - p1 + 1 &gt;= k &amp;&amp; times[chars[p1] - &apos;a&apos;] &lt; k) &#123;</span><br><span class="line">            ++p1;</span><br><span class="line">        &#125;</span><br><span class="line">        while (p2 - p1 + 1 &gt;= k &amp;&amp; times[chars[p2] - &apos;a&apos;] &lt; k) &#123;</span><br><span class="line">            --p2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (p2 - p1 + 1 &lt; k) return 0;</span><br><span class="line">        //  得到临时子串，再递归处理</span><br><span class="line">        for (int i = p1; i &lt;= p2; ++i) &#123;</span><br><span class="line">            //  如果第i个不符合要求，切分成左右两段分别递归求得</span><br><span class="line">            if (times[chars[i] - &apos;a&apos;] &lt; k) &#123;</span><br><span class="line">                return Math.max(count(chars, k, p1, i - 1), count(chars, k, i + 1, p2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return p2 - p1 + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>剑指 offer51.数组中的逆序对</title>
    <link href="http://yoursite.com/2020/08/26/%E5%89%91%E6%8C%87%20offer51.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>http://yoursite.com/2020/08/26/剑指 offer51.数组中的逆序对/</id>
    <published>2020-08-26T07:15:12.000Z</published>
    <updated>2020-08-26T10:06:27.373Z</updated>
    
    <content type="html"><![CDATA[<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><a id="more"></a><p>示例 1: </p><pre><code>输入: [7,5,6,4]输出: 5 </code></pre><p> 限制： </p><p> 0 &lt;= 数组长度 &lt;= 50000</p><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="0a3b59f0-4902-4b35-b605-cf2ded591a8b">面试题 51. 数组中的逆序对.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="方法一：归并排序"><a href="#方法一：归并排序" class="headerlink" title="方法一：归并排序"></a>方法一：归并排序</h2><p><strong>预备知识</strong></p><p>「归并排序」是分治思想的典型应用，它包含这样三个步骤：</p><ul><li><strong>分解：</strong> 待排序的区间为 <em>[l, r]*，令m=(l+r)/2，我们把 *[l, r]</em> 分成 <em>[l, m]</em> 和 <em>[m + 1, r]</em></li><li><strong>解决：</strong> 使用归并排序递归地排序两个子序列</li><li><strong>合并：</strong> 把两个已经排好序的子序列 <em>[l, m]</em> 和 <em>[m + 1, r]</em> 合并起来</li></ul><p>在待排序序列长度为 <em>1</em> 的时候，递归开始「回升」，因为我们默认长度为 <em>1</em> 的序列是排好序的。</p><p><strong>思路</strong></p><p>那么求逆序对和归并排序又有什么关系呢？关键就在于「归并」当中「并」的过程。我们通过一个实例来看看。假设我们有两个已排序的序列等待合并，分别是 L={8,12,16,22,100} 和 R={9,26,55,64,91}。一开始我们用指针 <code>lPtr = 0</code> 指向 <em>L</em> 的首部，<code>rPtr = 0</code> 指向 <em>R</em> 的头部。记已经合并好的部分为 <em>M</em>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [9, 26, 55, 64, 91]  M = []</span><br><span class="line">     |                          |</span><br><span class="line">   lPtr                       rPtr</span><br></pre></td></tr></table></figure><p>我们发现 <code>lPtr</code> 指向的元素小于 <code>rPtr</code> 指向的元素，于是把 <code>lPtr</code> 指向的元素放入答案，并把 <code>lPtr</code> 后移一位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [9, 26, 55, 64, 91]  M = [8]</span><br><span class="line">        |                       |</span><br><span class="line">      lPtr                     rPtr</span><br></pre></td></tr></table></figure><p>这个时候我们把左边的 <em>8</em> 加入了答案，我们发现右边没有数比 <em>8</em> 小，所以 <em>8</em> 对逆序对总数的「贡献」为 <em>0</em>。</p><p>接着我们继续合并，把 <em>9</em> 加入了答案，此时 <code>lPtr</code> 指向 <em>12</em>，<code>rPtr</code> 指向 <em>26</em>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [9, 26, 55, 64, 91]  M = [8, 9]</span><br><span class="line">        |                          |</span><br><span class="line">       lPtr                       rPtr</span><br></pre></td></tr></table></figure><p>此时 <code>lPtr</code> 比 <code>rPtr</code> 小，把 <code>lPtr</code> 对应的数加入答案，并考虑它对逆序对总数的贡献为 <code>rPtr</code> 相对 <em>R</em> 首位置的偏移 <em>1</em>（即右边只有一个数比 <em>12</em> 小，所以只有它和 <em>12</em> 构成逆序对），以此类推。</p><p>我们发现用这种「算贡献」的思想在合并的过程中计算逆序对的数量的时候，只在 <code>lPtr</code> 右移的时候计算，是基于这样的事实：当前 <code>lPtr</code> 指向的数字比 <code>rPtr</code> 小，但是比 <em>R</em> 中 <code>[0 ... rPtr - 1]</code> 的其他数字大，<code>[0 ... rPtr - 1]</code> 的其他数字本应当排在 <code>lPtr</code> 对应数字的左边，但是它排在了右边，所以这里就贡献了 <code>rPtr</code> 个逆序对。</p><p>利用这个思路，我们可以写出如下代码。官方题解写的比较晦涩，我在Java版代码里换了一种相当容易理解的形式。</p><p><strong>代码</strong></p><details>    <summary>归并排序C++ </summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; tmp, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> inv_count = mergeSort(nums, tmp, l, mid) + mergeSort(nums, tmp, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, pos = l;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[j]) &#123;</span><br><span class="line">                tmp[pos] = nums[i];</span><br><span class="line">                ++i;</span><br><span class="line">                inv_count += (j - (mid + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[pos] = nums[j];</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= mid; ++k) &#123;</span><br><span class="line">            tmp[pos++] = nums[k];</span><br><span class="line">            inv_count += (j - (mid + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= r; ++k) &#123;</span><br><span class="line">            tmp[pos++] = nums[k];</span><br><span class="line">        &#125;</span><br><span class="line">        copy(tmp.begin() + l, tmp.begin() + r + <span class="number">1</span>, nums.begin() + l);</span><br><span class="line">        <span class="keyword">return</span> inv_count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp(n);</span><br><span class="line">        <span class="keyword">return</span> mergeSort(nums, tmp, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>归并排序Python</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(self, nums, tmp, l, r)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        inv_count = self.mergeSort(nums, tmp, l, mid) + self.mergeSort(nums, tmp, mid + <span class="number">1</span>, r)</span><br><span class="line">        i, j, pos = l, mid + <span class="number">1</span>, l</span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= r:</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt;= nums[j]:</span><br><span class="line">                tmp[pos] = nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                inv_count += (j - (mid + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp[pos] = nums[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(i, mid + <span class="number">1</span>):</span><br><span class="line">            tmp[pos] = nums[k]</span><br><span class="line">            inv_count += (j - (mid + <span class="number">1</span>))</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(j, r + <span class="number">1</span>):</span><br><span class="line">            tmp[pos] = nums[k]</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        nums[l:r+<span class="number">1</span>] = tmp[l:r+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> inv_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversePairs</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        tmp = [<span class="number">0</span>] * n</span><br><span class="line">        <span class="keyword">return</span> self.mergeSort(nums, tmp, <span class="number">0</span>, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></details><details>    <summary>归并排序Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reversePairs</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mergeSort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(nums []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid := start + (end - start)/<span class="number">2</span></span><br><span class="line">    cnt := mergeSort(nums, start, mid) + mergeSort(nums, mid + <span class="number">1</span>, end)</span><br><span class="line">    tmp := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    i, j := start, mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= mid &amp;&amp; j &lt;= end &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt;= nums[j] &#123;</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, nums[i])</span><br><span class="line">            cnt += j - (mid + <span class="number">1</span>)</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, nums[j])</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ; i &lt;= mid; i++ &#123;</span><br><span class="line">        tmp = <span class="built_in">append</span>(tmp, nums[i])</span><br><span class="line">        cnt += end - (mid + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ; j &lt;= end; j++ &#123;</span><br><span class="line">        tmp = <span class="built_in">append</span>(tmp, nums[j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt;= end; i++ &#123;</span><br><span class="line">        nums[i] = tmp[i - start]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>归并排序java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mergeCount(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeCount</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span> || nums == <span class="keyword">null</span> || left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        mergeCount(nums, left, mid);</span><br><span class="line">        mergeCount(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(nums, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * nums[left..mid] 有序，nums[mid + 1..right] 有序，计算逆序对个数并且排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> p = help.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//保存中间的位置，因为后面mid的值会改变</span></span><br><span class="line">        <span class="keyword">int</span> temp = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (mid &gt;= left &amp;&amp; right &gt;= temp) &#123;</span><br><span class="line">            <span class="comment">//记录下当前两个有序数组中的逆序对个数</span></span><br><span class="line">            result = nums[mid] &gt; nums[right] ? result + right - temp+<span class="number">1</span> : result;</span><br><span class="line">            <span class="comment">//help数组里从右向左开始降序存储nums数组中的元素</span></span><br><span class="line">            help[p--] = nums[mid] &gt; nums[right] ? nums[mid--] : nums[right--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (mid &gt;= left) &#123;</span><br><span class="line">            help[p--] = nums[mid--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &gt;= temp) &#123;</span><br><span class="line">            help[p--] = nums[right--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//help数组存储的是两个合并后的有序数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            nums[left + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度**<p>记序列长度为 <em>n</em>。</p><ul><li>时间复杂度：同归并排序 O(nlogn) 。</li><li>空间复杂度：同归并排序 <em>O(n)</em>，因为归并排序需要用到一个临时数组。</li></ul><h2 id="方法二：离散化树状数组"><a href="#方法二：离散化树状数组" class="headerlink" title="方法二：离散化树状数组"></a>方法二：离散化树状数组</h2><p><strong>预备知识</strong></p><p>「树状数组」是一种可以动态维护序列前缀和的数据结构，它的功能是：</p><ul><li><strong>单点更新 <code>update(i, v)</code>：</strong> 把序列 <em>i</em> 位置的数加上一个值 <em>v</em>，这题 <em>v = 1</em></li><li><strong>区间查询 <code>query(i)</code>：</strong> 查询序列[1,…,i] 区间的区间和，即 <em>i</em> 位置的前缀和</li></ul><p>修改和查询的时间代价都是 O(logn) ，其中 <em>n</em> 为需要维护前缀和的序列的长度。</p><p><strong>思路</strong></p><p>记题目给定的序列为 <em>a</em>，我们规定 <em>a_i</em> 的取值集合为 <em>a</em> 的「值域」。我们用桶来表示值域中的每一个数，桶中记录这些数字出现的次数。假设a={5,5,2,3,6} ，那么遍历这个序列得到的桶是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index  -&gt;  1 2 3 4 5 6 7 8 9</span><br><span class="line">value  -&gt;  0 1 1 0 2 1 0 0 0</span><br></pre></td></tr></table></figure><p>我们可以看出它第 <em>i - 1</em> 位的前缀和表示「有多少个数比 <em>i</em> 小」。那么我们可以从后往前遍历序列 <em>a</em>，记当前遍历到的元素为 <em>a_i*，我们把 *a_i</em> 对应的桶的值自增 <em>1</em>，把 <em>i - 1</em> 位置的前缀和加入到答案中算贡献。为什么这么做是对的呢，因为我们在循环的过程中，我们把原序列分成了两部分，后半部部分已经遍历过（已入桶），前半部分是待遍历的（未入桶），那么我们求到的 <em>i - 1</em> 位置的前缀和就是「已入桶」的元素中比 <em>a_i</em> 小的元素的总和，而这些元素在原序列中排在 <em>a_i</em> 的后面，但它们本应该排在 <em>a_i</em> 的前面，这样就形成了逆序对。</p><p>我们显然可以用数组来实现这个桶，可问题是如果 <em>a_i</em> 中有很大的元素，比如 <em>10^9*，我们就要开一个大小为 *10^9</em> 的桶，内存中是存不下的。这个桶数组中很多位置是 <em>0</em>，有效位置是稀疏的，我们要想一个办法让有效的位置全聚集到一起，减少无效位置的出现，这个时候我们就需要用到一个方法——离散化。</p><p>离散化一个序列的前提是我们只关心这个序列里面元素的相对大小，而不关心绝对大小（即只关心元素在序列中的排名）；离散化的目的是让原来分布零散的值聚集到一起，减少空间浪费。那么如何获得元素排名呢，我们可以对原序列排序后去重，对于每一个 <em>a_i</em> 通过二分查找的方式计算排名作为离散化之后的值。当然这里也可以不去重，不影响排名。</p><p><strong>代码</strong></p><details>    <summary>离散化树状数组C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BIT(<span class="keyword">int</span> _n): n(_n), tree(_n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            ret += tree[x];</span><br><span class="line">            x -= lowbit(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">            ++tree[x];</span><br><span class="line">            x += lowbit(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = nums;</span><br><span class="line">        <span class="comment">// 离散化</span></span><br><span class="line">        sort(tmp.begin(), tmp.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>&amp; num: nums) &#123;</span><br><span class="line">            num = lower_bound(tmp.begin(), tmp.end(), num) - tmp.begin() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 树状数组统计逆序对</span></span><br><span class="line">        <span class="function">BIT <span class="title">bit</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            ans += bit.query(nums[i] - <span class="number">1</span>);</span><br><span class="line">            bit.update(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>离散化树状数组Python</summary><figure class="highlight python"><figcaption><span>[sol2-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.tree = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowbit</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            ret += self.tree[x]</span><br><span class="line">            x -= BIT.lowbit(x)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x &lt;= self.n:</span><br><span class="line">            self.tree[x] += <span class="number">1</span></span><br><span class="line">            x += BIT.lowbit(x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversePairs</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="comment"># 离散化</span></span><br><span class="line">        tmp = sorted(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            nums[i] = bisect.bisect_left(tmp, nums[i]) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 树状数组统计逆序对</span></span><br><span class="line">        bit = BIT(n)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            ans += bit.query(nums[i] - <span class="number">1</span>)</span><br><span class="line">            bit.update(nums[i])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></details><details>    <summary>离散化树状数组Golang</summary><figure class="highlight golang"><figcaption><span>[sol2-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reversePairs</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">     n := <span class="built_in">len</span>(nums)</span><br><span class="line">     tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">     <span class="built_in">copy</span>(tmp, nums)</span><br><span class="line">     sort.Ints(tmp)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">         nums[i] = sort.SearchInts(tmp, nums[i]) + <span class="number">1</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     bit := BIT&#123;</span><br><span class="line">         n: n,</span><br><span class="line">         tree: <span class="built_in">make</span>([]<span class="keyword">int</span>, n + <span class="number">1</span>),</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ans := <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span> i := n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">         ans += bit.query(nums[i] - <span class="number">1</span>)</span><br><span class="line">         bit.update(nums[i])</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BIT <span class="keyword">struct</span> &#123;</span><br><span class="line">    n <span class="keyword">int</span></span><br><span class="line">    tree []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b BIT)</span> <span class="title">lowbit</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> x &amp; (-x) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b BIT)</span> <span class="title">query</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">        ret += b.tree[x]</span><br><span class="line">        x -= b.lowbit(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b BIT)</span> <span class="title">update</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> x &lt;= b.n &#123;</span><br><span class="line">        b.tree[x]++</span><br><span class="line">        x += b.lowbit(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度</strong></p><ul><li>时间复杂度：离散化的过程中使用了时间代价为O(nlogn) 的排序，单次二分的时间代价为O(logn)，一共有 <em>n</em> 次，总时间代价为 O(nlogn)；循环执行 <em>n</em> 次，每次进行 O(logn) 的修改和 O(logn) 的查找，总时间代价为  O(nlogn)。故渐进时间复杂度为  O(nlogn)。</li><li>空间复杂度：树状数组需要使用长度为 <em>n</em> 的数组作为辅助空间，故渐进空间复杂度为 <em>O(n)</em>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Coding Interviews" scheme="http://yoursite.com/tags/Coding-Interviews/"/>
    
  </entry>
  
  <entry>
    <title>315. 计算右侧小于当前元素的个数</title>
    <link href="http://yoursite.com/2020/08/26/315.%20%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/26/315. 计算右侧小于当前元素的个数/</id>
    <published>2020-08-26T06:12:12.000Z</published>
    <updated>2020-08-31T07:17:30.728Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。</p><a id="more"></a><p>示例：</p><pre><code>输入：nums = [5,2,6,1]输出：[2,1,1,0] 解释：5 的右侧有 2 个更小的元素 (2 和 1)2 的右侧仅有 1 个更小的元素 (1)6 的右侧有 1 个更小的元素 (1)1 的右侧有 0 个更小的元素</code></pre><p>提示：</p><p>0 &lt;= nums.length &lt;= 10^5<br>-10^4 &lt;= nums[i] &lt;= 10^4</p><h1 id="方法一：离散化树状数组"><a href="#方法一：离散化树状数组" class="headerlink" title="方法一：离散化树状数组"></a>方法一：离散化树状数组</h1><p><strong>预备知识</strong></p><p>「树状数组」是一种可以动态维护序列前缀和的数据结构，它的功能是：</p><ul><li><strong>单点更新 <code>update(i, v)</code>：</strong> 把序列 <em>i</em> 位置的数加上一个值 <em>v</em>，在该题中 <em>v = 1</em></li><li><strong>区间查询 <code>query(i)</code>：</strong> 查询序列 [1,…,i] 区间的区间和，即 <em>i</em> 位置的前缀和</li></ul><p>修改和查询的时间代价都是 O(logn) ，其中 <em>n</em> 为需要维护前缀和的序列的长度。</p><p><strong>思路与算法</strong></p><p>记题目给定的序列为 <em>a</em>，我们规定 <em>a_i</em> 的取值集合为 <em>a</em> 的「值域」。我们用桶来表示值域中的每一个数，桶中记录这些数字出现的次数。假设{5,5,2,3,6} ，那么遍历这个序列得到的桶是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index  -&gt;  1 2 3 4 5 6 7 8 9</span><br><span class="line">value  -&gt;  0 1 1 0 2 1 0 0 0</span><br></pre></td></tr></table></figure><p><strong>转化为动态维护前缀和问题</strong> </p><p>记 <code>value</code> 序列为 <em>v</em>，我们可以看出它第 <em>i - 1</em> 位的前缀和表示「有多少个数比 <em>i</em> 小」。那么我们可以从后往前遍历序列 <em>a</em>，记当前遍历到的元素为 <em>a_i*，我们把 *a_i</em> 对应的桶的值自增 <em>1</em>，记 <em>a_i = p*，把 *v</em> 序列 <em>p - 1</em> 位置的前缀和加入到答案中算贡献。为什么这么做是对的呢，因为我们在循环的过程中，我们把原序列分成了两部分，后半部部分已经遍历过（已入桶），前半部分是待遍历的（未入桶），那么我们求到的 <em>p - 1</em> 位置的前缀和就是「已入桶」的元素中比 <em>p</em> 小的元素的个数总和。<strong>这种动态维护前缀和的问题我们可以用「树状数组」来解决</strong>。</p><p><strong>用离散化优化空间</strong> </p><p>我们显然可以用数组来实现这个桶，可问题是如果 <em>a_i</em> 中有很大的元素，比如 <em>10^9*，我们就要开一个大小为 *10^9</em> 的桶，内存中是存不下的。这个桶数组中很多位置是 <em>0</em>，有效位置是稀疏的，我们要想一个办法让有效的位置全聚集到一起，减少无效位置的出现，这个时候我们就需要用到一个方法——离散化。<strong>离散化的方法有很多，但是目的是一样的，即把原序列的值域映射到一个连续的整数区间，并保证它们的偏序关系不变。</strong> 这里我们将原数组去重后排序，原数组每个数映射到去重排序后这个数对应位置的下标，我们称这个下标为这个对应数字的 id。已知数字获取 id  可以在去重排序后的数组里面做二分查找，已知id 获取数字可以直接把id作为下标访问去重排序数组的对应位置。大家可以参考代码和图来理解这个过程。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/315/1.png" target="_blank" rel="noopener">fig1</a> <a href="https://assets.leetcode-cn.com/solution-static/315/2.png" target="_blank" rel="noopener">fig2</a> <a href="https://assets.leetcode-cn.com/solution-static/315/3.png" target="_blank" rel="noopener">fig3</a> <a href="https://assets.leetcode-cn.com/solution-static/315/4.png" target="_blank" rel="noopener">fig4</a> <a href="https://assets.leetcode-cn.com/solution-static/315/5.png" target="_blank" rel="noopener">fig5</a> <a href="https://assets.leetcode-cn.com/solution-static/315/6.png" target="_blank" rel="noopener">fig6</a> <a href="https://assets.leetcode-cn.com/solution-static/315/7.png" target="_blank" rel="noopener">fig7</a> <a href="https://assets.leetcode-cn.com/solution-static/315/8.png" target="_blank" rel="noopener">fig8</a> <a href="https://assets.leetcode-cn.com/solution-static/315/9.png" target="_blank" rel="noopener">fig9</a> <a href="https://assets.leetcode-cn.com/solution-static/315/10.png" target="_blank" rel="noopener">fig10</a> </p><p>其实，计算每个数字右侧小于当前元素的个数，这个问题我们在 <a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">「剑指 Offer 51. 数组中的逆序对」</a> 题解的「方法二：离散化树状数组」中遇到过，在统计逆序对的时候，只需要统计每个位置右侧小于当前元素的个数，再对它们求和，就可以得到逆序对的总数。这道逆序对的题可以作为本题的补充练习。</p><p>代码如下。</p><p><strong>代码</strong></p><details>    <summary>离散化树状数组C#</summary><figure class="highlight csharp"><figcaption><span>[sol1-C#]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"><span class="keyword">int</span> length</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        Array.Fill(c, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">LowBit</span>(<span class="params"><span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="keyword">int</span> pos</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; c.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            c[pos] += <span class="number">1</span>;</span><br><span class="line">            pos += LowBit(pos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">Query</span>(<span class="params"><span class="keyword">int</span> pos</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += c[pos];</span><br><span class="line">            pos -= LowBit(pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Discretization</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a = (<span class="keyword">int</span>[])nums.Clone();</span><br><span class="line">        <span class="keyword">var</span> hashSet = <span class="keyword">new</span> HashSet&lt;<span class="keyword">int</span>&gt;(a);</span><br><span class="line">        a = hashSet.ToArray();</span><br><span class="line">        Array.Sort(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetId</span>(<span class="params"><span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Array.BinarySearch(a, x) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="keyword">int</span>&gt; <span class="title">CountSmaller</span>(<span class="params"><span class="keyword">int</span>[] nums</span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> resultList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;(); </span><br><span class="line"></span><br><span class="line">        Discretization(nums);</span><br><span class="line"></span><br><span class="line">        Init(nums.Length + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = GetId(nums[i]);</span><br><span class="line">            resultList.Add(Query(id - <span class="number">1</span>));</span><br><span class="line">            Update(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultList.Reverse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>离散化树状数组java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] c;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; resultList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class="line">        discretization(nums);</span><br><span class="line">        init(nums.length + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = getId(nums[i]);</span><br><span class="line">            resultList.add(query(id - <span class="number">1</span>));</span><br><span class="line">            update(id);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(resultList);</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        c = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        Arrays.fill(c, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">lowBit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; c.length) &#123;</span><br><span class="line">            c[pos] += <span class="number">1</span>;</span><br><span class="line">            pos += lowBit(pos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ret += c[pos];</span><br><span class="line">            pos -= lowBit(pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">discretization</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = set.size();</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : set) &#123;</span><br><span class="line">            a[index++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.binarySearch(a, x) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>离散化树状数组C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        c.resize(length, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LowBit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; c.size()) &#123;</span><br><span class="line">            c[pos] += <span class="number">1</span>;</span><br><span class="line">            pos += LowBit(pos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ret += c[pos];</span><br><span class="line">            pos -= LowBit(pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Discretization</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        a.assign(nums.begin(), nums.end());</span><br><span class="line">        sort(a.begin(), a.end());</span><br><span class="line">        a.erase(unique(a.begin(), a.end()), a.end());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lower_bound(a.begin(), a.end(), x) - a.begin() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; resultList;</span><br><span class="line"></span><br><span class="line">        Discretization(nums);</span><br><span class="line"></span><br><span class="line">        Init(nums.size() + <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)nums.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = getId(nums[i]);</span><br><span class="line">            resultList.push_back(Query(id - <span class="number">1</span>));</span><br><span class="line">            Update(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverse(resultList.begin(), resultList.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>离散化树状数组golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, c []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSmaller</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    resultList := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    discretization(nums)</span><br><span class="line">    c = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums) + <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        id := getId(nums[i])</span><br><span class="line">        resultList = <span class="built_in">append</span>(resultList, query(id - <span class="number">1</span>))</span><br><span class="line">        update(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(resultList)/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        resultList[i], resultList[<span class="built_in">len</span>(resultList)<span class="number">-1</span>-i] = resultList[<span class="built_in">len</span>(resultList)<span class="number">-1</span>-i], resultList[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowBit</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(pos <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> pos &lt; <span class="built_in">len</span>(c) &#123;</span><br><span class="line">        c[pos]++</span><br><span class="line">        pos += lowBit(pos)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(pos <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> pos &gt; <span class="number">0</span> &#123;</span><br><span class="line">        ret += c[pos]</span><br><span class="line">        pos -= lowBit(pos)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">discretization</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    set := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        set[num] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> set &#123;</span><br><span class="line">        a = <span class="built_in">append</span>(a, num)</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Ints(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getId</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sort.SearchInts(a, x) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>离散化树状数组C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LowBit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span>* c, <span class="keyword">int</span> n, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; n) &#123;</span><br><span class="line">        c[pos] += <span class="number">1</span>;</span><br><span class="line">        pos += LowBit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span>* c, <span class="keyword">int</span> n, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ret += c[pos];</span><br><span class="line">        pos -= LowBit(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &lt; x) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span> </span>&#123; <span class="keyword">return</span> (*(<span class="keyword">int</span>*)a - *(<span class="keyword">int</span>*)b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Discretization</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* nums, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, nums, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    qsort(a, n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), comp);</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[m]) &#123;</span><br><span class="line">            a[++m] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numsSize);</span><br><span class="line">    <span class="keyword">int</span>* c = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (numsSize + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span>* ret = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numsSize);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numsSize);</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (numsSize + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">memset</span>(ret, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numsSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m = Discretization(a, nums, numsSize);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = numsSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> id = lower_bound(a, m, nums[i]) + <span class="number">1</span>;</span><br><span class="line">        ret[i] = Query(c, m + <span class="number">1</span>, id - <span class="number">1</span>);</span><br><span class="line">        Update(c, m + <span class="number">1</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(c);</span><br><span class="line">    *returnSize = numsSize;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><p>假设题目给出的序列长度为 <em>n</em>。</p><ul><li>时间复杂度：我们梳理一下这个算法的流程，这里离散化使用哈希表去重，然后再对去重的数组进行排序，时间代价为 O(nlogn)；初始化树状数组的时间代价是 <em>O(n)</em>；通过值获取离散化 id  的操作单次时间代价为O(logn) ；对于每个序列中的每个元素，都会做一次查询 id、单点修改和前缀和查询，总的时间代价为 O(nlogn) 。故渐进时间复杂度为O(nlogn)。</li><li>空间复杂度：这里用到的离散化数组、树状数组、哈希表的空间代价都是 <em>O(n)</em>，故渐进空间复杂度为 <em>O(n)</em>。</li></ul><h1 id="方法二：归并排序"><a href="#方法二：归并排序" class="headerlink" title="方法二：归并排序"></a>方法二：归并排序</h1><p><strong>预备知识</strong></p><p>这里假设读者已经知道如何使用归并排序的方法计算序列的逆序对数，如果读者还不知道的话可以参考 <a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">「剑指 Offer 51. 数组中的逆序对」</a> 的官方题解哦。</p><p><strong>思路与算法</strong></p><p>我们发现「离散化树状数组」的方法几乎于 <a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">「剑指 Offer 51. 数组中的逆序对」</a> 中的完全相同，那么我们可不可以借鉴逆序对问题中的归并排序的方法呢？</p><p>我们还是要在「归并排序」的「并」中做文章。我们通过一个实例来看看。假设我们有两个已排序的序列等待合并，分别是L={8,12,16,22,100}和R={7,26,55,64,91}。一开始我们用指针 <code>lPtr = 0</code> 指向 <em>L</em> 的头部，<code>rPtr = 0</code> 指向 <em>R</em> 的头部。记已经合并好的部分为 <em>M</em>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [7, 26, 55, 64, 91]  M = []</span><br><span class="line">     |                          |</span><br><span class="line">   lPtr                       rPtr</span><br></pre></td></tr></table></figure><p>我们发现 <code>lPtr</code> 指向的元素大于 <code>rPtr</code> 指向的元素，于是把 <code>rPtr</code> 指向的元素放入答案，并把 <code>rPtr</code> 后移一位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [7, 26, 55, 64, 91]  M = [7]</span><br><span class="line">     |                              |</span><br><span class="line">    lPtr                          rPtr</span><br></pre></td></tr></table></figure><p>接着我们继续合并：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [7, 26, 55, 64, 91]  M = [8, 9]</span><br><span class="line">        |                          |</span><br><span class="line">       lPtr                       rPtr</span><br></pre></td></tr></table></figure><p>此时 <code>lPtr</code> 比 <code>rPtr</code> 小，把 <code>lPtr</code> 对应的数加入答案。如果我们要统计 <em>8</em> 的右边比 <em>8</em> 小的元素，这里 <em>7</em> 对它做了一次贡献。如果带合并的序列 L={8,12,16,22,100} ，R={7,7,7,26,55,64,91} ，那么一定有一个时刻，<code>lPtr</code> 和 <code>rPtr</code> 分别指向这些对应的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [8, 12, 16, 22, 100]   R = [7, 7, 7, 26, 55, 64, 91]  M = [7, 7, 7]</span><br><span class="line">     |                                   |</span><br><span class="line">    lPtr                                rPtr</span><br></pre></td></tr></table></figure><p>下一步我们就是把 <em>8</em> 加入 <em>M</em> 中，此时三个 <em>7</em> 对 <em>8</em> 的右边比 <em>8</em> 小的元素的贡献为 <em>3</em>。以此类推，我们可以一边合并一边计算 <em>R</em> 的头部到 <code>rPtr</code> 前一个数字对当前 <code>lPtr</code> 指向的数字的贡献。</p><p>我们发现用这种「算贡献」的思想在合并的过程中计算逆序对的数量的时候，只在 <code>lPtr</code> 右移的时候计算，是基于这样的事实：当前 <code>lPtr</code> 指向的数字比 <code>rPtr</code> 小，但是比 <em>R</em> 中 <code>[0 ... rPtr - 1]</code> 的其他数字大，<code>[0 ... rPtr - 1]</code> 的数字是在 <code>lPtr</code> 右边但是比 <code>lPtr</code> 对应数小的数字，贡献为这些数字的个数。</p><p>但是我们又遇到了新的问题，在「并」的过程中 <em>8</em> 的位置一直在发生改变，我们应该把计算的贡献保存到哪里呢？这个时候我们引入一个新的数组，来记录每个数字对应的原数组中的下标，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    a = [8, 9, 1, 5, 2]</span><br><span class="line">index = [0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><p>排序的时候原数组和这个下标数组同时变化，则排序后我们得到这样的两个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    a = [1, 2, 5, 8, 9]</span><br><span class="line">index = [2, 4, 3, 0, 1]</span><br></pre></td></tr></table></figure><p>我们用一个数组 <code>ans</code> 来记录贡献。我们对某个元素计算贡献的时候，如果它对应的下标为 <code>p</code>，我们只需要在 <code>ans[p]</code> 上加上贡献即可。</p><p>大家可以参考代码来理解这个过程。Java版的这种解法我还是没有吃透，可以参见<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">「剑指 Offer 51. 数组中的逆序对」</a> 的相应博客中有一种相对易于理解的解法。</p><p><strong>代码</strong></p><details>    <summary>归并排序C#</summary><figure class="highlight csharp"><figcaption><span>[sol2-C#]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] tempIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Merge</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, p = l;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp[p] = a[i];</span><br><span class="line">                tempIndex[p] = index[i];</span><br><span class="line">                ans[index[i]] += (j - mid - <span class="number">1</span>);</span><br><span class="line">                ++i;</span><br><span class="line">                ++p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                temp[p] = a[j];</span><br><span class="line">                tempIndex[p] = index[j];</span><br><span class="line">                ++j;</span><br><span class="line">                ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) </span><br><span class="line">        &#123;</span><br><span class="line">            temp[p] = a[i];</span><br><span class="line">            tempIndex[p] = index[i];</span><br><span class="line">            ans[index[i]] += (j - mid - <span class="number">1</span>);</span><br><span class="line">            ++i;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[p] = a[j];</span><br><span class="line">            tempIndex[p] = index[j];</span><br><span class="line">            ++j;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            index[k] = tempIndex[k];</span><br><span class="line">            a[k] = temp[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        MergeSort(a, l, mid);</span><br><span class="line">        MergeSort(a, mid + <span class="number">1</span>, r);</span><br><span class="line">        Merge(a, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="keyword">int</span>&gt; <span class="title">CountSmaller</span>(<span class="params"><span class="keyword">int</span>[] nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="keyword">new</span> <span class="keyword">int</span>[nums.Length];</span><br><span class="line">        <span class="keyword">this</span>.temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.Length];</span><br><span class="line">        <span class="keyword">this</span>.tempIndex = <span class="keyword">new</span> <span class="keyword">int</span>[nums.Length];</span><br><span class="line">        <span class="keyword">this</span>.ans = <span class="keyword">new</span> <span class="keyword">int</span>[nums.Length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            index[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.Length - <span class="number">1</span>;</span><br><span class="line">        MergeSort(nums, l, r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>归并排序Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] index;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] aux;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        aux = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        counter = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        index = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) index[i] = i；</span><br><span class="line">        <span class="comment">//归并排序并统计</span></span><br><span class="line">        mergeAndCount(nums, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//遍历获取统计结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            res.add(counter[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//归并排序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeAndCount</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        mergeAndCount(nums, l, m);</span><br><span class="line">        mergeAndCount(nums, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="comment">//检查已排序的部分</span></span><br><span class="line">        <span class="keyword">if</span> (nums[index[m]] &gt; nums[index[m + <span class="number">1</span>]]) &#123;</span><br><span class="line">            sortAndCount(nums, l, m, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子数组排序并统计</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortAndCount</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) aux[i] = index[i];</span><br><span class="line">        <span class="keyword">int</span> i = l, j = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; m) &#123;</span><br><span class="line">                index[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">                index[k] = aux[i++];</span><br><span class="line">                <span class="comment">//排序的是索引数组，仍然可以通过索引找到原来数组中的元素，并更新统计值</span></span><br><span class="line">                <span class="comment">//右边先走完，那么右边的都是逆序</span></span><br><span class="line">                counter[index[k]] += (r - m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[aux[i]] &lt;= nums[aux[j]]) &#123;</span><br><span class="line">                index[k] = aux[i++];</span><br><span class="line">                <span class="comment">//插入左边的元素时，统计已经产生的逆序部分</span></span><br><span class="line">                counter[index[k]] += (j - m - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index[k] = aux[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，即归并排序的时间复杂度。</li><li>空间复杂度：<em>O(n)</em>，这里归并排序的临时数组、下标映射数组以及答案数组的空间代价均为 <em>O(n)</em>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Binary Indexed Tree" scheme="http://yoursite.com/tags/Binary-Indexed-Tree/"/>
    
      <category term="Segment Tree" scheme="http://yoursite.com/tags/Segment-Tree/"/>
    
      <category term="Divide and Conque" scheme="http://yoursite.com/tags/Divide-and-Conque/"/>
    
  </entry>
  
  <entry>
    <title>287. 寻找重复数</title>
    <link href="http://yoursite.com/2020/08/25/287.%20%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/25/287. 寻找重复数/</id>
    <published>2020-08-25T08:12:12.000Z</published>
    <updated>2020-08-26T06:33:03.611Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: [1,3,4,2,2]输出: 2</code></pre><p>示例 2:</p><pre><code>输入: [3,1,3,4,2]输出: 3</code></pre><p>说明：</p><pre><code>不能更改原数组（假设数组是只读的）。只能使用额外的 O(1) 的空间。时间复杂度小于 O(n2) 。数组中只有一个重复的数字，但它可能不止重复出现一次。</code></pre><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="95ade126-7621-420e-97fb-4fe2784fad01">287. 寻找重复数.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="方法一：二分查找"><a href="#方法一：二分查找" class="headerlink" title="方法一：二分查找"></a>方法一：二分查找</h2><p><strong>思路和算法</strong></p><p>我们定义 cnt[i] 表示 nums[]  数组中小于等于 <em>i</em> 的数有多少个，假设我们重复的数是 target ，那么 [1,target-1] 里的所有数满足 cnt[i] &lt;=i，<em>[target,n]</em> 里的所有数满足 cnt[i] &gt; i，具有单调性。</p><p>以示例 1 为例，我们列出每个数字的 cnt  值：</p><table><thead><tr><th align="center">nums</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">cnt</td><td align="center">1</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr></tbody></table><p>示例中重复的整数是 <em>2</em>，我们可以看到 <em>[1,1]</em> 中的数满足 cnt[i] &lt;=i，<em>[2,4]</em> 中的数满足cnt[i] &gt; i 。</p><p>如果知道  cnt[]  数组随数字 <em>i</em> 逐渐增大具有单调性（即 target  前 cnt[i] &lt;=i，target  后 cnt[i] &gt; i，那么我们就可以直接利用二分查找来找到重复的数。</p><p>但这个性质一定是正确的吗？考虑 nums[]  数组一共有 <em>n+1</em> 个位置，我们填入的数字都在 <em>[1,n]</em> 间，有且只有一个数重复放了两次以上。对于所有测试用例，考虑以下两种情况：</p><ul><li><p>如果测试用例的数组中target 出现了两次，其余的数各出现了一次，这个时候肯定满足上文提及的性质，因为小于 target 的数 <em>i</em> 满足 cnt[i]=i ，大于等于 target  的数 <em>j</em> 满足 <em>cnt[j]=j+1</em>。</p></li><li><p>如果测试用例的数组中 target 出现了三次及以上，那么必然有一些数不在 nums[]  数组中了，这个时候相当于我们用 target 去替换了这些数，我们考虑替换的时候对 cnt[]数组的影响。如果替换的数 <em>i</em> 小于 target ，那么[i,target-1] 的 cnt值均减一，其他不变，满足条件。如果替换的数 <em>j</em> 大于等于 target，那么[target,j-1]的 cnt 值均加一，其他不变，亦满足条件。</p></li></ul><p>因此我们生成的数组一定具有上述性质的。</p><details>    <summary>二分查找C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n - <span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                cnt += nums[i] &lt;= mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt;= mid) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>二分查找JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">1</span>, r = n - <span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cnt += nums[i] &lt;= mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt;= mid) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>二分查找Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n - <span class="number">1</span>, ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt;= mid) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt;= mid) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>二分查找golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDuplicate</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    l, r := <span class="number">1</span>, n - <span class="number">1</span></span><br><span class="line">    ans := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> l &lt;= r &#123;</span><br><span class="line">        mid := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">        cnt := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt;= mid &#123;</span><br><span class="line">                cnt++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> cnt &lt;= mid &#123;</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">            ans = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(nlogn)  ，其中 <em>n</em> 为 nums[] 数组的长度。二分查找最多需要二分 O(logn)次，每次判断的时候需要<em>O(n)</em> 遍历 nums[]  数组求解小于等于mid的数的个数，因此总时间复杂度为O(nlogn)。</p></li><li><p>空间复杂度：<em>O(1)</em>。我们只需要常数空间存放若干变量。</p></li></ul><h2 id="方法二：二进制"><a href="#方法二：二进制" class="headerlink" title="方法二：二进制"></a>方法二：二进制</h2><p><strong>思路和算法</strong></p><p>这个方法我们来将所有数二进制展开按位考虑如何找出重复的数，如果我们能确定重复数每一位是 <em>1</em> 还是 <em>0</em> 就可以按位还原出重复的数是什么。</p><p>考虑到第 <em>i</em> 位，我们记 nums[] 数组中二进制展开后第 <em>i</em> 位为 <em>1</em> 的数有 <em>x</em> 个，数字 <em>[1,n]</em> 这 <em>n</em> 个数二进制展开后第 <em>i</em> 位为 <em>1</em> 的数有 <em>y</em> 个，那么重复的数第 <em>i</em> 位为 <em>1</em> 当且仅当 <em>x&gt;y</em>。</p><p>仍然以示例 1 为例，如下的表格列出了每个数字二进制下每一位是 <em>1</em> 还是 <em>0</em> 以及对应位的 <em>x</em> 和 <em>y</em> 是多少：</p><table><thead><tr><th align="center">&nbsp;</th><th align="center">1</th><th align="center">3</th><th align="center">4</th><th align="center">2</th><th align="center">2</th><th align="center">x</th><th align="center">y</th></tr></thead><tbody><tr><td align="center">第 0 位</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">第 1 位</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">第 2 位</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>更多思路详解见<a href="https://leetcode-cn.com/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/" target="_blank" rel="noopener">^1</a></p><details>    <summary>二进制C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 确定二进制下最高位是多少</span></span><br><span class="line">        <span class="keyword">int</span> bit_max = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">while</span> (!((n - <span class="number">1</span>) &gt;&gt; bit_max)) &#123;</span><br><span class="line">            bit_max -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> bit = <span class="number">0</span>; bit &lt;= bit_max; ++bit) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &amp; (<span class="number">1</span> &lt;&lt; bit)) &#123;</span><br><span class="line">                    x += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; (i &amp; (<span class="number">1</span> &lt;&lt; bit))) &#123;</span><br><span class="line">                    y += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">                ans |= <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>二进制JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol2-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 确定二进制下最高位是多少</span></span><br><span class="line">    <span class="keyword">let</span> bit_max = <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">while</span> (!((n - <span class="number">1</span>) &gt;&gt; bit_max)) &#123;</span><br><span class="line">        bit_max -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> bit = <span class="number">0</span>; bit &lt;= bit_max; ++bit) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &amp; (<span class="number">1</span> &lt;&lt; bit)) &#123;</span><br><span class="line">                x += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; (i &amp; (<span class="number">1</span> &lt;&lt; bit))) &#123;</span><br><span class="line">                y += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            ans |= <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>二进制Java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bit_max = <span class="number">31</span>;</span><br><span class="line">        <span class="comment">//令bit_max为n-1的最高位数</span></span><br><span class="line">        <span class="keyword">while</span> (((n - <span class="number">1</span>) &gt;&gt; bit_max) == <span class="number">0</span>) &#123;</span><br><span class="line">            bit_max -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> bit = <span class="number">0</span>; bit &lt;= bit_max; ++bit) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[i] &amp; (<span class="number">1</span> &lt;&lt; bit)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    x += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (((i &amp; (<span class="number">1</span> &lt;&lt; bit)) != <span class="number">0</span>)) &#123;</span><br><span class="line">                    y += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">                ans |= <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>二进制golang</summary><figure class="highlight golang"><figcaption><span>[sol2-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDuplicate</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    bit_max := <span class="number">31</span></span><br><span class="line">    <span class="keyword">for</span> ((n<span class="number">-1</span>) &gt;&gt; bit_max) == <span class="number">0</span> &#123;</span><br><span class="line">        bit_max--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> bit := <span class="number">0</span>; bit &lt;= bit_max; bit++ &#123;</span><br><span class="line">        x, y := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &amp; (<span class="number">1</span> &lt;&lt; bit)) &gt; <span class="number">0</span> &#123;</span><br><span class="line">                x++</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">1</span> &amp;&amp; (i &amp; (<span class="number">1</span> &lt;&lt; bit)) &gt; <span class="number">0</span> &#123;</span><br><span class="line">                y++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">            ans |= <span class="number">1</span> &lt;&lt; bit</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度证明</strong></p><ul><li><p>时间复杂度：O(nlogn)。</p></li><li><p>空间复杂度：<em>O(1)</em>。我们只需要常数空间存放若干变量。</p></li></ul><h2 id="方法三：快慢指针"><a href="#方法三：快慢指针" class="headerlink" title="方法三：快慢指针"></a>方法三：快慢指针</h2><p>更多思路详解见<a href="https://leetcode-cn.com/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/" target="_blank" rel="noopener">^1</a></p><details>    <summary>快慢指针C++</summary><figure class="highlight c++"><figcaption><span>[sol3-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>快慢指针JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol3-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        slow = nums[slow];</span><br><span class="line">        fast = nums[nums[fast]];</span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">    slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = nums[slow];</span><br><span class="line">        fast = nums[fast];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>快慢指针Java</summary><figure class="highlight java"><figcaption><span>[sol3-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>快慢指针golang</summary><figure class="highlight golang"><figcaption><span>[sol3-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDuplicate</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    slow, fast := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> slow, fast = nums[slow], nums[nums[fast]]; slow != fast; slow, fast = nums[slow], nums[nums[fast]] &#123; &#125;</span><br><span class="line">    slow = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> slow != fast &#123;</span><br><span class="line">        slow = nums[slow]</span><br><span class="line">        fast = nums[fast]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(n)</em>。「Floyd 判圈算法」时间复杂度为线性的时间复杂度。</p></li><li><p>空间复杂度：<em>O(1)</em>。我们只需要常数空间存放若干变量。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>162. 寻找峰值</title>
    <link href="http://yoursite.com/2020/08/24/162.%20%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
    <id>http://yoursite.com/2020/08/24/162. 寻找峰值/</id>
    <published>2020-08-24T09:55:12.000Z</published>
    <updated>2020-08-25T08:00:48.057Z</updated>
    
    <content type="html"><![CDATA[<p>峰值元素是指其值大于左右相邻值的元素。</p><p>给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。</p><a id="more"></a><p>数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。</p><p>你可以假设 nums[-1] = nums[n] = -∞。</p><p>示例 1:</p><pre><code>输入: nums = [1,2,3,1]输出: 2解释: 3 是峰值元素，你的函数应该返回其索引 2。</code></pre><p>示例 2:</p><pre><code>输入: nums = [1,2,1,3,5,6,4]输出: 1 或 5 解释: 你的函数可以返回索引 1，其峰值元素为 2；或者返回索引 5， 其峰值元素为 6。</code></pre><p>说明:</p><p>你的解法应该是 O(logN) 时间复杂度的。</p><h1 id="方法一-线性扫描"><a href="#方法一-线性扫描" class="headerlink" title="方法一: 线性扫描"></a>方法一: 线性扫描</h1><p>本方法利用了连续的两个元素 <em>nums[j]</em> 和 <em>nums[j + 1]</em> 不会相等这一事实。于是，我们可以从头开始遍历 <em>nums</em> 数组。每当我们遇到数字 <em>nums[i]*，只需要检查它是否大于下一个元素 *nums[i+1]</em> 即可判断 <em>nums[i]</em> 是否是峰值。可以通过分别讨论问题的全部三种可能情况来理解本方法的思路。</p><p>情况 1. </p><p>所有的数字以降序排列。这种情况下，第一个元素即为峰值。我们首先检查当前元素是否大于下个元素。第一个元素满足这一条件，因此被正确判断为峰值。此时，我们不需要继续向下判断，也就不会有需要判断 <em>nums[i]</em> 和上一个元素 <em>nums[i-1]</em> 的大小的情况。</p><p><a href="https://pic.leetcode-cn.com/fafef6e2070c9c444541d03e5d24c6c06f2f50f94026a22a9a86903e9d5ffcb1-image.png" target="_blank" rel="noopener">image.png</a></p><p>情况 2. </p><p>所有的数字以升序排列。这种情况下，我们会一直比较 <em>nums[i]</em> 与 <em>nums[i+1]</em> 以判断 <em>nums[i]</em> 是否是峰值元素。没有元素符合这一条件，说明处于上坡而非峰值。于是，在结尾，我们返回末尾元素作为峰值元素，得到正确结果。在这种情况下，我们同样不需要比较 <em>nums[i]</em> 和上一个元素 <em>nums[i-1]*，因为处于上坡是 *nums[i]</em> 不是峰值的充分条件。</p><p><a href="https://pic.leetcode-cn.com/06cbc777aee1d0d0a906aefd408e539014f783727e401f136b66581d0856aa6d-image.png" target="_blank" rel="noopener">image.png</a></p><p>情况 3. </p><p>峰值出现在中间某处。这种情况下，当遍历上升部分时，与情况 2 相同，没有元素满足 <em>nums[i] &gt; nums[i + 1]*。我们不需要比较 *nums[i]</em> 和上一个元素 <em>nums[i-1]<em>。当到达峰值元素时，</em>nums[i] &gt; nums[i + 1]</em> 条件满足。此时，我们同样不需要比较 <em>nums[i]</em> 和上一个元素 <em>nums[i-1]*。这是由于“遍历会到达第i个元素”本身就说明上一个元素（第i- 1个）不满足 *nums[i] &gt; nums[i + 1]</em> 这一条件，也就说明 <em>nums[i-1] &lt; nums[i]</em>。于是，我们同样可以得到正确结果。</p><p><a href="https://pic.leetcode-cn.com/802bad70c4444bf708f4c63e30e054a33c27ace43b3c7b4fa64a0ffb8201fb7d-image.png" target="_blank" rel="noopener">image.png</a></p><details>    <summary>线性扫描</summary><figure class="highlight java"><figcaption><span>[solution 1]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度 : <em>O(n)*。 我们对长度为 *n</em> 的数组 <em>nums</em> 只进行一次遍历。</li><li>空间复杂度 : <em>O(1)</em>。 只使用了常数空间。<br><br></li></ul><hr><h1 id="方法二：递归二分查找"><a href="#方法二：递归二分查找" class="headerlink" title="方法二：递归二分查找"></a>方法二：递归二分查找</h1><p><strong>算法</strong></p><p>我们可以将 <em>nums</em> 数组中的任何给定序列视为交替的升序和降序序列。通过利用这一点，以及“可以返回任何一个峰作为结果”的要求，我们可以利用二分查找来找到所需的峰值元素。</p><p>在简单的二分查找中，我们处理的是一个有序数列，并通过在每一步减少搜索空间来找到所需要的数字。在本例中，我们对二分查找进行一点修改。首先从数组 <em>nums</em> 中找到中间的元素 <em>mid*。若该元素恰好位于降序序列或者一个局部下降坡度中（通过将 *nums[i]</em> 与右侧比较判断)，则说明峰值会在本元素的左边。于是，我们将搜索空间缩小为 <em>mid</em> 的左边(包括其本身)，并在左侧子数组上重复上述过程。</p><p>若该元素恰好位于升序序列或者一个局部上升坡度中（通过将 <em>nums[i]</em> 与右侧比较判断)，则说明峰值会在本元素的右边。于是，我们将搜索空间缩小为 <em>mid</em> 的右边，并在右侧子数组上重复上述过程。</p><p>就这样，我们不断地缩小搜索空间，直到搜索空间中只有一个元素，该元素即为峰值元素。</p><p>为了理解本方法的原理，让我们再次讨论前文提到的全部三种情况。</p><p>情况 1. 这种情况下，首先找到中间元素 <em>3</em>。由于它处于下降坡度，将搜索空间缩小到 <code>[1, 2, 3]</code>。对于此子数组，<em>2</em> 为中间元素，也处于下降坡度中，于是将搜索空间缩小到 <code>[1, 2]</code>。现在 <em>1</em> 是中间元素并同样处于下降坡度，于是将搜索空间缩小到 <code>[1]</code>。 最终 <em>1</em> 作为答案被正确返回。</p><p> <a href="https://pic.leetcode-cn.com/63177d2c44aab77a657c0eb4589f7b7f45e754cf3408d9872bc3371e680c5908-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/317e900368f211d02e3f107e288824a0e351d39963aae9a210b1fe3730ef1eec-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/1a26071c6f370ccd84a417a4edbfcf7178b1daf78ed3270285861af4f77c6496-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/8a511427f1c0c1b7c58776fa238124f44c300fc632d13658e1f381f6fd23fa03-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/17974218262fc0e235fac8bfe9252058015de312546ce35ac217ab428360b780-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/7d34f6f13915860f01f1e18409534a06db73504ffa3ab7dc66422801697a8a39-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/e2edf7bcc45863a10d438dd92b8c4c6b6b63ff834aa11f05e4a104b5cbf859fc-image.png" target="_blank" rel="noopener">image.png</a> </p><p>情况 2. 这种情况下，首先找到中间元素 <em>3</em>。由于它处于上升坡度，将搜索空间缩小到 <code>[4, 5]</code>。对于此子数组，<em>4</em> 为中间元素，也处于上升坡度中，于是将搜索空间缩小到 <code>[5]</code>。 最终 <em>5</em> 作为答案被正确返回。</p><p> <a href="https://pic.leetcode-cn.com/935aeb721c5901d8f70a64aafc0bff14be030db7cf44605c051e5c87de2890c0-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/fb6d1262315867c62d818b0606b2628b6537d4b1b9c337bbaf3708fad257391c-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/6de90b2f77920d015f7a45191090b9265a49dae0c4585e8d514b1aaa39afd2b9-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/d359a685a16480ac4d6ad3d7e5df1f3b00524a74580982920bc01de72a9dd837-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/a976733e8b2e4817b2d88616b519bc58ca471ca15e9ee3f77fcc377a329e0d46-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/b0c6a62e9a0ebdc7a92995a1d633da7176cc82f9f3fe5e9e8f4b921b3d8fc4cc-image.png" target="_blank" rel="noopener">image.png</a> </p><p>情况 3. 这种情况下， 峰值位于中间某处。第一个中间元素是 <em>4</em>。它位于上升坡度，表明峰值在其右侧。于是，搜索空间缩小为 <code>[5, 1]</code>。 现在，<em>5</em> 位于下降坡度（相对其右侧相邻元素）, 搜索空间下降为 <code>[5]</code>。于是，<em>5</em> 被正确识别。</p><p> <a href="https://pic.leetcode-cn.com/3e49bacacecbf67aed75bcee9387dab5ccb7e7160dcc7c33be1be9e7a3acc563-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/8ee64c7b12c6b64b282324be43ecb89d29ac70d15dc3a35f2c62113cea7c23d8-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/78f6084e3bdfe12c05f2304d6a8b8c15e224f1b7f01f254bc04c0832c24c53b2-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/94cae61b8d045a3682d6a479417069776cabf13cc8bed930d07e088bcc2df575-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/03d56e48600ff839e6a6c8819d859d488e8bafd4c052fc61b7bdba09ed78ff8c-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/95f33e0a46ed380e3e5c2db5cb5a93479bb65463e7fcf6a7c953e3a039fe0461-image.png" target="_blank" rel="noopener">image.png</a> </p><details>    <summary>递归二分查找</summary><figure class="highlight java"><figcaption><span>[solution 2]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> search(nums, l, mid);</span><br><span class="line">        <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度 :  O(log_2(n)) 。每一步都将搜索空间减半。因此，总的搜索空间只需要 <em>log_2(n)</em> 步。其中 <em>n</em> 为 <em>nums</em> 数组的长度。</li><li>空间复杂度: O(log_2(n))  。每一步都将搜索空间减半。因此，总的搜索空间只需要 <em>log_2(n)</em> 步。于是，递归树的深度为 <em>log_2(n)</em>。<br><br></li></ul><hr><h1 id="方法三：迭代二分查找"><a href="#方法三：迭代二分查找" class="headerlink" title="方法三：迭代二分查找"></a>方法三：迭代二分查找</h1><p><strong>算法</strong></p><p>上述二分查找方法使用了递归。我们可以通过迭代达到同样的效果。本方法即为迭代实现二分查找。</p><details>    <summary>迭代二分查找</summary><figure class="highlight java"><figcaption><span>[solution 3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>])</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li>时间复杂度 : O(log_2(n))。 每一步都将搜索空间减半。因此，总的搜索空间只需要 <em>log_2(n)</em> 步。其中 <em>n</em> 为 <em>nums</em> 数组的长度。</li><li>空间复杂度 : <em>O(1)</em>。 只使用了常数空间。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;峰值元素是指其值大于左右相邻值的元素。&lt;/p&gt;
&lt;p&gt;给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>324. 摆动排序 II</title>
    <link href="http://yoursite.com/2020/08/24/324.%20%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F%20II/"/>
    <id>http://yoursite.com/2020/08/24/324. 摆动排序 II/</id>
    <published>2020-08-24T08:40:12.000Z</published>
    <updated>2020-08-24T09:54:43.599Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个无序的数组 nums，将它重新排列成 nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]… 的顺序。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: nums = [1, 5, 1, 1, 6, 4]输出: 一个可能的答案是 [1, 4, 1, 5, 1, 6]</code></pre><p>示例 2:</p><pre><code>输入: nums = [1, 3, 2, 2, 3, 1]输出: 一个可能的答案是 [2, 3, 1, 3, 1, 2]</code></pre><p>说明:<br>你可以假设所有输入都会得到有效的结果。</p><p>进阶:<br>你能用 O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？</p><p>这道题比较简单,主要说一下思想:         </p><h2 id="有一个数组-a1-a2-…-an-，我们怎么把它排成摇摆序列呢？"><a href="#有一个数组-a1-a2-…-an-，我们怎么把它排成摇摆序列呢？" class="headerlink" title="有一个数组[a1,a2,…,an]，我们怎么把它排成摇摆序列呢？"></a>有一个数组[a1,a2,…,an]，我们怎么把它排成摇摆序列呢？</h2><p>由摇摆序列的定义:<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>，我们知道了可以分成较大一部分的数和较小一部分数，然后互相穿插即可。比如一个数组排序后为：<code>A=[a1,a2,...,an]</code> <code>(a1&lt;=a2&lt;=....&lt;=an)</code>，然后分成较小和较大的两部分<code>[a1,a2,...,a(n/2)]</code>，<code>[a(n/2+1),...,an]</code>（数组长度为奇数时不影响），再进行穿插操作。</p><h2 id="那是不是穿插成-a1-a-n-2-1-a2-a-n-2-2-…-an-就行了呢？"><a href="#那是不是穿插成-a1-a-n-2-1-a2-a-n-2-2-…-an-就行了呢？" class="headerlink" title="那是不是穿插成[a1,a(n/2+1),a2,a(n/2+2),…,an]就行了呢？"></a>那是不是穿插成[a1,a(n/2+1),a2,a(n/2+2),…,an]就行了呢？</h2><p>其实不对，可以验证特殊情况：n比较小时且为偶数时，穿插后的序列需要满足<code>a(n/2+1)&gt;a2</code>，如果<code>a1&lt;a2&lt;=a(n/2+1)&lt;an</code>，<code>a(n/2+1)</code>正好是<code>a2</code>的后一项且与<code>a2</code>相等呢？即如果是<code>[4,5,5,6]</code>的情况呢？<br>那就分成了<code>[4,5]</code>，<code>[5,6]</code>两部分，之后穿插成的是<code>[4,5,5,6]</code>并不是摇摆序列。</p><h2 id="应该怎样排列呢？"><a href="#应该怎样排列呢？" class="headerlink" title="应该怎样排列呢？"></a>应该怎样排列呢？</h2><ol><li>把较小和较大的两部分<code>[a1,a2,...,a(n/2)]</code>，<code>[a(n/2+1),...,an]</code>翻转成<code>[a(n/2),...,a1]</code>，<code>[an,...,a(n/2+1)]</code></li><li>排列成<code>B=[a(n/2),a(n),a(n/2-1),a(n-1),...,a1,a(n/2+1)]</code>即可。</li></ol><p>这样相邻两个数一定不存在相等的情况，而且满足摇摆序列的要求。</p><ul><li><p><code>n=1</code>时显然正确</p></li><li><p><code>n=2或n=3</code>时也显然正确。</p></li><li><p><code>n&gt;=4时</code>：</p><ol><li><p>首先，判断相邻的情况，如果B中现在相邻两数在原来的有序序列A也相邻，此时令<code>n-n/2=1， (n-1)-(n/2-1)=1，...</code>都解得<code>n=2</code>，意思是<code>n=2</code>是他们的公共解，而<code>n&gt;=4</code>时，<code>n-n/2， (n-1)-(n/2-1)</code>等于<code>n/2&gt;=2</code>，说明B中相邻两数一定在原来的有序序列A中不相邻；</p></li><li><p>有人会说也存在原本(在A中)不相邻但是相等的情况，即几个数连续相等，但其中两个相等的数并不相邻，比如<code>aq=a(q+1)=a(q+2)</code>，<code>aq=a(q+2)</code>相等但是不相邻，但是我们知道如果<code>a(n/2-k)=a(n-k)</code>即不相邻相等，那么由于他们中间的所有数都要相等，而且与这两个数相等才能保证不相邻相等：即<code>a(n/2-k)=a(n/2-k+1)=a(n/2-k+2)=...=a(n-k-2)=a(n-k-1)=a(n-k)</code>，一共<code>n/2+1</code>个数相等。</p></li><li><p>而不相邻相等这种情况是不行的：虽然只有<code>a(n/2-k),a(n-k)</code>（在B中相邻）在原序列A中不相邻相等，但也违背了摇摆序列的定义，所以这道题有一个隐藏的条件：输入序列在排序后最多只有序列长度一半(<code>n/2</code>)的相邻的数连续相等。</p></li></ol></li><li><p>在这个条件下：这道题按此排列就没问题。大家可以用🖊验证一下。</p></li></ul><p>代码如下:</p><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先排序再穿插</span></span><br><span class="line"><span class="comment">     * O(nlogn)+O(n)=O(nlogn)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span> smalllen = (len % <span class="number">2</span> == <span class="number">0</span>) ? len / <span class="number">2</span> : (len / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span>[] smaller = <span class="keyword">new</span> <span class="keyword">int</span>[smalllen], bigger = <span class="keyword">new</span> <span class="keyword">int</span>[len / <span class="number">2</span>];</span><br><span class="line">    System.arraycopy(nums, <span class="number">0</span>, smaller, <span class="number">0</span>, smaller.length);</span><br><span class="line">    System.arraycopy(nums,smaller.length,bigger,<span class="number">0</span>,bigger.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++) &#123;</span><br><span class="line">        nums[<span class="number">2</span> * i] = smaller[smaller.length - <span class="number">1</span> - i];</span><br><span class="line">        nums[<span class="number">2</span> * i + <span class="number">1</span>] = bigger[bigger.length-i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        nums[len - <span class="number">1</span>] = smaller[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个无序的数组 nums，将它重新排列成 nums[0] &amp;lt; nums[1] &amp;gt; nums[2] &amp;lt; nums[3]… 的顺序。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>179. 最大数</title>
    <link href="http://yoursite.com/2020/08/24/179.%20%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/24/179. 最大数/</id>
    <published>2020-08-24T08:00:12.000Z</published>
    <updated>2020-08-24T08:39:23.127Z</updated>
    
    <content type="html"><![CDATA[<p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: [10,2]输出: 210</code></pre><p>示例 2:</p><pre><code>输入: [3,30,34,5,9]输出: 9534330</code></pre><p>说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p><h1 id="自定义排序："><a href="#自定义排序：" class="headerlink" title="自定义排序："></a>自定义排序：</h1><p><strong>想法</strong></p><p>为了构建最大数字，我们希望越高位的数字越大越好。</p><p><strong>算法</strong></p><p>首先，我们将每个整数变成字符串。然后进行排序。</p><p>如果仅按降序排序，有相同的开头数字的时候会出现问题。比方说，样例 2 按降序排序得到的数字是 <em>95343303</em> ，然而交换 <em>3</em> 和 <em>30</em> 的位置可以得到正确答案 <em>9534330</em> 。因此，每一对数在排序的比较过程中，我们比较两种连接顺序哪一种更好。我们可以证明这样的做法是正确的：</p><p>假设（不是一般性），某一对整数 <em>a</em> 和 <em>b</em> ，我们的比较结果是 <em>a</em> 应该在 <em>b</em> 前面，这意味着 a ^ b&gt;b ^ a ，其中 ^  表示连接。如果排序结果是错的，说明存在一个 <em>c</em> ， <em>b</em> 在 <em>c</em> 前面且 <em>c</em> 在 <em>a</em> 的前面。这产生了矛盾，因为a ^ b&gt;b ^ a  和b ^c &gt;c ^ b 意味着 a ^ c &gt;c ^ a  。换言之，我们的自定义比较方法保证了传递性，所以这样子排序是对的。</p><p>一旦数组排好了序，最“重要”的数字会在最前面。有一个需要注意的情况是如果数组只包含 0 ，我们直接返回结果 <em>0</em> 即可。否则，我们用排好序的数组形成一个字符串并返回。</p><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerNumberComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">            String order1 = a + b;</span><br><span class="line">            String order2 = b + a;</span><br><span class="line">           <span class="keyword">return</span> order2.compareTo(order1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Get input integers as strings.</span></span><br><span class="line">        String[] asStrs = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            asStrs[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort strings according to custom comparator.</span></span><br><span class="line">        Arrays.sort(asStrs, <span class="keyword">new</span> LargerNumberComparator());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If, after being sorted, the largest number is `0`, the entire number</span></span><br><span class="line">        <span class="comment">// is zero.</span></span><br><span class="line">        <span class="keyword">if</span> (asStrs[<span class="number">0</span>].equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build largest number from sorted array.</span></span><br><span class="line">        String largestNumberStr = <span class="keyword">new</span> String();</span><br><span class="line">        <span class="keyword">for</span> (String numAsStr : asStrs) &#123;</span><br><span class="line">            largestNumberStr += numAsStr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> largestNumberStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargerNumKey</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x+y &gt; y+x</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        largest_num = <span class="string">''</span>.join(sorted(map(str, nums), key=LargerNumKey))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0'</span> <span class="keyword">if</span> largest_num[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">else</span> largest_num</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(nlgn)</em></p><p>  尽管我们在比较函数中做了一些额外的工作，但是这只是一个常数因子。所以总的时间复杂度是由排序决定的，在 Python 和 Java 中都是 <em>O(nlgn)</em> 。</p></li><li><p>空间复杂度：<em>O(n)</em></p><p>  这里，我们使用了 <em>O(n)</em> 的额外空间去保存 <code>nums</code> 的副本。尽管我们就地进行了一些额外的工作，但最后返回的数组需要 <em>O(n)</em> 的空间。因此，需要的额外空间与 <code>nums</code> 大小成线性关系。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>297. 二叉树的序列化与反序列化</title>
    <link href="http://yoursite.com/2020/08/24/297.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2020/08/24/297. 二叉树的序列化与反序列化/</id>
    <published>2020-08-24T03:19:12.000Z</published>
    <updated>2020-08-24T06:54:22.665Z</updated>
    
    <content type="html"><![CDATA[<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><a id="more"></a><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><p>示例: </p><pre><code>你可以将以下二叉树：    1   / \  2   3     / \    4   5序列化为 &quot;[1,2,3,null,null,4,5]&quot;</code></pre><p>提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p><p>说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p><h1 id="方法一：深度优先搜索"><a href="#方法一：深度优先搜索" class="headerlink" title="方法一：深度优先搜索"></a>方法一：深度优先搜索</h1><p><strong>思路和算法</strong></p><p>二叉树的序列化本质上是对其值进行编码，更重要的是对其结构进行编码。可以遍历树来完成上述任务。众所周知，我们一般有两个策略：BFS / DFS。</p><ul><li>BFS 可以按照层次的顺序从上到下遍历所有的节点</li><li>DFS 可以从一个根开始，一直延伸到某个叶，然后回到根，到达另一个分支。根据根节点、左节点和右节点之间的相对顺序，可以进一步将DFS策略区分为：<ul><li>先序遍历</li><li>中序遍历</li><li>后序遍历</li></ul></li></ul><p>这里，我们选择先序遍历的编码方式，我们可以通过这样一个例子简单理解：</p><p> <a href="https://assets.leetcode-cn.com/solution-static/297/1.PNG" target="_blank" rel="noopener">fig1</a> <a href="https://assets.leetcode-cn.com/solution-static/297/2.PNG" target="_blank" rel="noopener">fig2</a> <a href="https://assets.leetcode-cn.com/solution-static/297/3.PNG" target="_blank" rel="noopener">fig3</a> <a href="https://assets.leetcode-cn.com/solution-static/297/4.PNG" target="_blank" rel="noopener">fig4</a> <a href="https://assets.leetcode-cn.com/solution-static/297/5.PNG" target="_blank" rel="noopener">fig5</a> <a href="https://assets.leetcode-cn.com/solution-static/297/6.PNG" target="_blank" rel="noopener">fig6</a> <a href="https://assets.leetcode-cn.com/solution-static/297/7.PNG" target="_blank" rel="noopener">fig7</a> <a href="https://assets.leetcode-cn.com/solution-static/297/8.PNG" target="_blank" rel="noopener">fig8</a> <a href="https://assets.leetcode-cn.com/solution-static/297/9.PNG" target="_blank" rel="noopener">fig9</a> <a href="https://assets.leetcode-cn.com/solution-static/297/10.PNG" target="_blank" rel="noopener">fig10</a> <a href="https://assets.leetcode-cn.com/solution-static/297/11.PNG" target="_blank" rel="noopener">fig11</a> <a href="https://assets.leetcode-cn.com/solution-static/297/12.PNG" target="_blank" rel="noopener">fig12</a> </p><p>我们从根节点 <code>1</code> 开始，序列化字符串是 <code>1,</code>。然后我们跳到根节点 <code>2</code> 的左子树，序列化字符串变成 <code>1,2,</code>。现在从节点 <code>2</code> 开始，我们访问它的左节点 <code>3</code>（<code>1,2,3,None,None,</code>）和右节点 <code>4</code>(<code>1,2,3,None,None,4,None,None</code>)。<code>None,None,</code> 是用来标记缺少左、右子节点，这就是我们在序列化期间保存树结构的方式。最后，我们回到根节点 <code>1</code> 并访问它的右子树，它恰好是叶节点 <code>5</code>。最后，序列化字符串是 <code>1,2,3,None,None,4,None,None,5,None,None,</code>。</p><p>即我们可以先序遍历这颗二叉树，遇到空子树的时候序列化成 <code>None</code>，否则继续递归序列化。那么我们如何反序列化呢？首先我们需要根据 <code>,</code> 把原先的序列分割开来得到先序遍历的元素列表，然后从左向右遍历这个序列：</p><ul><li>如果当前的元素为 <code>None</code>，则当前为空树</li><li>否则先解析这棵树的左子树，再解析它的右子树</li></ul><p>具体请参考下面的代码。</p><p><strong>代码</strong></p><details>    <summary>深度优先搜索java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rserialize</span><span class="params">(TreeNode root, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            str += <span class="string">"None,"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str += str.valueOf(root.val) + <span class="string">","</span>;</span><br><span class="line">            str = rserialize(root.left, str);</span><br><span class="line">            str = rserialize(root.right, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rserialize(root, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">rdeserialize</span><span class="params">(List&lt;String&gt; l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l.get(<span class="number">0</span>).equals(<span class="string">"None"</span>)) &#123;</span><br><span class="line">            l.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(Integer.valueOf(l.get(<span class="number">0</span>)));</span><br><span class="line">        l.remove(<span class="number">0</span>);</span><br><span class="line">        root.left = rdeserialize(l);</span><br><span class="line">        root.right = rdeserialize(l);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        String[] data_array = data.split(<span class="string">","</span>);</span><br><span class="line">        List&lt;String&gt; data_list = <span class="keyword">new</span> LinkedList&lt;String&gt;(Arrays.asList(data_array));</span><br><span class="line">        <span class="keyword">return</span> rdeserialize(data_list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Codec <span class="keyword">struct</span> &#123;</span><br><span class="line">    l []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">Codec</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Codec&#123;&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rserialize</span><span class="params">(root *TreeNode, str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        str += <span class="string">"null,"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        str += strconv.Itoa(root.Val) + <span class="string">","</span></span><br><span class="line">        str = rserialize(root.Left, str)</span><br><span class="line">        str = rserialize(root.Right, str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serializes a tree to a single string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span> <span class="title">serialize</span><span class="params">(root *TreeNode)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rserialize(root, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deserializes your encoded data to tree.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span> <span class="title">deserialize</span><span class="params">(data <span class="keyword">string</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    l := strings.Split(data, <span class="string">","</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(l); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> l[i] != <span class="string">""</span> &#123;</span><br><span class="line">            this.l = <span class="built_in">append</span>(this.l, l[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> this.rdeserialize()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span> <span class="title">rdeserialize</span><span class="params">()</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> this.l[<span class="number">0</span>] == <span class="string">"null"</span> &#123;</span><br><span class="line">        this.l = this.l[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val, _ := strconv.Atoi(this.l[<span class="number">0</span>])</span><br><span class="line">    root := &amp;TreeNode&#123;Val: val&#125;</span><br><span class="line">    this.l = this.l[<span class="number">1</span>:]</span><br><span class="line">    root.Left = this.rdeserialize()</span><br><span class="line">    root.Right = this.rdeserialize()</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：在序列化和反序列化函数中，我们只访问每个节点一次，因此时间复杂度为 <em>O(n)*，其中 *n</em> 是节点数，即树的大小。 </li><li>空间复杂度：在序列化和反序列化函数中，我们递归会使用栈空间，故渐进空间复杂度为 <em>O(n)</em>。 </li></ul><h1 id="方法二：括号表示编码-递归下降解码"><a href="#方法二：括号表示编码-递归下降解码" class="headerlink" title="方法二：括号表示编码 + 递归下降解码"></a>方法二：括号表示编码 + 递归下降解码</h1><p><strong>思路和算法</strong></p><p>我们也可以这样表示一颗二叉树：</p><ul><li>如果当前的树为空，则表示为 <code>X</code></li><li>如果当前的树不为空，则表示为 <code>(&lt;LEFT_SUB_TREE&gt;)CUR_NUM(RIGHT_SUB_TREE)</code>，其中：<ul><li><code>&lt;LEFT_SUB_TREE&gt;</code> 是左子树序列化之后的结果</li><li><code>&lt;RIGHT_SUB_TREE&gt;</code> 是右子树序列化之后的结果</li><li><code>CUR_NUM</code> 是当前节点的值</li></ul></li></ul><p>根据这样的定义，我们很好写出序列化的过程，后序遍历这颗二叉树即可，那如何反序列化呢？根据定义，我们可以推导出这样的巴科斯范式（BNF）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T -&gt; (T) num (T) | X</span><br></pre></td></tr></table></figure><p>它的意义是：用 <code>T</code> 代表一棵树序列化之后的结果，<code>|</code> 表示 <code>T</code> 的构成为 <code>(T) num (T)</code> 或者 <code>X</code>，<code>|</code> 左边是对 <code>T</code> 的递归定义，右边规定了递归终止的边界条件。</p><p>因为：</p><ul><li><code>T</code> 的定义中，序列中的第一个字符要么是 <code>X</code>，要么是 <code>(</code>，所以这个定义是不含左递归的</li><li>当我们开始解析一个字符串的时候，如果开头是 <code>X</code>，我们就知道这一定是解析一个「空树」的结构，如果开头是 <code>(</code>，我们就知道需要解析 <code>(T) num (T)</code> 的结构，因此这里两种开头和两种解析方法一一对应，可以确定这是一个无二义性的文法</li><li>我们只需要通过开头的第一个字母是 <code>X</code> 还是 <code>(</code> 来判断使用哪一种解析方法</li></ul><p>所以这个文法是 LL(1) 型文法，<strong>如果你不知道什么是 LL(1) 型文法也没有关系，你只需要知道它定义了一种递归的方法来反序列化，也保证了这个方法的正确性——我们可以设计一个递归函数：</strong></p><ul><li>这个递归函数传入两个参数，带解析的字符串和当前当解析的位置 <code>ptr</code>，<code>ptr</code> 之前的位置是已经解析的，<code>ptr</code> 和 <code>ptr</code> 后面的字符串是待解析的</li><li>如果当前位置为 <code>X</code> 说明解析到了一棵空树，直接返回</li><li>否则当前位置一定是 <code>(</code>，对括号内部按照 <code>(T) num (T)</code> 的模式解析</li></ul><p>具体请参考下面的代码。</p><p><strong>代码</strong></p><details>    <summary>括号表示编码 + 递归下降解码cpp</summary><figure class="highlight cpp"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="string">"X"</span>;</span><br><span class="line">        <span class="keyword">auto</span> l = <span class="string">"("</span> + serialize(root-&gt;left) + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="string">"("</span> + serialize(root-&gt;right) + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">return</span>  l + to_string(root-&gt;val) + r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> TreeNode* <span class="title">parseSubtree</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;data, <span class="keyword">int</span> &amp;ptr)</span> </span>&#123;</span><br><span class="line">        ++ptr; <span class="comment">// 跳过左括号</span></span><br><span class="line">        <span class="keyword">auto</span> subtree = parse(data, ptr);</span><br><span class="line">        ++ptr; <span class="comment">// 跳过右括号</span></span><br><span class="line">        <span class="keyword">return</span> subtree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;data, <span class="keyword">int</span> &amp;ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, sgn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(data[ptr])) &#123;</span><br><span class="line">            sgn = <span class="number">-1</span>;</span><br><span class="line">            ++ptr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(data[ptr])) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + data[ptr++] - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x * sgn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;data, <span class="keyword">int</span> &amp;ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data[ptr] == <span class="string">'X'</span>) &#123;</span><br><span class="line">            ++ptr;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cur = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">        cur-&gt;left = parseSubtree(data, ptr);</span><br><span class="line">        cur-&gt;val = parseInt(data, ptr);</span><br><span class="line">        cur-&gt;right = parseSubtree(data, ptr);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ptr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> parse(data, ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>括号表示编码 + 递归下降解码java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"X"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String l = <span class="string">"("</span> + serialize(root.left) + <span class="string">")"</span>;</span><br><span class="line">        String r = <span class="string">"("</span> + serialize(root.right) + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">return</span>  l + root.val + r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ptr = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> parse(data, ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">parse</span><span class="params">(String data, <span class="keyword">int</span>[] ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.charAt(ptr[<span class="number">0</span>]) == <span class="string">'X'</span>) &#123;</span><br><span class="line">            ++ptr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode cur = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">        cur.left = parseSubtree(data, ptr);</span><br><span class="line">        cur.val = parseInt(data, ptr);</span><br><span class="line">        cur.right = parseSubtree(data, ptr);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">parseSubtree</span><span class="params">(String data, <span class="keyword">int</span>[] ptr)</span> </span>&#123;</span><br><span class="line">        ++ptr[<span class="number">0</span>]; <span class="comment">// 跳过左括号</span></span><br><span class="line">        TreeNode subtree = parse(data, ptr);</span><br><span class="line">        ++ptr[<span class="number">0</span>]; <span class="comment">// 跳过右括号</span></span><br><span class="line">        <span class="keyword">return</span> subtree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String data, <span class="keyword">int</span>[] ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, sgn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!Character.isDigit(data.charAt(ptr[<span class="number">0</span>]))) &#123;</span><br><span class="line">            sgn = -<span class="number">1</span>;</span><br><span class="line">            ++ptr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Character.isDigit(data.charAt(ptr[<span class="number">0</span>]))) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + data.charAt(ptr[<span class="number">0</span>]++) - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x * sgn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：序列化时做了一次遍历，渐进时间复杂度为 <em>O(n)</em>。反序列化时，在解析字符串的时候 <code>ptr</code> 指针对字符串做了一次顺序遍历，字符串长度为 <em>O(n)</em>，故这里的渐进时间复杂度为 <em>O(n)</em>。</li><li>空间复杂度：考虑递归使用的栈空间的大小，这里栈空间的使用和递归深度有关，递归深度又和二叉树的深度有关，在最差情况下，二叉树退化成一条链，故这里的渐进空间复杂度为 <em>O(n)</em>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>236. 二叉树的最近公共祖先</title>
    <link href="http://yoursite.com/2020/08/24/236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2020/08/24/236. 二叉树的最近公共祖先/</id>
    <published>2020-08-24T01:48:12.000Z</published>
    <updated>2020-08-24T03:19:02.216Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><a id="more"></a><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><p>示例 1:</p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</code></pre><p>示例 2:</p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</code></pre><p>说明:</p><pre><code>所有节点的值都是唯一的。p、q 为不同节点且均存在于给定的二叉树中。</code></pre><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="6258a388-b9c6-486c-9d92-c09571d373a9">236. 二叉树的最近公共祖先.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h2><p><strong>思路和算法</strong></p><p>我们递归遍历整棵二叉树，定义 <em>f_x</em> 表示 <em>x</em> 节点的子树中是否包含 <em>p</em> 节点或 <em>q</em> 节点，如果包含为 <code>true</code>，否则为 <code>false</code>。那么符合条件的最近公共祖先 <em>x</em> 一定满足如下条件：</p><pre><code>(flson&amp;&amp;frson)∣∣((x=p∣∣x=q)&amp;&amp;(flson∣∣frson))</code></pre><p>其中 flson 和frson分别代表 <em>x</em> 节点的左孩子和右孩子。初看可能会感觉条件判断有点复杂，我们来一条条看，flson&amp;&amp;frson说明左子树和右子树均包含 <em>p</em> 节点或 <em>q</em> 节点，如果左子树包含的是 <em>p</em> 节点，那么右子树只能包含 <em>q</em> 节点，反之亦然，因为 <em>p</em> 节点和 <em>q</em> 节点都是不同且唯一的节点，因此如果满足这个判断条件即可说明 <em>x</em> 就是我们要找的最近公共祖先。再来看第二条判断条件，这个判断条件即是考虑了 <em>x</em> 恰好是 <em>p</em> 节点或 <em>q</em> 节点且它的左子树或右子树有一个包含了另一个节点的情况，因此如果满足这个判断条件亦可说明 <em>x</em> 就是我们要找的最近公共祖先。</p><p>你可能会疑惑这样找出来的公共祖先深度是否是最大的。其实是最大的，因为我们是自底向上从叶子节点开始更新的，所以在所有满足条件的公共祖先中一定是深度最大的祖先先被访问到，且由于 <em>f_x</em> 本身的定义很巧妙，在找到最近公共祖先 <em>x</em> 以后，<em>f_x</em> 按定义被设置为 <code>true</code> ，即假定了这个子树中只有一个 <em>p</em> 节点或 <em>q</em> 节点，因此其他公共祖先不会再被判断为符合条件。</p><p>下图展示了一个示例，搜索树中两个节点 <code>9</code> 和 <code>11</code> 的最近公共祖先。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/236/1.PNG" target="_blank" rel="noopener">fig1</a> <a href="https://assets.leetcode-cn.com/solution-static/236/2.PNG" target="_blank" rel="noopener">fig2</a> <a href="https://assets.leetcode-cn.com/solution-static/236/3.PNG" target="_blank" rel="noopener">fig3</a> <a href="https://assets.leetcode-cn.com/solution-static/236/4.PNG" target="_blank" rel="noopener">fig4</a> <a href="https://assets.leetcode-cn.com/solution-static/236/5.PNG" target="_blank" rel="noopener">fig5</a> <a href="https://assets.leetcode-cn.com/solution-static/236/6.PNG" target="_blank" rel="noopener">fig6</a> <a href="https://assets.leetcode-cn.com/solution-static/236/7.PNG" target="_blank" rel="noopener">fig7</a> <a href="https://assets.leetcode-cn.com/solution-static/236/8.PNG" target="_blank" rel="noopener">fig8</a> <a href="https://assets.leetcode-cn.com/solution-static/236/9.PNG" target="_blank" rel="noopener">fig9</a> <a href="https://assets.leetcode-cn.com/solution-static/236/10.PNG" target="_blank" rel="noopener">fig10</a> <a href="https://assets.leetcode-cn.com/solution-static/236/11.PNG" target="_blank" rel="noopener">fig11</a> </p><details>    <summary>递归C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* ans;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> lson = dfs(root-&gt;left, p, q);</span><br><span class="line">        <span class="keyword">bool</span> rson = dfs(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">if</span> ((lson &amp;&amp; rson) || ((root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val) &amp;&amp; (lson || rson))) &#123;</span><br><span class="line">            ans = root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> lson || rson || (root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        dfs(root, p, q);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans;</span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">root, p, q</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">const</span> lson = dfs(root.left, p, q);</span><br><span class="line">        <span class="keyword">const</span> rson = dfs(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> ((lson &amp;&amp; rson) || ((root.val === p.val || root.val === q.val) &amp;&amp; (lson || rson))) &#123;</span><br><span class="line">            ans = root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> lson || rson || (root.val === p.val || root.val === q.val);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root, p, q);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ans = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> lson = dfs(root.left, p, q);</span><br><span class="line">        <span class="keyword">boolean</span> rson = dfs(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> ((lson &amp;&amp; rson) || ((root.val == p.val || root.val == q.val) &amp;&amp; (lson || rson))) &#123;</span><br><span class="line">            ans = root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> lson || rson || (root.val == p.val || root.val == q.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dfs(root, p, q);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Val == p.Val || root.Val == q.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">    left := lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">    right := lowestCommonAncestor(root.Right, p, q)</span><br><span class="line">    <span class="keyword">if</span> left != <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N)*，其中 *N</em> 是二叉树的节点数。二叉树的所有节点有且只会被访问一次，因此时间复杂度为 <em>O(N)</em>。</p></li><li><p>空间复杂度：<em>O(N)</em> ，其中 <em>N</em> 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 <em>N</em>，因此空间复杂度为 <em>O(N)</em>。</p></li></ul><h4 id="方法二：存储父节点"><a href="#方法二：存储父节点" class="headerlink" title="方法二：存储父节点"></a>方法二：存储父节点</h4><p><strong>思路</strong></p><p>我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 <code>p</code> 结点开始不断往上跳，并记录已经访问过的节点，再从 <code>q</code> 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。</p><p><strong>算法</strong></p><ol><li>从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。</li><li>从 <code>p</code> 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。</li><li>同样，我们再从 <code>q</code> 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 <code>p</code> 和 <code>q</code> 的深度最深的公共祖先，即 LCA 节点。</li></ol><details>    <summary>存储父节点C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, TreeNode*&gt; fa;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; vis;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa[root-&gt;left-&gt;val] = root;</span><br><span class="line">            dfs(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa[root-&gt;right-&gt;val] = root;</span><br><span class="line">            dfs(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        fa[root-&gt;val] = <span class="literal">nullptr</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            vis[p-&gt;val] = <span class="literal">true</span>;</span><br><span class="line">            p = fa[p-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[q-&gt;val]) <span class="keyword">return</span> q;</span><br><span class="line">            q = fa[q-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>存储父节点Java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, TreeNode&gt; parent = <span class="keyword">new</span> HashMap&lt;Integer, TreeNode&gt;();</span><br><span class="line">    Set&lt;Integer&gt; visited = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent.put(root.left.val, root);</span><br><span class="line">            dfs(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent.put(root.right.val, root);</span><br><span class="line">            dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            visited.add(p.val);</span><br><span class="line">            p = parent.get(p.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited.contains(q.val)) &#123;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            q = parent.get(q.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>存储父节点golang</summary><figure class="highlight golang"><figcaption><span>[sol2-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    parent := <span class="keyword">map</span>[<span class="keyword">int</span>]*TreeNode&#123;&#125;</span><br><span class="line">    visited := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span></span></span><br><span class="line"><span class="function">    <span class="title">dfs</span> = <span class="title">func</span><span class="params">(r *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            parent[r.Left.Val] = r</span><br><span class="line">            dfs(r.Left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            parent[r.Right.Val] = r</span><br><span class="line">            dfs(r.Right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">        visited[p.Val] = <span class="literal">true</span></span><br><span class="line">        p = parent[p.Val]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> q != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> visited[q.Val] &#123;</span><br><span class="line">            <span class="keyword">return</span> q</span><br><span class="line">        &#125;</span><br><span class="line">        q = parent[q.Val]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N)*，其中 *N</em> 是二叉树的节点数。二叉树的所有节点有且只会被访问一次，从 <code>p</code> 和 <code>q</code> 节点往上跳经过的祖先节点个数不会超过 <em>N</em>，因此总的时间复杂度为 <em>O(N)</em>。</p></li><li><p>空间复杂度：<em>O(N)</em> ，其中 <em>N</em> 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 <em>N</em>，因此空间复杂度为 <em>O(N)*，哈希表存储每个节点的父节点也需要 *O(N)</em> 的空间复杂度，因此最后总的空间复杂度为 <em>O(N)</em>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>230. 二叉搜索树中第K小的元素</title>
    <link href="http://yoursite.com/2020/08/22/230.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2020/08/22/230. 二叉搜索树中第K小的元素/</id>
    <published>2020-08-22T05:44:12.000Z</published>
    <updated>2020-08-24T01:47:21.206Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p><a id="more"></a><p>说明：<br>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><p>示例 1:</p><pre><code>输入: root = [3,1,4,null,2], k = 1   3  / \ 1   4  \   2输出: 1</code></pre><p>示例 2:</p><pre><code>输入: root = [5,3,6,2,4,null,null,1], k = 3       5      / \     3   6    / \   2   4  / 1输出: 3</code></pre><p>进阶：</p><p>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？</p><h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p><strong>怎么遍历树：</strong></p><ul><li>深度优先搜索（<code>DFS</code>）</li></ul><p>在这个策略中，我们从根延伸到某一片叶子，然后再返回另一个分支。根据根节点，左节点，右节点的相对顺序，<code>DFS</code> 还可以分为前序，中序，后序。 </p><ul><li>广度优先搜索（<code>BFS</code>）</li></ul><p>在这个策略中，我们逐层，从上到下扫描整个树。</p><p>下图展示了不同的遍历策略：<br><a href="https://pic.leetcode-cn.com/40cb9af2a0c21fdc1ce72e6e24b48bd73d5f280c0f4b207ce3d7cf0c19fbdf21-file_1579413216186" target="_blank" rel="noopener">不同的遍历策略</a></p><p>为了解决这个问题，可以使用 BST 的特性：BST 的中序遍历是升序序列。</p><h1 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h1><p><strong>算法：</strong></p><p>通过构造 BST 的中序遍历序列，则第 <code>k-1</code> 个元素就是第 <code>k</code> 小的元素。</p><p><a href="https://pic.leetcode-cn.com/7dc3fe454519e27105c5aaf57d20b26137bd77c56bb0289830bf18116627de12-file_1579413216156" target="_blank" rel="noopener">递归</a></p><details>    <summary>递归python</summary><figure class="highlight python"><figcaption><span>[solution1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(r)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> inorder(r.left) + [r.val] + inorder(r.right) <span class="keyword">if</span> r <span class="keyword">else</span> []</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> inorder(root)[k - <span class="number">1</span>]</span><br></pre></td></tr></table></figure></details><details>    <summary>递归java</summary><figure class="highlight java"><figcaption><span>[solution1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">inorder</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    inorder(root.left, arr);</span><br><span class="line">    arr.add(root.val);</span><br><span class="line">    inorder(root.right, arr);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; nums = inorder(root, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">    <span class="keyword">return</span> nums.get(k - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li>时间复杂度：<em>O(N)</em>，遍历了整个树。</li><li>空间复杂度：<em>O(N)</em>，用了一个数组存储中序序列。</li></ul><h1 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h1><p><strong>算法：</strong></p><p>在栈的帮助下，可以将方法一的递归转换为迭代，这样可以加快速度，因为这样可以不用遍历整个树，可以在找到答案后停止。</p><p><a href="https://pic.leetcode-cn.com/25159a5137867644b75f203ee1917645d2cd454d8f4871e371d7edfa67bef083-file_1579413216176" target="_blank" rel="noopener">迭代</a></p><details>    <summary>迭代python</summary><figure class="highlight python"><figcaption><span>[solution2-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k:</span><br><span class="line">                <span class="keyword">return</span> root.val</span><br><span class="line">            root = root.right</span><br></pre></td></tr></table></figure></details><details>    <summary>迭代java</summary><figure class="highlight java"><figcaption><span>[solution2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.add(root);</span><br><span class="line">        root = root.left;</span><br><span class="line">      &#125;</span><br><span class="line">      root = stack.removeLast();</span><br><span class="line">      <span class="keyword">if</span> (--k == <span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">      root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(H+k) ，其中 <em>H</em> 指的是树的高度，由于我们开始遍历之前，要先向下达到叶，当树是一个平衡树时：复杂度为 O(logN+k) 。当树是一个不平衡树时：复杂度为O(N+k) ，此时所有的节点都在左子树。</li><li>空间复杂度：O(H+k)  。当树是一个平衡树时：O(logN+k) 。当树是一个非平衡树时：O(N+k) 。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>380. 常数时间插入、删除和获取随机元素</title>
    <link href="http://yoursite.com/2020/08/21/380.%20%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2020/08/21/380. 常数时间插入、删除和获取随机元素/</id>
    <published>2020-08-21T09:26:12.000Z</published>
    <updated>2020-08-22T05:41:24.660Z</updated>
    
    <content type="html"><![CDATA[<p>设计一个支持在平均时间复杂度 O(1)下，执行以下操作的数据结构。</p><a id="more"></a><p>操作:</p><pre><code>insert(val)：当元素 val 不存在时，向集合中插入该项。remove(val)：元素 val 存在时，从集合中移除该项。getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。</code></pre><p>示例 :</p><pre><code>// 初始化一个空的集合。RandomizedSet randomSet = new RandomizedSet();// 向集合中插入 1 。返回 true 表示 1 被成功地插入。randomSet.insert(1);// 返回 false ，表示集合中不存在 2 。randomSet.remove(2);// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。randomSet.insert(2);// getRandom 应随机返回 1 或 2 。randomSet.getRandom();// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。randomSet.remove(1);// 2 已在集合中，所以返回 false 。randomSet.insert(2);// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。randomSet.getRandom();</code></pre><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我们需要在平均复杂度为  O(1)  实现以下操作：</p><ol><li><code>insert</code></li><li><code>remove</code></li><li><code>getRadom</code></li></ol><p>让我们想想如何实现它。从 <code>insert</code> 开始，我们具有两个平均插入时间为 O(1)的选择：</p><ul><li>哈希表：Java 中为 <code>HashMap</code>，Python 中为 <code>dictionary</code>。</li><li>动态数组：Java 中为 <code>ArrayList</code>，Python 中为 <code>list</code>。</li></ul><p>让我们一个个进行思考，虽然哈希表提供常数时间的插入和删除，但是实现 <code>getRandom</code> 时会出现问题。</p><p><code>getRandom</code> 的思想是选择一个随机索引，然后使用该索引返回一个元素。而哈希表中没有索引，因此要获得真正的随机值，则要将哈希表中的键转换为列表，这需要线性时间。解决的方法是用一个列表存储值，并在该列表中实现常数时间的 <code>getRandom</code>。</p><p>列表有索引可以实现常数时间的 <code>insert</code> 和 <code>getRandom</code>，则接下来的问题是如何实现常数时间的 <code>remove</code>。</p><p>删除任意索引元素需要线性时间，这里的解决方案是总是删除最后一个元素。</p><ul><li>将要删除元素和最后一个元素交换。</li><li>将最后一个元素删除。</li></ul><p>为此，必须在常数时间获取到要删除元素的索引，因此需要一个哈希表来存储值到索引的映射。</p><p>综上所述，我们使用以下数据结构：</p><ul><li>动态数组存储元素值</li><li>哈希表存储存储值到索引的映射。</li></ul><h1 id="方法：哈希表-动态数组"><a href="#方法：哈希表-动态数组" class="headerlink" title="方法：哈希表 + 动态数组"></a>方法：哈希表 + 动态数组</h1><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert:"></a><strong>Insert:</strong></h2><ul><li>添加元素到动态数组。</li><li>在哈希表中添加值到索引的映射</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMzgwL2lzZXJ0LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><details>    <summary>哈希表 + 动态数组python</summary><figure class="highlight python"><figcaption><span>[insert-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val: int)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Inserts a value to the set. Returns true if the set did not already contain the specified element.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> val <span class="keyword">in</span> self.dict:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    self.dict[val] = len(self.list)</span><br><span class="line">    self.list.append(val)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></details><details>    <summary>哈希表 + 动态数组java</summary><figure class="highlight java"><figcaption><span>[insert-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (dict.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">  dict.put(val, list.size());</span><br><span class="line">  list.add(list.size(), val);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="remove"><a href="#remove" class="headerlink" title="remove:"></a><strong>remove:</strong></h2><ul><li>在哈希表中查找要删除元素的索引。</li><li>将要删除元素与最后一个元素交换。</li><li>删除最后一个元素。</li><li>更新哈希表中的对应关系。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMzgwL2RlbGV0ZS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><details>    <summary>哈希表 + 动态数组python</summary><figure class="highlight python"><figcaption><span>[remove-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val: int)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> val <span class="keyword">in</span> self.dict:</span><br><span class="line">        <span class="comment"># move the last element to the place idx of the element to delete</span></span><br><span class="line">        last_element, idx = self.list[<span class="number">-1</span>], self.dict[val]</span><br><span class="line">        self.list[idx], self.dict[last_element] = last_element, idx</span><br><span class="line">        <span class="comment"># delete the last element</span></span><br><span class="line">        self.list.pop()</span><br><span class="line">        <span class="keyword">del</span> self.dict[val]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></details><details>    <summary>哈希表 + 动态数组java</summary><figure class="highlight java"><figcaption><span>[remove-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (! dict.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// move the last element to the place idx of the element to delete</span></span><br><span class="line">  <span class="keyword">int</span> lastElement = list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> idx = dict.get(val);</span><br><span class="line">  list.set(idx, lastElement);</span><br><span class="line">  dict.put(lastElement, idx);</span><br><span class="line">  <span class="comment">// delete the last element</span></span><br><span class="line">  list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">  dict.remove(val);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="getRandom："><a href="#getRandom：" class="headerlink" title="getRandom："></a><strong>getRandom：</strong></h2><p>借助 Python 中的 <code>random.choice</code> 和 Java 中 的 <code>Random</code> 实现。</p><details>    <summary>python</summary><figure class="highlight python"><figcaption><span>[getRandom-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandom</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Get a random element from the set.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> choice(self.list)</span><br></pre></td></tr></table></figure></details><details>    <summary>java</summary><figure class="highlight java"><figcaption><span>[getRandom-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Get a random element from the set. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.get(rand.nextInt(list.size()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a><strong>完整代码：</strong></h2><details>    <summary>python</summary><figure class="highlight python"><figcaption><span>[solution1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.dict = &#123;&#125;</span><br><span class="line">        self.list = []</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a value to the set. Returns true if the set did not already contain the specified element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">in</span> self.dict:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        self.dict[val] = len(self.list)</span><br><span class="line">        self.list.append(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">in</span> self.dict:</span><br><span class="line">            <span class="comment"># move the last element to the place idx of the element to delete</span></span><br><span class="line">            last_element, idx = self.list[<span class="number">-1</span>], self.dict[val]</span><br><span class="line">            self.list[idx], self.dict[last_element] = last_element, idx</span><br><span class="line">            <span class="comment"># delete the last element</span></span><br><span class="line">            self.list.pop()</span><br><span class="line">            <span class="keyword">del</span> self.dict[val]</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRandom</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get a random element from the set.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> choice(self.list)</span><br></pre></td></tr></table></figure></details><details>    <summary>java</summary><figure class="highlight java"><figcaption><span>[solution1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; dict;</span><br><span class="line">  List&lt;Integer&gt; list;</span><br><span class="line">  Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RandomizedSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dict = <span class="keyword">new</span> HashMap();</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dict.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    dict.put(val, list.size());</span><br><span class="line">    list.add(list.size(), val);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! dict.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move the last element to the place idx of the element to delete</span></span><br><span class="line">    <span class="keyword">int</span> lastElement = list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> idx = dict.get(val);</span><br><span class="line">    list.set(idx, lastElement);</span><br><span class="line">    dict.put(lastElement, idx);</span><br><span class="line">    <span class="comment">// delete the last element</span></span><br><span class="line">    list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    dict.remove(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.get(rand.nextInt(list.size()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<code>getRandom</code> 时间复杂度为  O(1)，<code>insert</code> 和 <code>remove</code> 平均时间复杂度为  O(1) ，在最坏情况下为  O(N) 当元素数量超过当前分配的动态数组和哈希表的容量导致空间重新分配时。</li><li>空间复杂度：<em>O(N)*，在动态数组和哈希表分别存储了 *N</em> 个元素的信息。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计一个支持在平均时间复杂度 O(1)下，执行以下操作的数据结构。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>454. 四数相加 II</title>
    <link href="http://yoursite.com/2020/08/21/454.%20%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0%20II/"/>
    <id>http://yoursite.com/2020/08/21/454. 四数相加 II/</id>
    <published>2020-08-21T07:34:12.000Z</published>
    <updated>2020-08-21T09:15:42.339Z</updated>
    
    <content type="html"><![CDATA[<p>给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。</p><a id="more"></a><p>为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。</p><p>例如:</p><pre><code>输入:A = [ 1, 2]B = [-2,-1]C = [-1, 2]D = [ 0, 2]输出:2解释:两个元组如下:1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 02. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</code></pre><h1 id="map函数介绍"><a href="#map函数介绍" class="headerlink" title="map函数介绍"></a>map函数介绍</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当Map集合中有这个key时，就使用这个key值，如果没有就使用默认值defaultValue</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">//如果key值已存在，则不替换对应的value</span></span></span><br><span class="line"><span class="function">V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span></span></span><br></pre></td></tr></table></figure><h1 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h1><p><strong>思路：</strong></p><p>一. 采用分为两组，HashMap存一组，另一组和HashMap进行比对。</p><p>二. 这样的话情况就可以分为三种：</p><pre><code>1. HashMap存一个数组，如A。然后计算三个数组之和，如BCD。时间复杂度为：O(n)+O(n^3),得到O(n^3).2. HashMap存三个数组之和，如ABC。然后计算一个数组，如D。时间复杂度为：O(n^3)+O(n),得到O(n^3).3. HashMap存两个数组之和，如AB。然后计算两个数组之和，如CD。时间复杂度为：O(n^2)+O(n^2),得到O(n^2).</code></pre><p>三.根据第二点我们可以得出要存两个数组算两个数组。</p><p>四.我们以存AB两数组之和为例。首先求出A和B任意两数之和sumAB，以sumAB为key，sumAB出现的次数为value，存入hashmap中。<br>然后计算C和D中任意两数之和的相反数sumCD，在hashmap中查找是否存在key为sumCD。<br>算法时间复杂度为O(n2)。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><details>    <summary>java</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B, <span class="keyword">int</span>[] C, <span class="keyword">int</span>[] D)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : A) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b : B) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum1 = a + b;</span><br><span class="line">            map1.put(sum1, map1.getOrDefault(sum1, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c : C) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d : D) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum2 = c + d;</span><br><span class="line">            <span class="keyword">if</span>(map1.containsKey(-sum2))  res += map1.get(-sum2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="方法二：二分查找"><a href="#方法二：二分查找" class="headerlink" title="方法二：二分查找"></a>方法二：二分查找</h1><p>1）求和法</p><p>A与B所有元素求和，得到数组first；</p><p>C与D所有元素求和，得到数组second：</p><p>2）对second进行排序；</p><p>3）针对first中数组元素*-1，在second数组中遍历，由于可能存在多个，因此我们要获得上边界和下边界</p><p>可以使用lower_bound 和upper_bound</p><p>也可以直接使用equal_range</p><details>    <summary>C++</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;C, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;D)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; firstvec;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; secondvec;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.size(); j++) &#123;</span><br><span class="line">                firstvec.push_back(A[i] + B[j]);</span><br><span class="line">                secondvec.push_back(C[i] + D[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(secondvec.begin(), secondvec.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; firstvec.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> findvalue = firstvec[i] * (<span class="number">-1</span>);</span><br><span class="line">            pair&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; range = equal_range(secondvec.begin(), secondvec.end(), findvalue);</span><br><span class="line">            result += range.second - range.first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>171. Excel表列序号</title>
    <link href="http://yoursite.com/2020/08/21/Excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/"/>
    <id>http://yoursite.com/2020/08/21/Excel表列序号/</id>
    <published>2020-08-21T07:33:12.000Z</published>
    <updated>2020-08-21T09:16:24.239Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个Excel表格中的列名称，返回其相应的列序号。</p><a id="more"></a><p>例如，</p><pre><code>A -&gt; 1B -&gt; 2C -&gt; 3...Z -&gt; 26AA -&gt; 27AB -&gt; 28 ...</code></pre><p>示例 1:</p><pre><code>输入: &quot;A&quot;输出: 1</code></pre><p>示例 2:</p><pre><code>输入: &quot;AB&quot;输出: 28</code></pre><p>示例 3:</p><pre><code>输入: &quot;ZY&quot;输出: 701</code></pre><p>这道题很简单</p><h1 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>标签：字符串遍历，进制转换</li><li>初始化结果<code>ans = 0</code>，遍历时将每个字母与A做减法，因为A表示1，所以减法后需要每个数加1，计算其代表的数值<code>num = 字母 - ‘A’ + 1</code></li><li>因为有26个字母，所以相当于26进制，每26个数则向前进一位</li><li>所以每遍历一位则<code>ans = ans * 26 + num</code></li><li>以ZY为例，Z的值为26，Y的值为25，则结果为<code>26 * 26 + 25=701</code></li><li>时间复杂度：O(n)</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>;</span><br><span class="line">            ans = ans * <span class="number">26</span> + num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="画解"><a href="#画解" class="headerlink" title="画解"></a>画解</h2><p> <a href="https://pic.leetcode-cn.com/97416a122f3315e3a0eb9951a1d742e7c1734d915f4b96099610a92629899d04-frame_00001.png" target="_blank" rel="noopener">frame_00001.png</a></p><p> <a href="https://pic.leetcode-cn.com/a5e8e39fa19491e3e1d82c6aba3dec24e080c368d0400bf57012548b0fdb2af4-frame_00002.png" target="_blank" rel="noopener">frame_00002.png</a> </p><p> <a href="https://pic.leetcode-cn.com/da62003ebc140532fe1e42ff2c46d5c920101d6de50fd3c6910eee1e9d9c7df5-frame_00003.png" target="_blank" rel="noopener">frame_00003.png</a> </p><p> <a href="https://pic.leetcode-cn.com/4267220aeef6e659dcae4fa7b59d63c68efdb7b0f748d431d8acca4af278de65-frame_00004.png" target="_blank" rel="noopener">frame_00004.png</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个Excel表格中的列名称，返回其相应的列序号。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>328. 奇偶链表</title>
    <link href="http://yoursite.com/2020/08/21/328.%20%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/08/21/328. 奇偶链表/</id>
    <published>2020-08-21T03:45:12.000Z</published>
    <updated>2020-08-21T07:22:45.846Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p><a id="more"></a><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><p>示例 1:</p><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code></pre><p>示例 2:</p><pre><code>输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL 输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</code></pre><p>说明:</p><ul><li>应当保持奇数节点和偶数节点的相对顺序。</li><li>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</li></ul><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>我一开始想用快慢指针来解决，但是没有找到合适的方法来交换奇偶节点。所以还是采用下面的方法。</p><p><strong>想法</strong></p><p>将奇节点放在一个链表里，偶链表放在另一个链表里。然后把偶链表接在奇链表的尾部。</p><p><strong>算法</strong></p><p>这个解法非常符合直觉思路也很简单。但是要写一个精确且没有 bug 的代码还是很费一番功夫，想要避免空指针和循环链表的情况需要认真考虑边界条件。</p><p>一个 <code>LinkedList</code> 需要一个头指针和一个尾指针来支持双端操作。我们用变量 <code>head</code> 和 <code>odd</code> 保存奇链表的头和尾指针。 <code>evenHead</code> 和 <code>even</code> 保存偶链表的头和尾指针。算法会遍历原链表一次并把奇节点放到奇链表里去、偶节点放到偶链表里去。遍历整个链表我们至少需要一个指针作为迭代器。这里 <code>odd</code> 指针和 <code>even</code> 指针不仅仅是尾指针，也可以扮演原链表迭代器的角色。</p><p>解决链表问题最好的办法是在脑中或者纸上把链表画出来。比方说：</p><p><a href="https://pic.leetcode-cn.com/00bd1d974b5a2e6d7d4faf0d5baad1c691f4ed8963cb1b7133d1112bad4c5e86-image.png" target="_blank" rel="noopener">奇偶链表的例子</a></p><figure class="highlight java"><figcaption><span>[solution-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode odd = head, even = head.next, evenHead = even;</span><br><span class="line">        <span class="keyword">while</span> (even != <span class="keyword">null</span> &amp;&amp; even.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            odd.next = even.next;</span><br><span class="line">            odd = odd.next;</span><br><span class="line">            even.next = odd.next;</span><br><span class="line">            even = even.next;</span><br><span class="line">        &#125;</span><br><span class="line">        odd.next = evenHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度： <em>O(n)</em> 。总共有 <em>n</em> 个节点，我们每个遍历一次。</p></li><li><p>空间复杂度： <em>O(1)</em> 。我们只需要 4 个指针。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>237. 删除链表中的节点</title>
    <link href="http://yoursite.com/2020/08/21/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2020/08/21/237. 删除链表中的节点/</id>
    <published>2020-08-21T03:12:12.000Z</published>
    <updated>2020-08-21T03:44:57.927Z</updated>
    
    <content type="html"><![CDATA[<p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。</p><a id="more"></a><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:</p><p>示例 1：</p><pre><code>输入：head = [4,5,1,9], node = 5输出：[4,1,9]解释：给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</code></pre><p>示例 2：</p><pre><code>输入：head = [4,5,1,9], node = 1输出：[4,5,9]解释：给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</code></pre><p>提示：</p><pre><code>链表至少包含两个节点。链表中所有节点的值都是唯一的。给定的节点为非末尾节点并且一定是链表中的一个有效节点。不要从你的函数中返回任何结果。</code></pre><h1 id="方法：与下一个节点交换"><a href="#方法：与下一个节点交换" class="headerlink" title="方法：与下一个节点交换"></a>方法：与下一个节点交换</h1><p>我一开始用了遍历整个链表最后丢弃尾节点，后来发现并不需要这么麻烦</p><p>从链表里删除一个节点 <code>node</code> 的最常见方法是修改<em>之前</em>节点的 <code>next</code> 指针，使其指向<em>之后</em>的节点。</p><p><a href="https://pic.leetcode-cn.com/3579a496897df5321c110bf1301872b6e10c342f5e400ce45d2db0348d00d715-file_1555866623326" target="_blank" rel="noopener">image</a></p><p>因为，我们无法访问我们想要删除的节点 <em>之前</em> 的节点，我们始终不能修改该节点的 <code>next</code> 指针。相反，我们必须将想要删除的节点的值替换为它后面节点中的值，然后删除它之后的节点。</p><p><a href="https://pic.leetcode-cn.com/858fae01d89c2080eb7e45a1f9d9a2b2f76e1a5c87815b324fd946e0bd8da495-file_1555866651920" target="_blank" rel="noopener">image</a></p><p><a href="https://pic.leetcode-cn.com/902dc5d3f8c44d3cbc0b6e837711cad2eefc021fd2b9de8dfabc6d478bc779b1-file_1555866680932" target="_blank" rel="noopener">image</a></p><p><a href="https://pic.leetcode-cn.com/2a6409b98dd73d6649fdc6fb984c88690547127467104c3923367be6f8fbc916-file_1555866773685" target="_blank" rel="noopener">image</a></p><p>因为我们知道要删除的节点不是列表的末尾，所以我们可以保证这种方法是可行的。</p><figure class="highlight java"><figcaption><span>[juoWzFbK-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">    node.val = node.next.val;</span><br><span class="line">    node.next = node.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>时间和空间复杂度都是：<em>O(1)</em>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>234. 回文链表</title>
    <link href="http://yoursite.com/2020/08/20/234.%20%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/08/20/234. 回文链表/</id>
    <published>2020-08-20T09:53:12.000Z</published>
    <updated>2020-08-21T03:06:08.248Z</updated>
    
    <content type="html"><![CDATA[<p>请判断一个链表是否为回文链表。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: 1-&gt;2输出: false</code></pre><p>示例 2:</p><pre><code>输入: 1-&gt;2-&gt;2-&gt;1输出: true</code></pre><p>进阶：</p><p>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><h1 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><ol><li>采用快慢两个指针去寻找链表的中间节点；</li><li>根据链表的中间节点反转后一半的链表；</li><li>迭代比较链表前一半的元素和后一半的元素，判断节点的值是否相等，得出是否为回文。</li></ol><h1 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h1><p><a href="https://pic.leetcode-cn.com/cb25ad29e4c902e12bfe088a79b491dc8e6ff890786f15ce6b176d5419bcbf71-%E9%93%BE%E8%A1%A8%E5%9B%9E%E6%96%87%E5%A5%87%E6%95%B0.jpeg" target="_blank" rel="noopener">链表回文奇数.jpeg</a></p><p><a href="https://pic.leetcode-cn.com/79a887a172f927142b591a28f2d4638223ee992279f6925ec418e1ce1cbc5c1a-%E9%93%BE%E8%A1%A8%E5%9B%9E%E6%96%87%E5%81%B6%E6%95%B0.jpeg" target="_blank" rel="noopener">链表回文偶数.jpeg</a></p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isPalindrome(ListNode head) &#123;</span><br><span class="line">        if(head == null) return true;</span><br><span class="line"></span><br><span class="line">        ListNode midNode = findMidNode(head);</span><br><span class="line">        ListNode secondHalfHead = reverseLinked(midNode.next);</span><br><span class="line">        ListNode curr1 = head;</span><br><span class="line">        ListNode curr2 = secondHalfHead;</span><br><span class="line"></span><br><span class="line">        boolean palindrome = true;</span><br><span class="line">        while(palindrome &amp;&amp; curr2 != null)&#123;</span><br><span class="line">            if(curr1.val != curr2.val) palindrome = false;</span><br><span class="line">            curr1 = curr1.next;</span><br><span class="line">            curr2 = curr2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return palindrome;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 反转链表 */</span><br><span class="line">    private ListNode reverseLinked(ListNode head)&#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode prev = null;</span><br><span class="line">        while(cur != null)&#123;</span><br><span class="line">            ListNode nextTemp = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        return prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 快慢指针寻找中间节点 */</span><br><span class="line">    private ListNode findMidNode(ListNode head)&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode low = head;</span><br><span class="line">        while(fast.next != null &amp;&amp; fast.next.next != null)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            low = low.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请判断一个链表是否为回文链表。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>92. 反转链表II</title>
    <link href="http://yoursite.com/2020/08/19/92.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/"/>
    <id>http://yoursite.com/2020/08/19/92. 反转链表II/</id>
    <published>2020-08-19T09:15:12.000Z</published>
    <updated>2020-08-20T09:50:00.006Z</updated>
    
    <content type="html"><![CDATA[<p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p><a id="more"></a><p> 说明:<br>1 ≤ m ≤ n ≤ 链表长度。</p><p> 示例:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</p><p>输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p><h1 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一: 递归"></a>方法一: 递归</h1><p>这种方法实际上是交换节点的值而非反转链表的指针</p><p><strong>直觉</strong></p><p>使用递归反转链表的思路来源于反转字符串时使用的类似方法。反转字符串的一个巨大优势是可以使用下标信息。我们可以创建两个指针，一个开头，一个结尾。不断地交换这两个指针指向的元素，并将两个指针向中间移动。在分析链表的情况前，先让我们看看字符串上的示例。</p><p><a href="https://pic.leetcode-cn.com/7f6ec0687455cfecce2019fcb560d7066d7e7dfedd46922d3cc96bcbff3c1eb5-image.png" target="_blank" rel="noopener">image.png</a></p><p>反转给定链表的一部分的思路基于上述方法。我们需要两个不同指针，一个指向第 <em>m</em> 个结点，另一个指向第 <em>n</em> 个结点。一旦有了这两个指针，我们就可以不断地交换这两个指针指向结点的数据，并将两个指针相向移动，就像字符串的情况那样。</p><blockquote><p>然而，链表中没有向后指针，也没有下标。因此，我们需要使用递归来 <strong>模拟</strong> 向后指针。递归中的回溯可以帮助我们模拟一个指针从第<em>n</em>个结点向中心移动的移动过程。</p></blockquote><p><strong>算法</strong></p><ol><li>我们定义一个递归函数用于反转给定链表的一部分。</li><li>将函数记为 <code>recurse</code>。该函数使用三个参数: <code>m</code> 为反转的起点, <code>n</code> 为反转的终点, 以及从第 <em>n</em> 个结点开始，随着递归回溯过程向后移动的指针 <code>right</code>。不清楚的话，可以参考后文的示意图。</li><li>此外，我们还有一个指针 <code>left</code>，它从第 <code>m</code> 个结点开始向前移动。在 <code>Python</code> 中, 我们需要一个全局变量，值随着递归的进行而改变。在其他函数调用造成的变化可以持续的编程语言中，可以考虑将该指针加为函数 <code>recurse</code> 的一个变量。</li><li>在递归调用中，给定 <code>m</code>，<code>n</code>，和 <code>right</code>, 首先判断 <code>n = 1</code>。 若判断为真, 则结束。</li><li>于是，当 <code>n</code> 的值达到 1 时，我们便<strong>回溯</strong>。这时，<code>right</code> 指针在我们要反转的子链表结尾，<code>left</code> 到达了字列表的开头。于是，我们置换数据，并将 <code>left</code> 指针前移：<code>left = left.next</code>。我们需要此变化在回溯过程中保持。</li><li>自此，每当我们回溯时，<code>right</code> 指针向后移一位。这就是前文所说的模拟。通过回溯模拟向后移动。</li><li>当 <code>right == left</code> 或者 <code>right.next == left</code> 时停止交换。当子链表的长度为奇数时，情况为前者；当子链表长度为偶数时为后者。我们使用一个全局 boolean 变量 flag 来停止交换。</li></ol><p>下面是一系列整个算法的示意图，希望能够帮助你理解清楚。</p><p><img src="http://pic.leetcode-cn.com/1adc7164bea5cd650af1545682900c792bd37a82df607aeb4f87a233d3eb69cf-image.png" alt="image.png"></p><p>这是递归过程的第一步。给定所用链表，<code>left</code> 和 <code>right</code> 指针从链表的 <code>head</code> 开始。第一步是以更新过的 <code>m</code> 和 <code>n</code> 进行递归调用，换而言之，它们的值各自减 1。此外，<code>left</code> 和 <code>right</code> 指针向前移动一位。</p><p><a href="https://pic.leetcode-cn.com/162f18666a30ffd98e185da1311f2daa48b087b03d3a9eefeeb9541eafbcd013-image.png" target="_blank" rel="noopener">image.png</a></p><p>接下来的两步展示了 <code>left</code> 和 <code>right</code> 指针在链表中的移动。注意到在第二步之后，<code>left</code> 指针抵达了目标位置。因此，后续不再移动。从现在起，只有 <code>right</code> 指针继续移动，直到抵达结点 <code>6</code>。</p><p><a href="https://pic.leetcode-cn.com/4213450e7d9466ddf22f289d5e753df47a94a9a87789312a02de2979ed161718-image.png" target="_blank" rel="noopener">image.png</a></p><p>如你所见，在第五步之后，两个指针均抵达了目标位置，可以开始进行回溯。我们不再继续递归。回溯过程中的操作是交换 <code>left</code> 和 <code>right</code> 结点的数据。</p><p><a href="https://pic.leetcode-cn.com/36b2ed0c1859c5574a17597070797d8f26b77a9c13a0c3462ea150b1058fbbce-image.png" target="_blank" rel="noopener">image.png</a></p><p>如你所见，在第三步（回溯）之后，<code>right</code> 指针 <strong>穿过了</strong> <code>left</code> 指针，此时已经完成了要求部分链表的反转。结果是 <code>[7 → 9 → 8 → 1 → 10 → 2 → 6]</code>。 于是不再进行数据交换，在代码中，我们使用全局 boolean 变量 flag 来停止数据交换。不能直接跳出递归。</p><details>    <summary>递归Java</summary><figure class="highlight java"><figcaption><span>[solution 1]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Object level variables since we need the changes</span></span><br><span class="line">    <span class="comment">// to persist across recursive calls and Java is pass by value.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stop;</span><br><span class="line">    <span class="keyword">private</span> ListNode left;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recurseAndReverse</span><span class="params">(ListNode right, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// base case. Don't proceed any further</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep moving the right pointer one step forward until (n == 1)</span></span><br><span class="line">        right = right.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep moving left pointer to the right until we reach the proper node</span></span><br><span class="line">        <span class="comment">// from where the reversal is to start.</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">this</span>.left.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Recurse with m and n reduced.</span></span><br><span class="line">        <span class="keyword">this</span>.recurseAndReverse(right, m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case both the pointers cross each other or become equal, we</span></span><br><span class="line">        <span class="comment">// stop i.e. don't swap data any further. We are done reversing at this</span></span><br><span class="line">        <span class="comment">// point.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left == right || right.next == <span class="keyword">this</span>.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.stop = <span class="keyword">true</span>;            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Until the boolean stop is false, swap data between the two pointers</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.stop) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="keyword">this</span>.left.val;</span><br><span class="line">            <span class="keyword">this</span>.left.val = right.val;</span><br><span class="line">            right.val = t;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Move left one step to the right.</span></span><br><span class="line">            <span class="comment">// The right pointer moves one step back via backtracking.</span></span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">this</span>.left.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = head;</span><br><span class="line">        <span class="keyword">this</span>.stop = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.recurseAndReverse(head, m, n);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>递归Python</summary><figure class="highlight python"><figcaption><span>[solution 1]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        left, right = head, head</span><br><span class="line">        stop = <span class="keyword">False</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recurseAndReverse</span><span class="params">(right, m, n)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> left, stop</span><br><span class="line"></span><br><span class="line">            <span class="comment"># base case. Don't proceed any further</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Keep moving the right pointer one step forward until (n == 1)</span></span><br><span class="line">            right = right.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Keep moving left pointer to the right until we reach the proper node</span></span><br><span class="line">            <span class="comment"># from where the reversal is to start.</span></span><br><span class="line">            <span class="keyword">if</span> m &gt; <span class="number">1</span>:</span><br><span class="line">                left = left.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Recurse with m and n reduced.</span></span><br><span class="line">            recurseAndReverse(right, m - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># In case both the pointers cross each other or become equal, we</span></span><br><span class="line">            <span class="comment"># stop i.e. don't swap data any further. We are done reversing at this</span></span><br><span class="line">            <span class="comment"># point.</span></span><br><span class="line">            <span class="keyword">if</span> left == right <span class="keyword">or</span> right.next == left:</span><br><span class="line">                stop = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Until the boolean stop is false, swap data between the two pointers     </span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stop:</span><br><span class="line">                left.val, right.val = right.val, left.val</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Move left one step to the right.</span></span><br><span class="line">                <span class="comment"># The right pointer moves one step back via backtracking.</span></span><br><span class="line">                left = left.next           </span><br><span class="line"></span><br><span class="line">        recurseAndReverse(right, m, n)</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度: <em>O(N)</em>。对每个结点最多处理两次。递归过程</li><li>回溯</li><li>在回溯过程中，我们只交换了一半的结点，但总复杂度是 <em>O(N)</em>。</li><li>空间复杂度: 最坏情况下为 <em>O(N)</em>。在最坏的情况下，我们需要反转整个链表。这是此时递归栈的大小。<br><br></li></ul><hr><h1 id="方法二-迭代链接反转"><a href="#方法二-迭代链接反转" class="headerlink" title="方法二: 迭代链接反转"></a>方法二: 迭代链接反转</h1><p>我一开始想到的就是通过迭代方法来反转，但是在处理反转后调整成环的情况时翻车了，想了半天，还是参照下面图例中的方法比较直观。</p><p><strong>直觉</strong></p><p>在上个方法中，我们研究了一种反转给定链表部分的算法，该算法不改变给定链表的内在结构，只是修改了对于结点的值。 然而，有时可能无法修改结点的数据值。这时，我们就需要改变结点的链接来完成反转。</p><p>从位置 <code>m</code> 到位置 <code>n</code> 的全部结点，我们需要反转每个结点的 <code>next</code> 指针。下面来看看具体的算法。</p><p><strong>算法</strong></p><p>在看具体算法之前，有必要先弄清楚链接反转的原理以及需要哪些指针。举例而言，有一个三个不同结点组成的链表 <code>A → B → C</code>，需要反转结点中的链接成为 <code>A ← B ← C</code>。</p><p>假设我们有两个指针，一个指向结点 <code>A</code>，一个指向结点 <code>B</code>。 分别记为 <code>prev</code> 和 <code>cur</code>。则可以用这两个指针简单地实现 <code>A 和 B</code> 之间的链接反转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur.next = prev</span><br></pre></td></tr></table></figure><p>这样做唯一的问题是，没有办法继续下去，换而言之，这样做之后就无法再访问到结点 <code>C</code>。因此，我们需要引入第三个指针，用于帮助反转过程的进行。因此，我们不采用上面的反转方法，而是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">third = cur.next</span><br><span class="line">cur.next = prev</span><br><span class="line">prev = cur</span><br><span class="line">cur = third</span><br></pre></td></tr></table></figure><p> <strong>迭代</strong> 地进行上述过程，即可完成问题的要求。下面来看看算法的步骤。</p><ol><li>如上所述，我们需要两个指针 <code>prev</code> 和 <code>cur</code>。</li><li><code>prev</code> 指针初始化为 <code>None</code>，<code>cur</code> 指针初始化为链表的 <code>head</code>。</li><li>一步步地向前推进 <code>cur</code> 指针，<code>prev</code> 指针跟随其后。</li><li>如此推进两个指针，直到 <code>cur</code> 指针到达从链表头起的第 <em>m</em> 个结点。这就是我们反转链表的起始位置。</li><li>注意我们要引入两个额外指针，分别称为 <code>tail</code> 和 <code>con</code>。<code>tail</code> 指针指向从链表头起的第<em>m</em>个结点，此结点是反转后链表的尾部，故称为 <code>tail</code>。<code>con</code> 指针指向第 <em>m</em> 个结点的前一个结点，此结点是新链表的头部。下图可以帮助你更好的理解这两个指针。</li></ol><p><a href="https://pic.leetcode-cn.com/bf38eaeb92184fbfb55bd76336c7f746b6f01b3c83bd921268afe84a3c3cf183-image.png" target="_blank" rel="noopener">image.png</a></p><ol start="6"><li><code>tail</code> 和 <code>con</code> 指针在算法开始时被初始化，在算法最后被调用，用于完成链表反转。</li><li>如前文所解释的那样，抵达第 <em>m</em> 个结点后，在用到上述两个指针前，先迭代地反转链接。不断迭代，直到完成指向第 <em>n</em> 个结点的链接。此时，<code>prev</code> 指针会指向第 <em>n</em> 个结点。</li><li>我们使用 <code>con</code> 指针来连接 <code>prev</code> 指针，这是因为 <code>prev</code> 指针当前指向的结点(第 <em>n</em> 个结点)会代替第 <em>m</em> 个结点的位置。 类似地，我们利用 <code>tail</code> 指针来连接 <code>prev</code> 指针之后的结点（第 <em>n+1</em> 个结点）。</li></ol><p>为了便于理清每个指针的用法，我们来看一个算法运行的实例。给定一个链表 <code>7 → 9 → 2 → 10 → 1 → 8 → 6</code>，我们需要反转从第 3 个结点到第 6 个结点的子链表。</p><p><a href="https://pic.leetcode-cn.com/08d4eb39be0db6ded442a208399b5778bbab1cf75c26bc5b3d93128b7c224cb4-image.png" target="_blank" rel="noopener">image.png</a></p><p>从上图可以看到迭代法的前几步。第一步展示了两个指针的初始化，第三步展示了链表反转过程的初始位置。</p><p><a href="https://pic.leetcode-cn.com/77af1e2ca8bd5f9ccc89802094ce07e2505c6b4483ccd6887f2762a6e67310e1-image.png" target="_blank" rel="noopener">image.png</a></p><p>上图详细显示了链接反转的过程以及反转两个结点的链接后如何向前移动。如下图所示，本步骤将执行多次。</p><p><a href="https://pic.leetcode-cn.com/f634c434bcc5092d84b3125a4cd7c723aa3ddd53dcfb9ec3077423cbff1d2f85-image.png" target="_blank" rel="noopener">image.png</a></p><p><a href="https://pic.leetcode-cn.com/b11861e6d3a86cdec19152d442dd243aaf0fb6c914787e7cf60990f2ecf0d558-image.png" target="_blank" rel="noopener">image.png</a></p><p>如上图所示, 两个指针都已经到达最终位置。我们完成了子链表的反转工作。然而，还有一些链接需要调整。下图展示了利用 <code>tail</code> 和 <code>con</code> 指针完成链接调整的过程。</p><p><a href="https://pic.leetcode-cn.com/968684e83b4cbc4b4db6f80e3bda03748729af672e702a8d3473b24cd04a7092-image.png" target="_blank" rel="noopener">image.png</a></p><details>    <summary>迭代链接反转Java</summary><figure class="highlight java"><figcaption><span>[solution 2]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Empty list</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move the two pointers until they reach the proper starting point</span></span><br><span class="line">        <span class="comment">// in the list.</span></span><br><span class="line">        ListNode cur = head, prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            m--;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The two pointers that will fix the final connections.</span></span><br><span class="line">        ListNode con = prev, tail = cur;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Iteratively reverse the nodes until n becomes 0.</span></span><br><span class="line">        ListNode third = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            third = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = third;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Adjust the final connections as explained in the algorithm</span></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            con.next = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tail.next = cur;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>迭代链接反转Python</summary><figure class="highlight python"><figcaption><span>[solution 2]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Empty list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Move the two pointers until they reach the proper starting point</span></span><br><span class="line">        <span class="comment"># in the list.</span></span><br><span class="line">        cur, prev = head, <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> m &gt; <span class="number">1</span>:</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = cur.next</span><br><span class="line">            m, n = m - <span class="number">1</span>, n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># The two pointers that will fix the final connections.</span></span><br><span class="line">        tail, con = cur, prev</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Iteratively reverse the nodes until n becomes 0.</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            third = cur.next</span><br><span class="line">            cur.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = third</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Adjust the final connections as explained in the algorithm</span></span><br><span class="line">        <span class="keyword">if</span> con:</span><br><span class="line">            con.next = prev</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head = prev</span><br><span class="line">        tail.next = cur</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度: <em>O(N)*。考虑包含 *N</em> 个结点的链表。对每个节点最多会处理</li><li>（第 <em>n</em> 个结点之后的结点不处理）。</li><li>空间复杂度: <em>O(1)*。我们仅仅在原有链表的基础上调整了一些指针，只使用了 *O(1)</em> 的额外存储空间来获得结果。<br></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>206. 反转链表</title>
    <link href="http://yoursite.com/2020/08/18/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/08/18/206. 反转链表/</id>
    <published>2020-08-18T09:51:12.000Z</published>
    <updated>2020-08-19T09:56:23.485Z</updated>
    
    <content type="html"><![CDATA[<p>反转一个单链表。</p><a id="more"></a><p>示例:</p><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre><p>进阶:</p><pre><code>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</code></pre><h1 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h1><p>假设存在链表 <code>1 → 2 → 3 → Ø</code>，我们想要把它改成 <code>Ø ← 1 ← 2 ← 3</code>。</p><p>在遍历列表时，将当前节点的 <code>next</code> 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！</p><details>    <summary>迭代</summary><figure class="highlight java"><figcaption><span>[Tww6MiPp-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">    ListNode curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode nextTemp = curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = nextTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(n)*，假设 *n</em> 是列表的长度，时间复杂度是 <em>O(n)</em>。</li><li>空间复杂度：<em>O(1)</em>。</li></ul><hr><h1 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h1><p>递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？</p><p>假设列表为：</p><p>n1→…→nk−1    →n k→n k+1→…→nm→∅</p><p>若从节点 <em>n_{k+1}</em> 到 <em>n_{m}</em> 已经被反转，而我们正处于 <em>n_{k}</em>。</p><p>n1→…→nk−1→n k→n k+1←…←nm</p><p>我们希望 <em>n_{k+1}</em> 的下一个节点指向 <em>n_{k}</em>。</p><p>所以，<em>n_{k}</em>.next.next = <em>n_{k}</em>。</p><p>要小心的是 <em>n_{1}</em> 的下一个必须指向 Ø 。如果你忽略了这一点，你的链表中可能会产生循环。如果使用大小为 2 的链表测试代码，则可能会捕获此错误。</p><details>    <summary>递归</summary><figure class="highlight java"><figcaption><span>[ESkYHVXb-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode p = reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li>时间复杂度：<em>O(n)*，假设 *n</em> 是列表的长度，那么时间复杂度为 <em>O(n)</em>。</li><li>空间复杂度：<em>O(n)*，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 *n</em> 层。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转一个单链表。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年8月" scheme="http://yoursite.com/categories/2020%E5%B9%B48%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
</feed>

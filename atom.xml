<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiye Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-03T16:14:24.038Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yiye Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>326. 3的幂</title>
    <link href="http://yoursite.com/2020/09/30/326.%203%E7%9A%84%E5%B9%82/"/>
    <id>http://yoursite.com/2020/09/30/326. 3的幂/</id>
    <published>2020-09-30T06:30:12.000Z</published>
    <updated>2020-10-03T16:14:24.038Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数，写一个函数来判断它是否是3的幂次方。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: 27输出: true</code></pre><p>示例 2:</p><pre><code>输入: 0输出: false</code></pre><p>示例 3:</p><pre><code>输入: 9输出: true</code></pre><p>示例 4:</p><pre><code>输入: 45输出: false</code></pre><p>进阶：</p><pre><code>你能不使用循环或者递归来完成本题吗？</code></pre><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p>在本文中，我们将探讨加速简单计算的方法，以及为什么在实践中有用。 </p><h2 id="方法一：循环迭代"><a href="#方法一：循环迭代" class="headerlink" title="方法一：循环迭代"></a>方法一：循环迭代</h2><p>找出数字 <code>n</code> 是否是数字 <code>b</code> 的幂的一个简单方法是，<code>n%3</code>  只要余数为 0，就一直将 <code>n</code> 除以 <code>b</code>。</p><pre><code>n=b^x * n=b*b*...*b</code></pre><p>因此，应该可以将 <code>n</code> 除以 <code>b</code>  x 次，每次都有 0 的余数，最终结果是 1。 </p><details>    <summary>循环迭代</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>注意我们需要一个警卫来检查那个 <code>n！=0</code>，否则 while 循环将永远不会结束。对于负数，该算法没有意义，因此我们也将包括该保护。 </p><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log_b(n)) ，在我们的例子中是O(logn) 。除数是用对数表示的。 </li><li>空间复杂度：<em>O(1)</em>，没有使用额外的空间。</li></ul><h2 id="方法二：基准转换"><a href="#方法二：基准转换" class="headerlink" title="方法二：基准转换"></a>方法二：基准转换</h2><p>在基数 10 中，10 的所有幂都从数字 1 开始，然后只跟 0（例如10、100、1000）。其他基地及其各自的权力也是如此。例如，在基数 2 中，<em>10 _2<em>、</em>100 _2</em> 和 <em>1000 _2</em> 分别表示为  <em>2_{10}</em>, <em>4_{10}</em> 和 <em>8_{10}</em>。因此，如果我们把我们的数转换成基3，并且表示形式是 100…0，那么这个数就是3的幂。</p><p><strong>证明 ：</strong><br>给定以 3 为底的数字表示为数组 <code>s</code>，第 0 位开始为有效数。<br>因此，只有一个数字 1，其余的都是 0，这意味着这个数字是 3 的幂。 </p><p><strong>实现：</strong></p><ul><li>我们所要做的就是将数字转换为以3为底的基数 ，并检查它是否为前导1，后跟所有 0。 </li><li>两个内置的Java函数将帮助我们前进。 </li></ul><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String baseChange = Integer.toString(number, base);</span><br></pre></td></tr></table></figure><ul><li>上面的代码将 <code>number</code> 转换以 <code>base</code> 为底的基数，并以字符串形式返回结果。例如，<code>integer.toString（5，2）=“101”</code> 和 <code>integer.toString（5，3）=“12”</code>。 </li></ul><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> matches = myString.matches(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><p>上面的代码检查字符串中是否存在特定的正则表达式。例如，如果字符串 <code>mystring</code> 中存在子字符串 “123”，上面的内容将返回 true。 </p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> powerOfThree = baseChange.matches(<span class="string">"^10**"</span>)</span><br></pre></td></tr></table></figure><p>我们将使用上面的正则表达式来检查字符串是否以1 <code>^1</code> 开头，后跟 0 或 多个 0 <code>0*</code> 并且不包含任何其他值 <code>*</code>。</p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(n, <span class="number">3</span>).matches(<span class="string">"^10**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(log_3n)</em>。<ul><li>假设：<ul><li><code>Integer.toString()</code> - 基转换通常是作为一个重复的除法来实现的。复杂性应该类似于我们的方法 1:<em>O（\ log_3n）</em>的复杂性。</li><li><code>String.matches()</code> - 方法迭代整个字符串。<code>n</code> 以 3 为基数表示的位数是<em>O（\log_3n）</em>。 </li></ul></li></ul></li><li>空间复杂度：<em>O(\log_3n)</em>。我们使用两个附加变量。<ul><li>以 3 为基数表示数字的字符串（大小为 <em>\log_3n</em>）</li><li>正则表达式的字符串（常量大小） </li></ul></li></ul><h2 id="方法三：运算法"><a href="#方法三：运算法" class="headerlink" title="方法三：运算法"></a>方法三：运算法</h2><p>我们可以用下面的数学公式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 3^i </span><br><span class="line"></span><br><span class="line">\ i = \ log_3(n) </span><br><span class="line"></span><br><span class="line">\ i = \frac&#123;\ log_b(n)&#125;&#123;\ log_b(3)&#125;</span><br></pre></td></tr></table></figure><p>若 <code>n</code> 是 3 的幂则 <code>i</code> 是整数。在 Java 中，我们通过取小数部分（利用 <code>% 1</code>）来检查数字是否是整数，并检查它是否是 0。 </p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">3</span>)) % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常见的陷阱 :</strong><br>这个解决方案是有问题的，因为我们开始使用 <code>double</code> s，这意味着我们会遇到精度错误。说明在比较双精度数时不应使用 <code>==</code>。这是因为 <code>Math.log10(n)/Math.log10(3)</code> 的结果可能是 <code>5.0000001</code> 或 <code>4.9999999</code>。使用 <code>Math.log()</code> 函数而不是<code>Math.log10()</code> 可以观察到这种效果。 </p><p>为了解决这个问题，我们需要将结果与 <code>epsilon</code> 进行比较。</p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (Math.log(n) / Math.log(<span class="number">3</span>) + epsilon) % <span class="number">1</span> &lt;= <span class="number">2</span> * epsilon;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：*Unknown$。这里主要消耗时间的运算是 <code>Math.log</code>，它限制了我们算法的时间复杂性。实现依赖于我们使用的语言和编译器 。</li><li>空间复杂度： <em>O(1)</em>，我们没有使用任何额外的内存。<code>epsilon</code> 变量可以是内联的。 </li></ul><h2 id="方法四：整数限制"><a href="#方法四：整数限制" class="headerlink" title="方法四：整数限制"></a>方法四：整数限制</h2><p>一个重要的信息可以从函数名中推导出来。</p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br></pre></td></tr></table></figure><p>我们可以看出 <code>n</code> 的类型是  <code>int</code>。在 Java 中说明了该变量是四个字节，他的最大值为 <strong>2147483647</strong>。有三种方法可以计算出该最大值。</p><ol><li><a href="http://stackoverflow.com/questions/15004944/max-value-of-integer" target="_blank" rel="noopener">Google</a></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3. MaxInt = 2^32/2 - 1 ,因为我们使用 32 位来表示数字，所以范围的一半用于负数，0 是正数的一部分。</span><br><span class="line"></span><br><span class="line">知道了 `n` 的限制，我们现在可以推断出 `n` 的最大值，也就是 3 的幂，是 **1162261467**。我们计算如下： </span><br><span class="line"></span><br><span class="line">```math</span><br><span class="line">3^&#123;\lfloor&#123;&#125;\log_3&#123;MaxInt&#125;\rfloor&#123;&#125;&#125; = 3^&#123;\lfloor&#123;&#125;19.56\rfloor&#123;&#125;&#125; = 3^&#123;19&#125; = 1162261467</span><br></pre></td></tr></table></figure></li></ol><p>因此，我们应该返回 <code>true</code> 的 <code>n</code> 的可能值是 <em>3^0<em>，</em>3^1<em>…</em>3 ^ {19}*。因为 3 是质数，所以 *3^{19}</em> 的除数只有 <em>3^0<em>，</em>3^1<em>…</em>3 ^{19}*，因此我们只需要将 *3^{19}</em> 除以 <code>n</code>。若余数为 <strong>0</strong> 意味着 <code>n</code> 是 *3^{19}$ 的除数，因此是 3 的幂。 </p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(1)</em>。我们只做了一次操作。 </li><li>空间复杂度： <em>O(1)</em>，没有使用额外空间。</li></ul><h2 id="性能测量-："><a href="#性能测量-：" class="headerlink" title="性能测量 ："></a>性能测量 ：</h2><p>函数的单次运行使得难以测量两种解的差别。在 leetcode 上的 $Accepted* <em>Solutions</em>  <em>Runtime</em> <em>Distribution</em> 页面上，所有解决方案都在 <code>15 ms</code> 到 <code>20 ms</code> 之间。为了完整性，我们提出了以下基准，以了解这两个解决方案的区别。 </p><p><strong>Java基准码 :</strong></p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Solution sol = <span class="keyword">new</span> Solution();</span><br><span class="line">    <span class="keyword">int</span> iterations = <span class="number">1</span>; <span class="comment">// See table header for this value</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iterations; i++) &#123;</span><br><span class="line">        sol.isPowerOfThree(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下表中，以秒为单位。<br>| Iterations |<em>10^6</em> |<em>10^7</em>|<em>10^8</em>|<em>10^9</em>|*Maxint$|<br>|–|–|–|–|–|–|<br>| Java Approach 1: (Naive) | 0.04 |0.07|0.30|2.47|5.26|<br>|Java Approach 2: (Strings) | 0.68 |4.02|38.90|409.16|893.89|<br>| Java Approach 3: (Logarithms) | 0.09 |0.50|4.59|45.53|97.50|<br>|Java Approach 4: (Fast) | 0.04 |0.06|0.08|0.41|0.78|</p><p>正如我们所看到的，对于小的 N 值，差异并不明显，但是随着我们进行更多的迭代，并且传递给 <code>isPowerOfThree()</code> 的 <code>n</code> 的值增长，我们看到方法 4 的性能显著提高。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论 :"></a>结论 :</h2><p>像这样的简单优化似乎可以忽略不计，但历史上，当计算能力成为一个问题时，它允许某些计算机程序（如Quake 3）成为可能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数，写一个函数来判断它是否是3的幂次方。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>268. 缺失数字</title>
    <link href="http://yoursite.com/2020/09/30/268.%20%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/09/30/268. 缺失数字/</id>
    <published>2020-09-30T02:30:12.000Z</published>
    <updated>2020-09-30T03:16:46.091Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: [3,0,1]输出: 2</code></pre><p>示例 2:</p><pre><code>输入: [9,6,4,2,3,5,7,0,1]输出: 8</code></pre><p>说明:</p><pre><code>你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?</code></pre><h1 id="方法一：排序"><a href="#方法一：排序" class="headerlink" title="方法一：排序"></a>方法一：排序</h1><p><strong>分析</strong></p><p>如果数组是有序的，那么就很容易知道缺失的数字是哪个了。</p><p><strong>算法</strong></p><p>首先我们对数组进行排序，随后我们可以在常数时间内判断两种特殊情况：0 没有出现在数组的首位，以及 <em>n</em> 没有出现在数组的末位。如果这两种特殊情况都不满足，那么缺失的数字一定在 0 和 <em>n</em> 之间（不包括两者）。此时我们可以在线性时间内扫描这个数组，如果某一个数比它前面的那个数大了超过 1，那么这两个数之间的那个数即为缺失的数字。</p><details>    <summary>排序Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 n 是否出现在末位</span></span><br><span class="line">        <span class="keyword">if</span> (nums[nums.length-<span class="number">1</span>] != nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 0 是否出现在首位</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时缺失的数字一定在 (0, n) 中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> expectedNum = nums[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != expectedNum) &#123;</span><br><span class="line">                <span class="keyword">return</span> expectedNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未缺失任何数字（保证函数有返回值）</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>排序Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that n is at the last index</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">-1</span>] != len(nums):</span><br><span class="line">            <span class="keyword">return</span> len(nums)</span><br><span class="line">        <span class="comment"># Ensure that 0 is at the first index</span></span><br><span class="line">        <span class="keyword">elif</span> nums[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If we get here, then the missing number is on the range (0, n)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            expected_num = nums[i<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] != expected_num:</span><br><span class="line">                <span class="keyword">return</span> expected_num</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)。由于排序的时间复杂度为 O(nlogn) ，扫描数组的时间复杂度为 <em>O(n)</em>，因此总的时间复杂度为O(nlogn)。</li><li>空间复杂度：<em>O(1)</em> 或 <em>O(n)*。空间复杂度取决于使用的排序算法，根据排序算法是否进行原地排序（即不使用额外的数组进行临时存储），空间复杂度为 *O(1)</em> 或 <em>O(n)</em>。</li></ul><h1 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h1><p><strong>分析</strong></p><p>我们可以直接查询每个数是否在数组中出现过来找出缺失的数字。如果使用哈希表，那么每一次查询操作都是常数时间的。</p><p><strong>算法</strong></p><p>我们将数组中的所有数插入到一个集合中，这样每次查询操作的时间复杂度都是 <em>O(1)</em> 的。</p><details>    <summary>哈希表Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; numSet = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) numSet.add(num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> expectedNumCount = nums.length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">0</span>; number &lt; expectedNumCount; number++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!numSet.contains(number)) &#123;</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>哈希表Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        num_set = set(nums)</span><br><span class="line">        n = len(nums) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> num_set:</span><br><span class="line">                <span class="keyword">return</span> number</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li>时间复杂度：<em>O(n)<em>。集合的插入操作的时间复杂度都是 *O(1)</em>，一共插入了 *n</em> 个数，时间复杂度为 <em>O(n)<em>。集合的查询操作的时间复杂度同样是 *O(1)</em>，最多查询 *n+1</em> 次，时间复杂度为 <em>O(n)</em>。因此总的时间复杂度为 <em>O(n)</em>。</li><li>空间复杂度：<em>O(n)*。集合中会存储 *n</em> 个数，因此空间复杂度为 <em>O(n)</em>。</li></ul><h1 id="方法三：位运算"><a href="#方法三：位运算" class="headerlink" title="方法三：位运算"></a>方法三：位运算</h1><p><strong>分析</strong></p><p>由于异或运算（XOR）满足结合律，并且对一个数进行两次完全相同的异或运算会得到原来的数，因此我们可以通过异或运算找到缺失的数字。</p><p><strong>算法</strong></p><p>我们知道数组中有 <em>n</em> 个数，并且缺失的数在 <em>[0..n]</em> 中。因此我们可以先得到 <em>[0..n]</em> 的异或值，再将结果对数组中的每一个数进行一次异或运算。未缺失的数在 <em>[0..n]</em> 和数组中各出现一次，因此异或后得到 0。而缺失的数字只在 <em>[0..n]</em> 中出现了一次，在数组中没有出现，因此最终的异或结果即为这个缺失的数字。</p><p>在编写代码时，由于 <em>[0..n]</em> 恰好是这个数组的下标加上 <em>n</em>，因此可以用一次循环完成所有的异或运算，例如下面这个例子：</p><table><thead><tr><th>下标</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>数字</td><td>0</td><td>1</td><td>3</td><td>4</td></tr></tbody></table><p>可以将结果的初始值设为 <em>n</em>，再对数组中的每一个数以及它的下标进行一个异或运算，<br>就得到了缺失的数字为 2。</p><details>    <summary>位运算Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> missing = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            missing ^= i ^ nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> missing;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>位运算Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        missing = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            missing ^= i ^ num</span><br><span class="line">        <span class="keyword">return</span> missing</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(n)*。这里假设异或运算的时间复杂度是常数的，总共会进行 *O(n)</em> 次异或运算，因此总的时间复杂度为 <em>O(n)</em>。</li><li>空间复杂度：<em>O(1)*。算法中只用到了 *O(1)</em> 的额外空间，用来存储答案。</li></ul><h1 id="方法四：数学"><a href="#方法四：数学" class="headerlink" title="方法四：数学"></a>方法四：数学</h1><p><strong>分析</strong></p><p>我们可以用 <a href="https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E6%B1%82%E5%92%8C" target="_blank" rel="noopener">高斯求和公式</a> 求出 <em>[0..n]</em> 的和，减去数组中所有数的和，就得到了缺失的数字。</p><p><strong>算法</strong></p><p>我们在线性时间内可以求出数组中所有数的和，并在常数时间内求出前 <em>n+1</em> 个自然数（包括 0）的和，将后者减去前者，就得到了缺失的数字。</p><details>    <summary>数学Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> expectedSum = nums.length*(nums.length + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actualSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) actualSum += num;</span><br><span class="line">        <span class="keyword">return</span> expectedSum - actualSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>数学Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        expected_sum = len(nums)*(len(nums)+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        actual_sum = sum(nums)</span><br><span class="line">        <span class="keyword">return</span> expected_sum - actual_sum</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(n)</em>。求出数组中所有数的和的时间复杂度为 <em>O(n)</em>，高斯求和公式的时间复杂度为 <em>O(1)</em>，因此总的时间复杂度为 <em>O(n)</em>。</li><li>空间复杂度：<em>O(1)*。算法中只用到了 *O(1)</em> 的额外空间，用来存储答案。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>204. 计数质数</title>
    <link href="http://yoursite.com/2020/09/29/204.%20%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/"/>
    <id>http://yoursite.com/2020/09/29/204. 计数质数/</id>
    <published>2020-09-29T08:30:12.000Z</published>
    <updated>2020-09-30T02:45:06.077Z</updated>
    
    <content type="html"><![CDATA[<p>统计所有小于非负整数 n 的质数的数量。</p><a id="more"></a><p>示例 1：</p><pre><code>输入：n = 10输出：4解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</code></pre><p>示例 2：</p><pre><code>输入：n = 0输出：0</code></pre><p>示例 3：</p><pre><code>输入：n = 1输出：0</code></pre><p>提示：</p><pre><code>0 &lt;= n &lt;= 5 * 106</code></pre><h1 id="总括："><a href="#总括：" class="headerlink" title="总括："></a>总括：</h1><p>此篇题解将共讲述暴力算法、优化暴力算法、厄拉多塞（话说这位老哥第一个量了地球周长）所创造的厄拉多塞筛法、及运用厄拉多塞筛法时于内存上的优化方法。在解释思路时，将尽量一步步地进行详细解读。</p><p>希望对大家能有所帮助！</p><hr><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h1><h2 id="暴力法（计算超时）："><a href="#暴力法（计算超时）：" class="headerlink" title="暴力法（计算超时）："></a><strong>暴力法（计算超时）：</strong></h2><p>验证一个数是否为质数（素数）有很多方法。但最容易想到的莫非用暴力计算的方式一步步碾压过去的方法。虽然这种方法不是最优的，但是其对于我们了解素数仍是有所帮助的。</p><p>思路：验证某个数是否为质数时，将其对每一个比其小的数进行取余运算，并对取余为零的情况进行计数。由于质数是指在大于 1 的自然数中，除了 1 和它本身以外不再有其他因数的自然数。所以，当计数结果为 1 时，该数为质数。</p><p>在实际操作中，由于 1 和任意一个数必然取余为零，所以可以直接排除。并当没有取余为零的情况时，其才为质数。</p><p>得代码如下：</p><details>    <summary>暴力法Csharp</summary><figure class="highlight csharp"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CountPrimes</span>(<span class="params"><span class="keyword">int</span> n</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> sign = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sign = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign)</span><br><span class="line">            count++; ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>暴力法C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> sign = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sign = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign)</span><br><span class="line">            count++; ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="优化暴力算法："><a href="#优化暴力算法：" class="headerlink" title="优化暴力算法："></a><strong>优化暴力算法：</strong></h2><p>细究暴力计算的方法，我们可以发现，假如一个数为 9 ，那么其二分之一（4.5）后的数都可以不用进行计算，因为肯定是有余的 。事实上情况会比这更好一些：对正整数 n ，如果用 2 到 √n 之间(包含边界)的所有整数去除，均无法整除，则 n 为质数。</p><p>并且，我们可以发现，一切非 2 偶数一定不可能为质数。所以，我们可以在此处进行另一步的优化。</p><p>有个这些令人庆幸的发现，我们的代码也将如虎添翼：</p><details>    <summary>暴力法Csharp</summary><figure class="highlight csharp"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CountPrimes</span>(<span class="params"><span class="keyword">int</span> n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;;</span><br><span class="line">    <span class="comment">//从3开始验算，所以初始值为1（2为质数）。</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当某个数为 2 的 n 次方时（n为自然数），其 &amp; (n - 1) 所得值将等价于取余运算所得值</span></span><br><span class="line">        <span class="comment">//*如果 x = 2^n ，则 x &amp; (n - 1) == x % n</span></span><br><span class="line">        <span class="comment">//if(i % 2 == 0)</span></span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>; ;</span><br><span class="line">        <span class="keyword">bool</span> sign = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//用 j * j &lt;= i 代替 j &lt;= √i 会更好。</span></span><br><span class="line">        <span class="comment">//因为我们已经排除了所有偶数，所以每次循环加二将规避偶数会减少循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j * j &lt;=i; j+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sign = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign)</span><br><span class="line">            count++; ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>暴力法C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;;</span><br><span class="line">    <span class="comment">//从3开始验算，所以初始值为1（2为质数）。</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">//当某个数为 2 的 n 次方时（n为自然数），其 &amp; (n - 1) 所得值将等价于取余运算所得值</span></span><br><span class="line">        <span class="comment">//*如果 x = 2^n ，则 x &amp; (n - 1) == x % n</span></span><br><span class="line">        <span class="comment">//if(i % 2 == 0)</span></span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>; ;</span><br><span class="line">        <span class="keyword">bool</span> sign = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//用 j * j &lt;= i 代替 j &lt;= √i 会更好。</span></span><br><span class="line">        <span class="comment">//因为我们已经排除了所有偶数，所以每次循环加二将规避偶数会减少循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j * j &lt;=i; j+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                sign = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign)</span><br><span class="line">            count++; ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>暴力法Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (odd(i)) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">odd</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>(暴力法系列的 C# 和 C++ 的代码几乎相同。)</p><p>经过对暴力算法的此番优化，我们的代码初步达到了应用的最低门槛，但显然还是不大理想，好似总感觉存在不必要的操作。但我们经过以上的研究（可以早一步排除偶数），再结合质数的性质，可以推想出：如果我们在进行顺序遍历时，每取得一个数（排除0、1），如果将它所有的倍数（排除0、1、本身）都清除，那么，剩下的数是不是必为素数？</p><p>没错，这个有趣且实用的方法便是著名的<strong>厄拉多塞筛法</strong>！</p><h2 id="三、厄拉多塞筛法："><a href="#三、厄拉多塞筛法：" class="headerlink" title="三、厄拉多塞筛法："></a><strong>三、厄拉多塞筛法：</strong></h2><p>使用厄拉多塞筛法进行 1 到 64 的质数查找的过程如下：</p><p> <a href="https://pic.leetcode-cn.com/a1faca1423ae40210283ae99735d3816702ccf4ea3d14b452bd31b52dc5c1ab7-%E8%B4%A8%E6%95%B001.png" target="_blank" rel="noopener">质数01.png</a> <a href="https://pic.leetcode-cn.com/9ce249c55336894269a24b07b24aeda45c9282d2bd7bcfe8b6a4924010f30c56-%E8%B4%A8%E6%95%B002.png" target="_blank" rel="noopener">质数02.png</a> <a href="https://pic.leetcode-cn.com/9907eb6310771945b98d85507e9ac396066eca6687d4a124d8d580cb4cb77331-%E8%B4%A8%E6%95%B003.png" target="_blank" rel="noopener">质数03.png</a> <a href="https://pic.leetcode-cn.com/44a83633f6e730b105c747efe1ea99f1ade9461278735ac1bb310264fe7f7890-%E8%B4%A8%E6%95%B004.png" target="_blank" rel="noopener">质数04.png</a> <a href="https://pic.leetcode-cn.com/11cdfac5138c3a0a1529407157264c066cc36b2acbd6160cb94fe848d5882c47-%E8%B4%A8%E6%95%B005.png" target="_blank" rel="noopener">质数05.png</a> <a href="https://pic.leetcode-cn.com/1474c46f44db885dd00a70dfb475d68cdde33a882cbd9f0e8f16561189441bd6-%E8%B4%A8%E6%95%B006.png" target="_blank" rel="noopener">质数06.png</a> <a href="https://pic.leetcode-cn.com/d1892c5f2c2fc9c76f7d998ac0bf57fa8f11579fb17a6e3305896d40c263b41e-%E8%B4%A8%E6%95%B007.png" target="_blank" rel="noopener">质数07.png</a> <a href="https://pic.leetcode-cn.com/4983199ef4fd10fff41c3e11f052793ea4c7e8fa1122ff1c31ece11a94eea561-%E8%B4%A8%E6%95%B008.png" target="_blank" rel="noopener">质数08.png</a> <a href="https://pic.leetcode-cn.com/cd1a2a9c42fc47a45c907c2e72f88421847d995275a677fd75c0eacce8996c06-%E8%B4%A8%E6%95%B009.png" target="_blank" rel="noopener">质数09.png</a> <a href="https://pic.leetcode-cn.com/e5172309e50d91eb5fced486d2b479677a6cbf594f157e18cc2b080b2cf7acdd-%E8%B4%A8%E6%95%B010.png" target="_blank" rel="noopener">质数10.png</a> <a href="https://pic.leetcode-cn.com/d9c9c9a293b63a9ae6b991f491add5a527b4ed0590c5c1e55bc1d7adf0bbcd30-%E8%B4%A8%E6%95%B011.png" target="_blank" rel="noopener">质数11.png</a> <a href="https://pic.leetcode-cn.com/f6bbb60ddcd9b5ad283163d9ac1612e128fc909120125192e86d77bdf80db6e9-%E8%B4%A8%E6%95%B012.png" target="_blank" rel="noopener">质数12.png</a> <a href="https://pic.leetcode-cn.com/95d13d8085953ddd6cba4298479fe110672e7331922b43b105c8eedaed14a870-%E8%B4%A8%E6%95%B013.png" target="_blank" rel="noopener">质数13.png</a> <a href="https://pic.leetcode-cn.com/9f6f86ac5a51f27e5abbeb25dd25cc527125ef7bcb3822e7ff6229b739166e7b-%E8%B4%A8%E6%95%B014.png" target="_blank" rel="noopener">质数14.png</a> <a href="https://pic.leetcode-cn.com/a81d726b272aec84d583574a6f8ab82245bf85591495a07aff84ed4f5db3db96-%E8%B4%A8%E6%95%B015.png" target="_blank" rel="noopener">质数15.png</a> <a href="https://pic.leetcode-cn.com/95be087f2ccf42f1e020ca2b762ab31eb82209c02a1f2dd5ddcf0ce3dec28eb3-%E8%B4%A8%E6%95%B016.png" target="_blank" rel="noopener">质数16.png</a> <a href="https://pic.leetcode-cn.com/d173b60cd95b8b6cbdadb8a8c5ccc477a8afd48093c3b4bac07216e1d0cd6b83-%E8%B4%A8%E6%95%B017.png" target="_blank" rel="noopener">质数17.png</a> </p><p>（做图片的时候把质数弄成了素数……）</p><p>对此，我们可以声明一个长度为最大限制数的布尔数组。用布尔值来区别筛选出的数和质数。</p><p>运用厄拉多塞筛法得代码如下：</p><details>    <summary>厄拉多塞筛法Csharp</summary><figure class="highlight csharp"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CountPrimes</span>(<span class="params"><span class="keyword">int</span> n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span>[] signs = <span class="keyword">new</span> <span class="keyword">bool</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//因为在 C# 中，布尔类型的默认值为 假。所以在此处用了逻辑非（！）操作符。</span></span><br><span class="line">        <span class="keyword">if</span> (!signs[i])</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; n; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//排除不是质数的数</span></span><br><span class="line">                signs[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>厄拉多塞筛法C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始默认所有数为质数</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; signs(n, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (signs[i]) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; n; j += i) &#123;</span><br><span class="line">                <span class="comment">//排除不是质数的数</span></span><br><span class="line">                signs[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>厄拉多塞筛法Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] signs = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//因为在 Java 中，布尔类型的默认值为 假。所以在此处用了逻辑非（！）操作符。</span></span><br><span class="line">            <span class="keyword">if</span> (!signs[i]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; n; j += i) &#123;</span><br><span class="line">                    signs[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>## **四、运用比特表（Bitmap）算法对筛法进行内存优化：**<p>上面运用厄拉多塞筛法求一定范围内的质数已经十分高效了。然而，我们使用布尔数组标记一个数是否为质数时，每个值都占用了一个字节（Byte）。但是，我们仅需要两个不同的值来表示是否为质数即可。即一个比特（bit）来表示即可（0、1）。如果这样的话，我们便最优可节省八分之七的空间（然而，还得结合代码和实际情况，并不是用了就一定有效果）。</p><ul><li>关于比特表算法在此便简要概述以下（可略过）：</li></ul><p>假如有从 1 至 8 总共八个数。现有一个字节大小的内存空间可供使用（仅供参考，不考虑实际用途及比特算法的最佳用处）。如何将每个数登记下来，并可以随时检查一个数是否存在呢？</p><p>如果用一个数组表示，即使不考虑数组的内存开销，哪怕用一个 byte 类型的变量记录每一数也将超出内存可使用范围。但是由于每个字节共有八个比特位，则可以用每个比特位来表示每个数字则恰好可以登记完所有的数字。</p><p>示例：</p><ol><li>登记数字 1 ：0 0 0 0 0 0 0 1</li><li>登记数字 1、3：0 0 0 0 0 1 0 1</li><li>登记数字 1、2、3、4、5 ：0 0 0 1 1 1 1 1</li></ol><p>得代码如下：</p><details>    <summary>运用比特表Csharp</summary><figure class="highlight csharp"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CountPrimes</span>(<span class="params"><span class="keyword">int</span> n</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一个 int 变量占用 32 字节</span></span><br><span class="line">    <span class="comment">//在C#中，提供了点阵列（BitArray）数组，用这玩意可读性一定会好于我写的代码。</span></span><br><span class="line">    <span class="keyword">int</span>[] signs = <span class="keyword">new</span> <span class="keyword">int</span>[n / <span class="number">32</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将元素和需确定得数字经行按位或运算，如果值改变，说明不存在该数字（未登记该数字），则其为质数。</span></span><br><span class="line">        <span class="comment">//(当某个数为 2 的 n 次方时（n为自然数），其 &amp; (n - 1) 所得值将等价于取余运算所得值)</span></span><br><span class="line">        <span class="comment">//*如果 x = 2^n ，则 x &amp; (n - 1) == x % n</span></span><br><span class="line">        <span class="comment">//下面判断可以写成</span></span><br><span class="line">        <span class="comment">//if ((signs[i / size] &amp; (1 &lt;&lt; (i % 32))) == 0)</span></span><br><span class="line">        <span class="keyword">if</span> ((signs[i / <span class="number">32</span>] &amp; (<span class="number">1</span> &lt;&lt; (i &amp; <span class="number">31</span>))) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; n; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//登记该数字</span></span><br><span class="line">                signs[j / <span class="number">32</span>] |= <span class="number">1</span> &lt;&lt; (j &amp; <span class="number">31</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>运用比特表C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一个 int 变量不知道占多少字节（但请注意，这里采用了常量）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; signs(n / size + <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">//将元素和需确定得数字经行按位或运算，如果值改变，说明不存在该数字（未登记该数字），则其为质数。</span></span><br><span class="line">        <span class="comment">//在C++中，其提供了 bitset 来操作位，在此便不做介绍了。如果用了，可读性肯定会更好。</span></span><br><span class="line">        <span class="comment">//(当某个数为 2 的 n 次方时（n为自然数），其 &amp; (n - 1) 所得值将等价于取余运算所得值)</span></span><br><span class="line">        <span class="comment">//*如果 x = 2^n ，则 x &amp; (n - 1) == x % n</span></span><br><span class="line">        <span class="comment">//下面判断可以写成</span></span><br><span class="line">        <span class="comment">//if ((signs[i / size] &amp; (1 &lt;&lt; (i % 32))) == 0)</span></span><br><span class="line">        <span class="keyword">if</span> ((signs[i / size] &amp; (<span class="number">1</span> &lt;&lt; (i &amp; (size - <span class="number">1</span>)))) == <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; n; j += i)&#123;</span><br><span class="line">                <span class="comment">//登记该数字</span></span><br><span class="line">            signs[j / size] |= <span class="number">1</span> &lt;&lt; (j &amp; (size - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>经测试，C# 内存优化效果较为明显，但 C++ 效果不大明显。但这种方法显然是为了特殊情况而准备（比如一亿个数）。不过也可能是我写的不好。仅作参考，如果有所错误恳请您斧正。<p>（其实有时候代码的可读性要胜于代码改动所带来的一点的性能上的提升。）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统计所有小于非负整数 n 的质数的数量。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>191. 位1的个数</title>
    <link href="http://yoursite.com/2020/09/28/191.%20%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/2020/09/28/191. 位1的个数/</id>
    <published>2020-09-28T03:27:12.000Z</published>
    <updated>2020-09-29T08:37:42.516Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><a id="more"></a><p>示例 1：</p><pre><code>输入：00000000000000000000000000001011输出：3解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &apos;1&apos;。</code></pre><p>示例 2：</p><pre><code>输入：00000000000000000000000010000000输出：1解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &apos;1&apos;。</code></pre><p>示例 3：</p><pre><code>输入：11111111111111111111111111111101输出：31解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &apos;1&apos;。</code></pre><p>提示：</p><p>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</p><p>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</p><p>进阶:</p><pre><code>如果多次调用这个函数，你将如何优化你的算法？</code></pre><h1 id="方法-1：循环和位移动"><a href="#方法-1：循环和位移动" class="headerlink" title="方法 1：循环和位移动"></a>方法 1：循环和位移动</h1><p><strong>算法</strong></p><p>这个方法比较直接。我们遍历数字的 32 位。如果某一位是 <em>1</em> ，将计数器加一。</p><p>我们使用 <em>位掩码</em> 来检查数字的第 <em>i^{th}</em> 位。一开始，掩码 <em>m=1</em> 因为 <em>1</em> 的二进制表示是</p><pre><code>0000 0000 0000 0000 0000 0000 0000 0001</code></pre><p>显然，任何数字跟掩码 <em>1</em> 进行逻辑与运算，都可以让我们获得这个数字的最低位。检查下一位时，我们将掩码左移一位。</p><pre><code>0000 0000 0000 0000 0000 0000 0000 0010</code></pre><p>并重复此过程。</p><details>    <summary>循环和位移动</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; mask) != <span class="number">0</span>) &#123;</span><br><span class="line">            bits++;</span><br><span class="line">        &#125;</span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(1)</em> 。运行时间依赖于数字 <em>n</em> 的位数。由于这题中 <em>n</em> 是一个 32 位数，所以运行时间是 <em>O(1)</em> 的。</p></li><li><p>空间复杂度：<em>O(1)</em>。没有使用额外空间。</p></li></ul><h1 id="方法-2：位操作的小技巧"><a href="#方法-2：位操作的小技巧" class="headerlink" title="方法 2：位操作的小技巧"></a>方法 2：位操作的小技巧</h1><p><strong>算法</strong></p><p>我们可以把前面的算法进行优化。我们不再检查数字的每一个位，而是不断把数字最后一个 <em>1</em> 反转，并把答案加一。当数字变成 <em>0</em> 的时候偶，我们就知道它没有 <em>1</em> 的位了，此时返回答案。</p><p>这里关键的想法是对于任意数字 <em>n</em> ，将 <em>n</em> 和 <em>n - 1</em> 做与运算，会把最后一个 <em>1</em> 的位变成 <em>0</em> 。为什么？考虑 <em>n</em> 和 <em>n - 1</em> 的二进制表示。</p><p><a href="https://pic.leetcode-cn.com/abfd6109e7482d70d20cb8fc1d632f90eacf1b5e89dfecb2e523da1bcb562f66-image.png" target="_blank" rel="noopener">image.png</a></p><p><em>图片 1. 将 *n</em> 和 <em>n-1</em> 做与运算会将最低位的 <em>1</em> 变成 <em>0*</em></p><p>在二进制表示中，数字 <em>n</em> 中最低位的 <em>1</em> 总是对应 <em>n - 1</em> 中的 <em>0</em> 。因此，将 <em>n</em> 和 <em>n - 1</em> 与运算总是能把 <em>n</em> 中最低位的 <em>1</em> 变成 <em>0</em> ，并保持其他位不变。</p><p>使用这个小技巧，代码变得非常简单。</p><details>    <summary>位操作的小技巧</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        n &amp;= (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li><p>时间复杂度：<em>O(1)</em> 。运行时间与 <em>n</em> 中位为 <em>1</em> 的有关。在最坏情况下， <em>n</em> 中所有位都是 <em>1</em> 。对于 32 位整数，运行时间是 <em>O(1)</em> 的。</p></li><li><p>空间复杂度：<em>O(1)</em> 。没有使用额外空间。</p></li></ul><h1 id="位运算技巧"><a href="#位运算技巧" class="headerlink" title="位运算技巧"></a>位运算技巧</h1><h2 id="n-amp-n-1-把最后一个-1-的位变成-0"><a href="#n-amp-n-1-把最后一个-1-的位变成-0" class="headerlink" title="n &amp; (n-1) 把最后一个 1 的位变成 0"></a>n &amp; (n-1) 把最后一个 1 的位变成 0</h2><p>任意数字 n ，将 n 和 n - 1 做与运算，会把最后一个 1 的位变成 0</p><h2 id="n-amp-n-保留-n-最右边的-1"><a href="#n-amp-n-保留-n-最右边的-1" class="headerlink" title="n &amp; (-n) 保留 n 最右边的 1"></a>n &amp; (-n) 保留 <code>n</code> 最右边的 <code>1</code></h2><p>我们通过 <code>n &amp; (-n)</code> 保留 <code>n</code> 最右边的 <code>1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>172. 阶乘后的零</title>
    <link href="http://yoursite.com/2020/09/27/172.%20%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/"/>
    <id>http://yoursite.com/2020/09/27/172. 阶乘后的零/</id>
    <published>2020-09-27T07:27:12.000Z</published>
    <updated>2020-09-27T07:56:47.989Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: 3输出: 0解释: 3! = 6, 尾数中没有零。</code></pre><p>示例 2:</p><pre><code>输入: 5输出: 1解释: 5! = 120, 尾数中有 1 个零.说明: 你算法的时间复杂度应为 O(log n) 。</code></pre><h1 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h1><p>看到这道题首先排除掉计算阶乘，先求乘数中含有10，5，2的个数，零的数量取决于这三个因子</p><details>    <summary>解法一</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int trailingZeroes(int n) &#123;</span><br><span class="line">        int numfive=0;</span><br><span class="line">        int numtwo=0;</span><br><span class="line">        int numten=0;</span><br><span class="line">        for (int j = 1; j &lt;= n; j++) &#123;</span><br><span class="line">            int i = j;</span><br><span class="line">            while (i % 10 == 0) &#123;</span><br><span class="line">                numten++;</span><br><span class="line">                i = i / 10;</span><br><span class="line">            &#125;</span><br><span class="line">            while (i % 5 == 0) &#123;</span><br><span class="line">                numfive++;</span><br><span class="line">                i = i / 5;</span><br><span class="line">            &#125;</span><br><span class="line">            while (i % 2 == 0) &#123;</span><br><span class="line">                numtwo++;</span><br><span class="line">                i = i / 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return numten + Math.min(numfive, numtwo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h1><p>之前小红书面试的时候碰到的一道题，没想到又是 leetcode 的原题。这种没有通用解法的题，完全依靠于对题目的分析理解了，自己当时也是在面试官的提示下慢慢出来的，要是想不到题目的点，还是比较难做的。</p><p>首先肯定不能依赖于把阶乘算出来再去判断有多少个零了，因为阶乘很容易就溢出了，所以先一步一步理一下思路吧。</p><p>首先末尾有多少个 <code>0</code> ，只需要给当前数乘以一个 <code>10</code> 就可以加一个 <code>0</code>。</p><p>再具体对于 <code>5!</code>，也就是 <code>5 * 4 * 3 * 2 * 1 = 120</code>，我们发现结果会有一个 <code>0</code>，原因就是 <code>2</code> 和 <code>5</code> 相乘构成了一个 <code>10</code>。而对于 <code>10</code> 的话，其实也只有 <code>2 * 5</code>  可以构成，所以我们只需要找有多少对 <code>2/5</code>。</p><p>我们把每个乘数再稍微分解下，看一个例子。</p><p><code>11! = 11 * 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 11 * (2 * 5) * 9 * (4 * 2) * 7 * (3 * 2) * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1</code></p><p>对于含有 <code>2</code> 的因子的话是  <code>1 * 2, 2 * 2, 3 * 2, 4 * 2 ...</code></p><p>对于含有 <code>5</code> 的因子的话是  <code>1 * 5, 2 * 5...</code></p><p>含有 <code>2</code> 的因子每两个出现一次，含有 <code>5</code> 的因子每 <code>5</code> 个出现一次，所有 <code>2</code> 出现的个数远远多于 <code>5</code>，换言之找到一个 <code>5</code>，一定能找到一个 <code>2</code> 与之配对。所以我们只需要找有多少个 <code>5</code>。</p><p>直接的，我们只需要判断每个累乘的数有多少个 <code>5</code> 的因子即可。</p><details>    <summary>解法二</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> N = i;</span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (N % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                N /= <span class="number">5</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>但发生了超时，我们继续分析。</p><p>对于一个数的阶乘，就如之前分析的，<code>5</code> 的因子一定是每隔 <code>5</code> 个数出现一次，也就是下边的样子。</p><p><code>n! = 1 * 2 * 3 * 4 * (1 * 5) * ... * (2 * 5) * ... * (3 * 5) *... * n</code></p><p>因为每隔 <code>5</code> 个数出现一个 <code>5</code>，所以计算出现了多少个 <code>5</code>，我们只需要用 <code>n/5</code> 就可以算出来。</p><p>但还没有结束，继续分析。</p><p><code>... * (1 * 5) * ... * (1 * 5 * 5) * ... * (2 * 5 * 5) * ... * (3 * 5 * 5) * ... * n</code></p><p>每隔 <code>25</code> 个数字，出现的是两个 <code>5</code>，所以除了每隔 <code>5</code> 个数算作一个 <code>5</code>，每隔 <code>25</code> 个数，还需要多算一个 <code>5</code>。</p><p>也就是我们需要再加上 <code>n / 25</code> 个 <code>5</code>。</p><p>同理我们还会发现每隔 <code>5 * 5 * 5 = 125</code> 个数字，会出现 <code>3</code> 个 <code>5</code>，所以我们还需要再加上 <code>n / 125</code> 。</p><p>综上，规律就是每隔 <code>5</code> 个数，出现一个 <code>5</code>，每隔 <code>25</code> 个数，出现 <code>2</code> 个 <code>5</code>，每隔 <code>125</code> 个数，出现 <code>3</code> 个 <code>5</code>… 以此类推。</p><p>最终 <code>5</code> 的个数就是 <code>n / 5 + n / 25 + n / 125 ...</code></p><p>写程序的话，如果直接按照上边的式子计算，分母可能会造成溢出。所以算 <code>n / 25</code> 的时候，我们先把 <code>n</code> 更新，<code>n = n / 5</code>，然后再计算 <code>n / 5</code> 即可。后边的同理。</p><details>    <summary>解法二</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        count += n / <span class="number">5</span>;</span><br><span class="line">        n = n / <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数 n，返回 n! 结果尾数中零的数量。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>190. 颠倒二进制位</title>
    <link href="http://yoursite.com/2020/09/27/190.%20%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"/>
    <id>http://yoursite.com/2020/09/27/190. 颠倒二进制位/</id>
    <published>2020-09-27T07:27:12.000Z</published>
    <updated>2020-09-28T03:12:13.275Z</updated>
    
    <content type="html"><![CDATA[<p>颠倒给定的 32 位无符号整数的二进制位。</p><a id="more"></a><p>示例 1：</p><pre><code>输入: 00000010100101000001111010011100输出: 00111001011110000010100101000000解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</code></pre><p>示例 2：</p><pre><code>输入：11111111111111111111111111111101输出：10111111111111111111111111111111解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。</code></pre><p>提示：</p><pre><code>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</code></pre><p>进阶:</p><pre><code>如果多次调用这个函数，你将如何优化你的算法？</code></pre><h1 id="方法一：逐位颠倒"><a href="#方法一：逐位颠倒" class="headerlink" title="方法一：逐位颠倒"></a>方法一：逐位颠倒</h1><p>虽然这个问题并不难，但它常常是面试开始时的一个热身问题。重点是测试一个人对数据类型和位操作的基本知识。</p><p>在面试的时候逐位颠倒作为最直接的解决方案。</p><p><a href="https://pic.leetcode-cn.com/15bcf5b6db9b5211046655737571e3fe2668f9ecfc24ce517cd2b0882824aecd-file_1585801736085" target="_blank" rel="noopener">逐位颠倒</a></p><p>尽管听起来很简单，但上述逻辑的不同实现产生不同的解决方案。例如，要检索整数 <code>n</code> 中最右边的位，可以应用模运算（即 <code>n%2</code>）或与运算（即 <code>n &amp;1</code>）。另一个例子是，为了组合反转位（例如 <em>2^a，2^b</em>）的结果，可以使用加法运算（即 <em>2^a+2^b</em>）或再次使用位或运算（即 <em>2^a | 2^b</em>）。</p><p><strong>算法：</strong><br>在这里，我们将展示基于上述逻辑的实现示例。</p><p><a href="https://pic.leetcode-cn.com/ca2460d77758bd033e787f6b1602f5571891520acae4eefa7bcc7f1fe48b5a2e-file_1585801736110" target="_blank" rel="noopener">实现示例</a><br>关键思想是，对于位于索引 <code>i</code> 处的位，在反转之后，其位置应为 <code>31-i</code>（注：索引从零开始）。</p><ul><li>我们从右到左遍历输入整数的位字符串（即 <code>n=n&gt;&gt;1</code>）。要检索整数的最右边的位，我们应用与运算（<code>n&amp;1</code>）。</li><li>对于每个位，我们将其反转到正确的位置（即<code>（n&amp;1）&lt;&lt;power</code>）。然后添加到最终结果。</li><li>当 <code>n==0</code> 时，我们终止迭代。</li></ul><details>    <summary>逐位颠倒Java</summary><figure class="highlight java"><figcaption><span>[solution1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 1. 将给定的二进制数,由低到高位逐个取出</span></span><br><span class="line">            <span class="comment">// 1.1 右移 i 位,</span></span><br><span class="line">            <span class="keyword">int</span> tmp = n &gt;&gt; i;</span><br><span class="line">            <span class="comment">// 1.2  取有效位</span></span><br><span class="line">            tmp = tmp &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 2. 然后通过位运算将其放置到反转后的位置.</span></span><br><span class="line">            tmp = tmp &lt;&lt; (<span class="number">31</span> - i);</span><br><span class="line">            <span class="comment">// 3. 将上述结果再次通过运算结合到一起</span></span><br><span class="line">            result |= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>逐位颠倒Python</summary><figure class="highlight python"><figcaption><span>[solution1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        ret, power = <span class="number">0</span>, <span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            ret += (n &amp; <span class="number">1</span>) &lt;&lt; power</span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span></span><br><span class="line">            power -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></details><details>    <summary>逐位颠倒C++</summary><figure class="highlight c++"><figcaption><span>[solution1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> ret = <span class="number">0</span>, power = <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">      ret += (n &amp; <span class="number">1</span>) &lt;&lt; power;</span><br><span class="line">      n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      power -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>逐位颠倒Go</summary><figure class="highlight go"><figcaption><span>[solution1-Go]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseBits</span><span class="params">(num <span class="keyword">uint32</span>)</span> <span class="title">uint32</span></span> &#123;</span><br><span class="line">    ret := <span class="keyword">uint32</span>(<span class="number">0</span>)</span><br><span class="line">    power := <span class="keyword">uint32</span>(<span class="number">31</span>)</span><br><span class="line">    <span class="keyword">for</span> num != <span class="number">0</span> &#123;</span><br><span class="line">        ret += (num &amp; <span class="number">1</span>) &lt;&lt; power</span><br><span class="line">        num = num &gt;&gt; <span class="number">1</span></span><br><span class="line">        power -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li>时间复杂度：log_2(N) 。在算法中，我们有一个循环来迭代输入的最高非零位，即log_2(N)  。</li><li>空间复杂度：O(1) ，因为不管输入是什么，内存的消耗是固定的。</li></ul><h1 id="方法二：带记忆化的按字节颠倒"><a href="#方法二：带记忆化的按字节颠倒" class="headerlink" title="方法二：带记忆化的按字节颠倒"></a>方法二：带记忆化的按字节颠倒</h1><p>有人可能会说，每字节（8 位的比特位）反转可能更有效。由于该题的输入是固定的 32 位整数，所以在本题中不一定是这样的。但是在处理长字节流时，它会变得更有效。</p><p><a href="https://pic.leetcode-cn.com/365599a4030d26a019d37ad97c201e64e2fa3ae9fd7b43d689e8a4d7f802141e-file_1585801736122" target="_blank" rel="noopener">带记忆化的按字节颠倒</a></p><p>使用字节作为迭代单位的另一个隐含优点是，我们可以使用记忆化技术，可以缓存先前计算的值，以避免重新计算。</p><p>记忆化的后续问题是：如果该函数多次被调用，你该如何优化。</p><p>若要按自己为单位反转位，可以应用上述所示的算法。在这里，我们展示一种完全基于算术和位操作，不基于任何循环语句，如下所示：</p><figure class="highlight python"><figcaption><span>[example-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseByte</span><span class="params">(byte)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (byte * <span class="number">0x0202020202</span> &amp; <span class="number">0x010884422010</span>) % <span class="number">1023</span></span><br></pre></td></tr></table></figure><p>这个算法为用 3 个操作反转一个字节中的位，在 Sean Eron Anderson 的在线电子书 Bit Twiddling Hacks 中可以看到更多的细节。</p><p><strong>算法：</strong></p><ul><li>我们按字节遍历整数。为了检索整数中最右边的字节，我们应用位掩码为 <code>11111111</code> 的与操作（即 <code>n&amp;0xff</code>）。</li><li>对于每个字节，首先我们通过一个名为 <code>reverseByte(byte)</code> 的函数来反转字节中的位。然后将反转的结果添加到答案中。</li><li>对于函数 <code>reverseByte(byte)</code>，我们使用记忆化技术，它缓存函数的结果并直接返回结果，以便将来遇到相同的输入。</li></ul><p>注意，可以选择更小的单位而不是字节，例如 4 位的单位，这将需要更多的计算来交换更少的缓存空间。记忆化技术是空间和计算时间之间的权衡。</p><details>    <summary>带记忆化的按字节颠倒Python</summary><figure class="highlight python"><figcaption><span>[solution21-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        ret, power = <span class="number">0</span>, <span class="number">24</span></span><br><span class="line">        cache = dict()</span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            ret += self.reverseByte(n &amp; <span class="number">0xff</span>, cache) &lt;&lt; power</span><br><span class="line">            n = n &gt;&gt; <span class="number">8</span></span><br><span class="line">            power -= <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseByte</span><span class="params">(self, byte, cache)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> byte <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[byte] = (byte * <span class="number">0x0202020202</span> &amp; <span class="number">0x010884422010</span>) % <span class="number">1023</span> </span><br><span class="line">        <span class="keyword">return</span> cache[byte]</span><br></pre></td></tr></table></figure></details><details>    <summary>带记忆化的按字节颠倒Python</summary><figure class="highlight python"><figcaption><span>[solution21-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        ret, power = <span class="number">0</span>, <span class="number">24</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            ret += self.reverseByte(n &amp; <span class="number">0xff</span>) &lt;&lt; power</span><br><span class="line">            n = n &gt;&gt; <span class="number">8</span></span><br><span class="line">            power -= <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="comment"># memoization with decorator</span></span><br><span class="line"><span class="meta">    @functools.lru_cache(maxsize=256)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseByte</span><span class="params">(self, byte)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (byte * <span class="number">0x0202020202</span> &amp; <span class="number">0x010884422010</span>) % <span class="number">1023</span></span><br></pre></td></tr></table></figure></details><details>    <summary>带记忆化的按字节颠倒C++</summary><figure class="highlight c++"><figcaption><span>[solution21-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">uint32_t</span> reverseByte(<span class="keyword">uint32_t</span> byte, <span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, <span class="keyword">uint32_t</span>&gt; cache) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cache.find(byte) != cache.end()) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[byte];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">uint32_t</span> value = (byte * <span class="number">0x0202020202</span> &amp; <span class="number">0x010884422010</span>) % <span class="number">1023</span>;</span><br><span class="line">        cache.emplace(byte, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> ret = <span class="number">0</span>, power = <span class="number">24</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, <span class="keyword">uint32_t</span>&gt; cache;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            ret += reverseByte(n &amp; <span class="number">0xff</span>, cache) &lt;&lt; power;</span><br><span class="line">            n = n &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            power -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>带记忆化的按字节颠倒Go</summary><figure class="highlight go"><figcaption><span>[solution21-Go]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseByte</span><span class="params">(b <span class="keyword">uint32</span>, cache <span class="keyword">map</span>[<span class="keyword">uint32</span>]<span class="keyword">uint64</span>)</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">    value, ok := cache[b]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    value = (<span class="keyword">uint64</span>(b) * <span class="number">0x0202020202</span> &amp; <span class="number">0x010884422010</span>) % <span class="number">1023</span></span><br><span class="line">    cache[b] = value</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseBits</span><span class="params">(num <span class="keyword">uint32</span>)</span> <span class="title">uint32</span></span> &#123;</span><br><span class="line">    ret := <span class="keyword">uint64</span>(<span class="number">0</span>)</span><br><span class="line">    power := <span class="keyword">uint64</span>(<span class="number">24</span>)</span><br><span class="line">    <span class="keyword">var</span> cache = <span class="keyword">map</span>[<span class="keyword">uint32</span>]<span class="keyword">uint64</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num != <span class="number">0</span> &#123;</span><br><span class="line">        ret += reverseByte(num &amp; <span class="number">0xff</span>, cache) &lt;&lt; power</span><br><span class="line">        num = num &gt;&gt; <span class="number">8</span></span><br><span class="line">        power -= <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">uint32</span>(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1) 。尽管我们在算法中有一个循环，但是无论输入是什么，迭代次数都是固定的，因为在我们的问题中整数是固定大小（32 位）的。</li><li>空间复杂度：O(1) ，同样，尽管我们使用了缓存来保留反转字节的结果，但缓存中的大小总数限制为 <em>2^8=256</em>。</li></ul><h1 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h1><p>在方法 2 中，我们展示了一个关于如何在不使用循环语句的情况下反转字节中的位的示例。</p><p><strong>在面试过程中，你可能会被要求在不使用循环的情况下反转整个 32 位。</strong> </p><p>在这里，我们提出了一种只使用位操作的解决方案。</p><p>这种思想可以看作是一种分治的策略，我们通过掩码将 32 位整数划分成具有较少位的块，然后通过将每个块反转，最后将每个块的结果合并得到最终结果。</p><p>在下图中，我们演示如何使用上述思想反转两个位。同样的，这个想法可以应用到比特块上。</p><p><a href="https://pic.leetcode-cn.com/c57a82424197ba1f4091a67cc4a6c575b35dcc0bf9d077415838d3b22d4b1ff3-file_1585801736118" target="_blank" rel="noopener">不使用循环语句的情况下反转字节中的位</a></p><p><strong>算法：</strong></p><p>我们可以通过以下步骤实现该算法：</p><ul><li>首先，我们将原来的 32 位分为 2 个 16 位的块。</li><li>然后我们将 16 位块分成 2 个 8 位的块。</li><li>然后我们继续将这些块分成更小的块，直到达到 1 位的块。</li><li>在上述每个步骤中，我们将中间结果合并为一个整数，作为下一步的输入。</li></ul><p>既然知道 int 值一共32位，那么可以采用分治思想，反转左右16位，然后反转每个16位中的左右8位，依次类推，最后反转2位，反转后合并即可，同时可以利用位运算在原地反转。JDK中的Integer.bitCount()函数也是使用类似的方法。</p><p>这么说比较抽象，可以直接结合代码看下面的步骤，也可以拿代码在IDE中debug一下，看每一步都做了什么</p><ol><li>首先随便找一个数 (为了看的清楚用_作分隔，可以忽略)</li></ol><pre><code>十进制43261596;   // 0000 ‭0010 1001 0100 _ 0001 1110 1001 1100‬</code></pre><ol start="2"><li>左边16位移到右边，右边16位移到左边，然后使用|符号合并起来</li></ol><pre><code>Java中的无符号位移 &gt;&gt;&gt;：无论是正数还是负数，高位通通补0。&gt;&gt;：带符号右移。正数右移高位补0，负数右移高位补1。|：按位或逻辑，该位只要有一位为1，结果就为1，这里用来合并</code></pre><ol start="3"><li>使用一些有规律的数，将16位，再分成左右8位进行反转后合并，起始数字变为‭0001 1110 1001 1100 _ 0000 0010 1001 0100‬</li></ol><pre><code>0xff00ff00 表示16进制数1111 1111 0000 0000 _ 1111 1111 0000 0000 ，0x00ff00ff 表示16进制数0000 0000 1111 1111 _ 0000 0000 1111 1111，</code></pre><ol start="4"><li><p>重复以上步骤，分组、合并，最后得到反转后的结果。</p></li><li><p>总结来说就是利用位运算进行反转，同时存储反转后的数，继续分治进行反转，直到全部反转完成，变化过程为：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 原数字43261596</span><br><span class="line"> 0000 ‭0010 1001 0100 _ 0001 1110 1001 1100‬ </span><br><span class="line">// 反转左右16位：</span><br><span class="line">‭ 0001 1110 1001 1100 _ 0000 0010 1001 0100‬ </span><br><span class="line">// 继续分为8位一组反转：</span><br><span class="line"> 1001 1100 0001 1110 _ 1001 0100 0000 0010</span><br><span class="line">// 4位一组反转：</span><br><span class="line"> 1100 1001 1110 0001 _ 0100 1001 0010 0000‬</span><br><span class="line">// 2位一组反转：</span><br><span class="line"> 0011 0110 1011 0100 _ 0001 0110 1000 0000</span><br><span class="line">// 每两位再反转一下</span><br><span class="line">‭ 0011 1001 0111 1000 _ 0010 1001 0100 0000‬‬</span><br><span class="line">// 这就是43261596反转后的结果：‭964176192‬</span><br></pre></td></tr></table></figure><details>    <summary>不使用循环语句的情况下反转字节中的位Java</summary><figure class="highlight java"><figcaption><span>[solution3-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        n = (n &gt;&gt;&gt; <span class="number">16</span>) | (n &lt;&lt; <span class="number">16</span>); </span><br><span class="line">        n = ((n &amp; <span class="number">0xff00ff00</span>) &gt;&gt;&gt; <span class="number">8</span>) | ((n &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>); </span><br><span class="line">        n = ((n &amp; <span class="number">0xf0f0f0f0</span>) &gt;&gt;&gt; <span class="number">4</span>) | ((n &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>); </span><br><span class="line">        n = ((n &amp; <span class="number">0xcccccccc</span>) &gt;&gt;&gt; <span class="number">2</span>) | ((n &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>); </span><br><span class="line">        n = ((n &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt;&gt; <span class="number">1</span>) | ((n &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>不使用循环语句的情况下反转字节中的位Python</summary><figure class="highlight python"><figcaption><span>[solution3-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        n = (n &gt;&gt; <span class="number">16</span>) | (n &lt;&lt; <span class="number">16</span>)</span><br><span class="line">        n = ((n &amp; <span class="number">0xff00ff00</span>) &gt;&gt; <span class="number">8</span>) | ((n &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">        n = ((n &amp; <span class="number">0xf0f0f0f0</span>) &gt;&gt; <span class="number">4</span>) | ((n &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">        n = ((n &amp; <span class="number">0xcccccccc</span>) &gt;&gt; <span class="number">2</span>) | ((n &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>)</span><br><span class="line">        n = ((n &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt; <span class="number">1</span>) | ((n &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure></details><details>    <summary>不使用循环语句的情况下反转字节中的位C++</summary><figure class="highlight c++"><figcaption><span>[solution3-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">        n = (n &gt;&gt; <span class="number">16</span>) | (n &lt;&lt; <span class="number">16</span>);</span><br><span class="line">        n = ((n &amp; <span class="number">0xff00ff00</span>) &gt;&gt; <span class="number">8</span>) | ((n &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">        n = ((n &amp; <span class="number">0xf0f0f0f0</span>) &gt;&gt; <span class="number">4</span>) | ((n &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">        n = ((n &amp; <span class="number">0xcccccccc</span>) &gt;&gt; <span class="number">2</span>) | ((n &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        n = ((n &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt; <span class="number">1</span>) | ((n &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>不使用循环语句的情况下反转字节中的位Go</summary><figure class="highlight go"><figcaption><span>[solution3-Go]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseBits</span><span class="params">(num <span class="keyword">uint32</span>)</span> <span class="title">uint32</span></span> &#123;</span><br><span class="line">    num = (num &gt;&gt; <span class="number">16</span>) | (num &lt;&lt; <span class="number">16</span>)</span><br><span class="line">    num = ((num &amp; <span class="number">0xff00ff</span>00) &gt;&gt; <span class="number">8</span>) | ((num &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">    num = ((num &amp; <span class="number">0xf0f0f0f</span>0) &gt;&gt; <span class="number">4</span>) | ((num &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    num = ((num &amp; <span class="number">0xcccccccc</span>) &gt;&gt; <span class="number">2</span>) | ((num &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>)</span><br><span class="line">    num = ((num &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt; <span class="number">1</span>) | ((num &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1) ，没有使用循环。</li><li>空间复杂度：O(1) ，没有使用变量。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;颠倒给定的 32 位无符号整数的二进制位。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>166. 分数到小数</title>
    <link href="http://yoursite.com/2020/09/18/166.%20%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/"/>
    <id>http://yoursite.com/2020/09/18/166. 分数到小数/</id>
    <published>2020-09-18T09:27:12.000Z</published>
    <updated>2020-09-27T07:22:11.464Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个整数，分别表示分数的分子numerator和分母denominator，以字符串形式返回小数。</p><a id="more"></a><p>如果小数部分为循环小数，则将循环的部分括在括号内。</p><p>示例 1:</p><pre><code>输入: numerator = 1, denominator = 2输出: &quot;0.5&quot;</code></pre><p>示例 2:</p><pre><code>输入: numerator = 2, denominator = 1输出: &quot;2&quot;</code></pre><p>示例 3:</p><pre><code>输入: numerator = 2, denominator = 3输出: &quot;0.(6)&quot;</code></pre><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>这是一道非常直观的代码题，但需要考虑很多细节。</p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol><li>不需要复杂的数学知识，只需要数学的基本知识。了解长除法的运算规则。</li><li>使用长除法计算 4/9 ，循环节很显然就会找到。那么计算 4/333 呢，能找到规律吗？</li><li>注意边界情况！列出所有你可以想到的测试数据并验证你的代码。</li></ol><h1 id="方法：长除法"><a href="#方法：长除法" class="headerlink" title="方法：长除法"></a>方法：长除法</h1><p><strong>思路</strong></p><p>核心思想是当余数出现循环的时候，对应的商也会循环。参见<a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/solution/fen-shu-dao-xiao-shu-by-leetcode/" target="_blank" rel="noopener">^1</a></p><p><strong>算法</strong></p><p>需要用一个哈希表记录余数出现在小数部分的位置，当你发现已经出现的余数，就可以将重复出现的小数部分用括号括起来。</p><p>再出发过程中余数可能为 0，意味着不会出现循环小数，立刻停止程序。</p><p>就像 <a href="(https://leetcode-cn.com/problems/divide-two-integers/)">两数相除</a> 问题一样，要考虑负分数以及极端情况，比如说-2147483648/-1  。</p><p>下面列出了一些很好的测试样例：</p><table><thead><tr><th>测试样例</th><th>解释</th></tr></thead><tbody><tr><td>0/1</td><td>被除数为 0。</td></tr><tr><td>1/0</td><td>除数为 0，应当抛出异常，这里为了简单起见不考虑。</td></tr><tr><td>20/4</td><td>答案是整数，不包括小数部分。</td></tr><tr><td>1/2</td><td>答案是 0.5，是有限小数。</td></tr><tr><td>-1/4 or 1/-4</td><td>除数被除数有一个为负数，结果为负数。</td></tr><tr><td>-1/-4</td><td>除数和被除数都是负数，结果为正数。</td></tr><tr><td>-2147483648/-1</td><td>转成整数时注意可能溢出。</td></tr></tbody></table><details>    <summary>长除法</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fractionToDecimal</span><span class="params">(<span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numerator == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder fraction = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// If either one is negative (not both)</span></span><br><span class="line">    <span class="keyword">if</span> (numerator &lt; <span class="number">0</span> ^ denominator &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fraction.append(<span class="string">"-"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Convert to Long or else abs(-2147483648) overflows</span></span><br><span class="line">    <span class="keyword">long</span> dividend = Math.abs(Long.valueOf(numerator));</span><br><span class="line">    <span class="keyword">long</span> divisor = Math.abs(Long.valueOf(denominator));</span><br><span class="line">    fraction.append(String.valueOf(dividend / divisor));</span><br><span class="line">    <span class="keyword">long</span> remainder = dividend % divisor;</span><br><span class="line">    <span class="keyword">if</span> (remainder == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fraction.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    fraction.append(<span class="string">"."</span>);</span><br><span class="line">    Map&lt;Long, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(remainder)) &#123;</span><br><span class="line">            fraction.insert(map.get(remainder), <span class="string">"("</span>);</span><br><span class="line">            fraction.append(<span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(remainder, fraction.length());</span><br><span class="line">        remainder *= <span class="number">10</span>;</span><br><span class="line">        fraction.append(String.valueOf(remainder / divisor));</span><br><span class="line">        remainder %= divisor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fraction.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定两个整数，分别表示分数的分子numerator和分母denominator，以字符串形式返回小数。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>149. 直线上最多的点数</title>
    <link href="http://yoursite.com/2020/09/18/149.%20%E7%9B%B4%E7%BA%BF%E4%B8%8A%E6%9C%80%E5%A4%9A%E7%9A%84%E7%82%B9%E6%95%B0/"/>
    <id>http://yoursite.com/2020/09/18/149. 直线上最多的点数/</id>
    <published>2020-09-18T01:27:12.000Z</published>
    <updated>2020-09-18T09:50:19.555Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: [[1,1],[2,2],[3,3]]输出: 3解释:^||        o|     o|  o  +-------------&gt;0  1  2  3  4</code></pre><p>示例 2:</p><pre><code>输入: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]输出: 4解释:^||  o|     o        o|        o|  o        o+-------------------&gt;0  1  2  3  4  5  6</code></pre><h1 id="题目描述（困难难度）"><a href="#题目描述（困难难度）" class="headerlink" title="题目描述（困难难度）"></a>题目描述（困难难度）</h1><p>平面上有很多点，找出经过某一条直线最多有多少个点。</p><h1 id="解法一-暴力破解"><a href="#解法一-暴力破解" class="headerlink" title="解法一 暴力破解"></a>解法一 暴力破解</h1><p>两点确定一条直线，最简单的方式考虑任意两点组成一条直线，然后判断其他点在不在这条直线上。</p><p>两点确定一条直线，直线方程可以表示成下边的样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;y_2-y_1&#125;&#123;x_2-x_1&#125;=\frac&#123;y-y_2&#125;&#123;x-x_2&#125;</span><br></pre></td></tr></table></figure><p>所以当来了一个点 <code>(x,y)</code> 的时候，理论上，我们只需要代入到上边的方程进行判断即可。</p><p>但是在计算机中，算上边的除法的时候，结果可能是小数，计算机中用浮点数存储，但小数并不能精确表示，可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/75581822" target="_blank" rel="noopener">浮点数</a> 的讲解。所以我们不能直接去判断等式两边是否相等。</p><p>第一个想法是，等式两边分子乘分母，转换为乘法的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(y_2-y_1)*(x-x_2)=(y-y_2)*(x_2-x_1)</span><br></pre></td></tr></table></figure><p>所以我们可以写一个 <code>test</code> 函数来判断点 <code>(x,y)</code> 是否在由点 <code>(x1,y1)</code> 和 <code>(x2,y2)</code> 组成的直线上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (y2 - y1) * (x - x2) == (y - y2) * (x2 - x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边看起来没问题，但如果乘积过大的话就可能造成溢出，从而产生问题。</p><p>最直接的解决方案就是不用 <code>int</code> 存，改用 <code>long</code> 存，可以暂时解决上边的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">long</span>)(y2 - y1) * (x - x2) == (<span class="keyword">long</span>)(y - y2) * (x2 - x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果数据过大，依旧可能造成溢出，再直接的方法就是用 <code>java</code> 提供的 <code>BigInteger</code> 类处理。记得 <code>import java.math.BigInteger;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;        </span><br><span class="line">    BigInteger x11 = BigInteger.valueOf(x1);</span><br><span class="line">    BigInteger x22 = BigInteger.valueOf(x2);</span><br><span class="line">    BigInteger y11 = BigInteger.valueOf(y1);</span><br><span class="line">   BigInteger y22 = BigInteger.valueOf(y2);</span><br><span class="line">    BigInteger x0 = BigInteger.valueOf(x);</span><br><span class="line">    BigInteger y0 = BigInteger.valueOf(y);</span><br><span class="line">    <span class="keyword">return</span> y22.subtract(y11).multiply(x0.subtract(x22)).equals(y0.subtract(y22).multiply(x22.subtract(x11)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，还有一个方案。</p><p>对于下边的等式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;y_2-y_1&#125;&#123;x_2-x_1&#125;=\frac&#123;y-y_2&#125;&#123;x-x_2&#125;</span><br></pre></td></tr></table></figure><p>还可以理解成判断两个分数相等，回到数学上，我们只需要将两个分数约分到最简，然后分别判断分子和分母是否相等即可。</p><p>所以，我们需要求分子和分母的最大公约数，直接用<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352" target="_blank" rel="noopener">辗转相除法</a>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>test</code> 函数就可以写成下边的样子。需要注意的是，我们求了<code>y - y2</code> 和 <code>x - x2</code> 最大公约数，所以要保证他俩都不是 <code>0</code> ，防止除零错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> g1 = gcd(y2 - y1, x2 - x1);</span><br><span class="line">    <span class="keyword">if</span>(y == y2 &amp;&amp; x == x2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> g2 = gcd(y - y2, x - x2);</span><br><span class="line">    <span class="keyword">return</span> (y2 - y1) / g1 == (y - y2) / g2 &amp;&amp; (x2 - x1) / g1 == (x - x2) / g2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了 <code>test</code> 函数，接下来，我们只需要三层遍历。前两层遍历选择两个点的所有组合构成一条直线，第三层遍历其他所有点，来判断当前点在不在之前两个点组成的直线上。</p><p>需要注意的是，因为我们两点组成一条直线，必须保证这两个点不重合。所以我们进入第三层循环之前，如果两个点相等就可以直接跳过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (points[i][<span class="number">0</span>] == points[j][<span class="number">0</span>] &amp;&amp; points[i][<span class="number">1</span>] == points[j][<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，我们还需要考虑所有点都相等的情况，这样就可以看做所有点都在一条直线上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; points.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (points[i][<span class="number">0</span>] != points[i + <span class="number">1</span>][<span class="number">0</span>] || points[i][<span class="number">1</span>] != points[i + <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == points.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> points.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有就是点的数量只有两个，或者一个，零个的时候，直接返回点的数量即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (points.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> points.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上所述，代码就出来了，其中 <code>test</code> 函数有三种写法。</p><details>    <summary>暴力破解</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (points.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> points.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; points.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (points[i][<span class="number">0</span>] != points[i + <span class="number">1</span>][<span class="number">0</span>] || points[i][<span class="number">1</span>] != points[i + <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == points.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> points.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] == points[j][<span class="number">0</span>] &amp;&amp; points[i][<span class="number">1</span>] == points[j][<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tempMax = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; points.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k != i &amp;&amp; k != j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (test(points[i][<span class="number">0</span>], points[i][<span class="number">1</span>], points[j][<span class="number">0</span>], points[j][<span class="number">1</span>], points[k][<span class="number">0</span>], points[k][<span class="number">1</span>])) &#123;</span><br><span class="line">                        tempMax++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tempMax &gt; max) &#123;</span><br><span class="line">                max = tempMax;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加上直线本身的两个点</span></span><br><span class="line">    <span class="keyword">return</span> max + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*private boolean test(int x1, int y1, int x2, int y2, int x, int y) &#123;</span></span><br><span class="line"><span class="comment">return (long)(y2 - y1) * (x - x2) == (long)(y - y2) * (x2 - x1);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*private boolean test(int x1, int y1, int x2, int y2, int x, int y) &#123;        </span></span><br><span class="line"><span class="comment">    BigInteger x11 = BigInteger.valueOf(x1);</span></span><br><span class="line"><span class="comment">    BigInteger x22 = BigInteger.valueOf(x2);</span></span><br><span class="line"><span class="comment">    BigInteger y11 = BigInteger.valueOf(y1);</span></span><br><span class="line"><span class="comment">   BigInteger y22 = BigInteger.valueOf(y2);</span></span><br><span class="line"><span class="comment">    BigInteger x0 = BigInteger.valueOf(x);</span></span><br><span class="line"><span class="comment">    BigInteger y0 = BigInteger.valueOf(y);</span></span><br><span class="line"><span class="comment">    return y22.subtract(y11).multiply(x0.subtract(x22)).equals(y0.subtract(y22).multiply(x22.subtract(x11)));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> g1 = gcd(y2 - y1, x2 - x1);</span><br><span class="line">    <span class="keyword">if</span>(y == y2 &amp;&amp; x == x2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> g2 = gcd(y - y2, x - x2);</span><br><span class="line">    <span class="keyword">return</span> (y2 - y1) / g1 == (y - y2) / g2 &amp;&amp; (x2 - x1) / g1 == (x - x2) / g2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h1><p>解法一很暴力，我们考虑在其基础上进行优化。</p><p>注意到，如果是下边的情况。</p><p><a href="https://pic.leetcode-cn.com/c2640aab030eac4f019a44b6b88b830002ed056f571c04b4b8dd6a3910bfae5c.jpg" target="_blank" rel="noopener">情况</a></p><p>对于解法一的算法，我们会经过下边的流程。</p><p>我们先考虑 <code>1,2</code> 组成的直线，看 <code>3,4,5,6</code>在不在 <code>1,2</code> 的直线上。</p><p>再考虑 <code>1,3</code> 组成的直线，看 <code>2,4,5,6</code>在不在 <code>1,3</code> 的直线上。</p><p>再考虑 <code>1,4</code> 组成的直线，看 <code>2,3,5,6</code>在不在 <code>1,4</code> 的直线上。</p><p>….</p><p>上边的问题很明显了，对于 <code>1,2</code>，<code>1,3</code>，<code>1,4</code>  … 组成的直线，其实是同一条，我们只需要判断一次就可以了。</p><p>所以我们需要做的是，怎么保证在判断完 <code>1,2</code> 构成的直线后，把 <code>1,3</code>，<code>1,4</code>… 这些在 <code>1,2</code> 直线上的点直接跳过。</p><p>回到数学上，给定两个点可以唯一的确定一条直线，表达式为 <code>y = kx + b</code>。</p><p>对于 <code>1,2</code>，<code>1,3</code>，<code>1,4</code> 这些点求出来的表达式都是唯一确定的。</p><p>所以我们当考虑 <code>1,2</code> 两个点的时候，我们可以求出 <code>k</code> 和 <code>b</code> 把它存到 <code>HashSet</code> 中，然后当考虑 <code>1,3</code> 以及后边的点的时候，先求出 <code>k</code> 和 <code>b</code>，然后从 <code>HashSet</code> 中看是否存在即可。</p><p>当然存的时候，我们可以用一个技巧，<code>key</code> 存一个  <code>String</code> ，也就是 <code>k + &quot;@&quot; + b</code> 。</p><details>    <summary>暴力破解优化</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(points.length &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> points.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//判断所有点是否都相同的特殊情况</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; points.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (points[i][<span class="number">0</span>] != points[i + <span class="number">1</span>][<span class="number">0</span>] || points[i][<span class="number">1</span>] != points[i + <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == points.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> points.length;</span><br><span class="line">    &#125;</span><br><span class="line">    HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] == points[j][<span class="number">0</span>] &amp;&amp; points[i][<span class="number">1</span>] == points[j][<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String key = getK(points[i][<span class="number">0</span>], points[i][<span class="number">1</span>], points[j][<span class="number">0</span>], points[j][<span class="number">1</span>])</span><br><span class="line">                       + <span class="string">"@"</span></span><br><span class="line">                       + getB(points[i][<span class="number">0</span>], points[i][<span class="number">1</span>], points[j][<span class="number">0</span>], points[j][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (set.contains(key)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tempMax = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; points.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k != i &amp;&amp; k != j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (test(points[i][<span class="number">0</span>], points[i][<span class="number">1</span>], points[j][<span class="number">0</span>], points[j][<span class="number">1</span>], points[k][<span class="number">0</span>], points[k][<span class="number">1</span>])) &#123;</span><br><span class="line">                        tempMax++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tempMax &gt; max) &#123;</span><br><span class="line">                max = tempMax;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getB</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y2 == y1) &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.POSITIVE_INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) (x2 - x1) * (-y1) / (y2 - y1) + x1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getK</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x2 - x1 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.POSITIVE_INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) (y2 - y1) / (x2 - x1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">long</span>)(y2 - y1) * (x - x2) == (<span class="keyword">long</span>)(y - y2) * (x2 - x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>上边的算法虽然能 <code>AC</code>，但如果严格来说其实是有问题的。还是因为之前说的浮点数的问题，计算机并不能精确表示小数。这就造成不同的直线可能会求出相同的 <code>k</code> 和 <code>b</code>。</p><p>如果要修改的话，我们可以用分数表示小数，同时必须进行约分，使得分数化成最简。</p><p>对于上边的算法，有两个变量都需要用小数表示，所以可能会复杂些，可以看一下解法三的思路。</p><h1 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h1><p>解法二中，我们相当于是对直线的分类，一条直线一条直线的考虑，去求直线上的点。</p><p><a href="https://leetcode.com/problems/max-points-on-a-line/discuss/47113/A-java-solution-with-notes" target="_blank" rel="noopener">这里</a> 看到另一种想法，分享一下。</p><p>灵感应该来自于直线方程的另一种表示方式，「点斜式」，换句话，一个点加一个斜率即可唯一的确定一条直线。</p><p>所以我们可以对「点」进行分类然后去求，问题转换成，经过某个点的直线，哪条直线上的点最多。</p><p><a href="https://pic.leetcode-cn.com/f9da822aada3c01a0eaf203d6df4107c58cf0cf06dc99082a32fa31360368c6d.jpg" target="_blank" rel="noopener">示意图</a></p><p>当确定一个点后，平面上的其他点都和这个点可以求出一个斜率，斜率相同的点就意味着在同一条直线上。</p><p>所以我们可以用 <code>HashMap</code> 去计数，斜率作为 <code>key</code>，然后遍历平面上的其他点，相同的 <code>key</code> 意味着在同一条直线上。</p><p>上边的思想解决了「经过某个点的直线，哪条直线上的点最多」的问题。接下来只需要换一个点，然后用同样的方法考虑完所有的点即可。</p><p>当然还有一个问题就是斜率是小数，怎么办。</p><p>之前提到过了，我们用分数去表示，求分子分母的最大公约数，然后约分，最后将 「分子 + “@” + “分母”」作为 <code>key</code> 即可。</p><p>最后还有一个细节就是，当确定某个点的时候，平面内如果有和这个重叠的点，如果按照正常的算法约分的话，会出现除 <code>0</code> 的情况，所以我们需要单独用一个变量记录重复点的个数，而重复点一定是过当前点的直线的。</p><details>    <summary>暴力破解</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (points.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> points.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历每个点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> duplicate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;<span class="comment">//保存经过当前点的直线中，最多的点</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">            <span class="comment">//求出分子分母</span></span><br><span class="line">            <span class="keyword">int</span> x = points[j][<span class="number">0</span>] - points[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = points[j][<span class="number">1</span>] - points[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//重叠的点</span></span><br><span class="line">                duplicate++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行约分</span></span><br><span class="line">            <span class="keyword">int</span> gcd = gcd(x, y);</span><br><span class="line">            x = x / gcd;</span><br><span class="line">            y = y / gcd;</span><br><span class="line">            String key = x + <span class="string">"@"</span> + y;</span><br><span class="line">            map.put(key, map.getOrDefault(key, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            max = Math.max(max, map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1 代表当前考虑的点，duplicate 代表和当前的点重复的点</span></span><br><span class="line">        res = Math.max(res, max + duplicate + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h1><p>解法三还是不太明白，如果有两条平行直线，那么斜率一样，不就都存到一个哈希key里去了吗？</p><p>以注意下循环和辅助哈希表的创建位置，最外层的循环已经确保了当前哈希表里的斜率是对当前节点points[i]的。每次循环到一个点都会重新定义一个哈希表，所以会避免这种情况</p><h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><p>这道题首先还是去想暴力的想法，然后去考虑重复的情况，对情况进行分类从而优化时间复杂度。同样解法三其实也是一种分类的思想，会减少很多不必要情况的讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>260. 只出现一次的数字III</title>
    <link href="http://yoursite.com/2020/09/17/260.%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/"/>
    <id>http://yoursite.com/2020/09/17/260. 只出现一次的数字III/</id>
    <published>2020-09-17T09:55:12.000Z</published>
    <updated>2020-09-17T10:37:15.626Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。</p><a id="more"></a><p> 示例 :</p><pre><code>输入: [1,2,1,3,2,5]输出: [3,5]</code></pre><p> 注意：</p><pre><code>结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</code></pre><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>使用哈希表可以在 O(N) 的时间复杂度和 O(N)  的空间复杂度中解决该问题。</p><p>这个问题在常数的空间复杂度中解决有点困难，但可以借助两个位掩码来实现。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjYwL3R3bzIucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h1 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h1><p>建立一个值到频率的映射关系的哈希表，返回频率为 1 的数字。</p><p><strong>算法：</strong></p><details>    <summary>哈希表Python</summary><figure class="highlight python"><figcaption><span>[solution1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: int)</span> -&gt; List[int]:</span></span><br><span class="line">        hashmap = Counter(nums)</span><br><span class="line">        <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> hashmap <span class="keyword">if</span> hashmap[x] == <span class="number">1</span>]</span><br></pre></td></tr></table></figure></details><details>    <summary>哈希表Java</summary><figure class="highlight java"><figcaption><span>[solution1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; hashmap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">      hashmap.put(n, hashmap.getOrDefault(n, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] output = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; item : hashmap.entrySet())</span><br><span class="line">      <span class="keyword">if</span> (item.getValue() == <span class="number">1</span>) output[idx++] = item.getKey();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(N)。</li><li>空间复杂度：O(N) ，哈希表所使用的空间。</li></ul><h1 id="方法二：两个掩码"><a href="#方法二：两个掩码" class="headerlink" title="方法二：两个掩码"></a>方法二：两个掩码</h1><p>本文将使用两个按位技巧：</p><ul><li>使用异或运算可以帮助我们消除出现两次的数字；我们计算 <code>bitmask ^= x</code>，则 <code>bitmask</code> 留下的就是出现奇数次的位。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjYwL3hvcjMucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><ul><li><code>x &amp; (-x)</code> 是保留位中最右边 <code>1</code> ，且将其余的 <code>1</code> 设位 <code>0</code> 的方法。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjYwL2lzb2xhdGUzLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><strong>算法：</strong></p><p>首先计算 <code>bitmask ^= x</code>，则 <code>bitmask</code> 不会保留出现两次数字的值，因为相同数字的异或值为 <code>0</code>。</p><p>但是 <code>bitmask</code> 会保留只出现一次的两个数字（<code>x</code> 和 <code>y</code>）之间的差异。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjYwL2RpZmZfbmV3LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>我们可以直接从 <code>bitmask</code> 中提取 <code>x</code> 和 <code>y</code> 吗？不能，但是我们可以用 <code>bitmask</code> 作为标记来分离 <code>x</code> 和 <code>y</code>。</p><p>我们通过 <code>bitmask &amp; (-bitmask)</code> 保留 <code>bitmask</code> 最右边的 <code>1</code>，这个 <code>1</code> 要么来自 <code>x</code>，要么来自 <code>y</code>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjYwL2lzb2xhdGUyX25ldy5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>当我们找到了 <code>x</code>，那么 <code>y = bitmask^x</code>。</p><details>    <summary>两个掩码Python</summary><figure class="highlight python"><figcaption><span>[solution2-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># difference between two numbers (x and y) which were seen only once</span></span><br><span class="line">        bitmask = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            bitmask ^= num</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># rightmost 1-bit diff between x and y</span></span><br><span class="line">        diff = bitmask &amp; (-bitmask)</span><br><span class="line">        </span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="comment"># bitmask which will contain only x</span></span><br><span class="line">            <span class="keyword">if</span> num &amp; diff:</span><br><span class="line">                x ^= num</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [x, bitmask^x]</span><br></pre></td></tr></table></figure></details><details>    <summary>两个掩码Java</summary><figure class="highlight java"><figcaption><span>[solution2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">// difference between two numbers (x and y) which were seen only once</span></span><br><span class="line">    <span class="keyword">int</span> bitmask = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) bitmask ^= num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rightmost 1-bit diff between x and y</span></span><br><span class="line">    <span class="keyword">int</span> diff = bitmask &amp; (-bitmask);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// bitmask which will contain only x</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) <span class="keyword">if</span> ((num &amp; diff) != <span class="number">0</span>) x ^= num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x, bitmask^x&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(N) 的时间遍历输入数组。</li><li>空间复杂度：O(1)。</li></ul><h2 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h2><p><strong>这里我一开始有些疑惑，为什么要么来自于x要么来自于y呢，后来才想到如果x和y最右边的1位相同的话那么在bitmask中该位一定是0，bitmask中最右边的1一定是x和y从右边开始第一个不同的位</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>136. 只出现一次的数字</title>
    <link href="http://yoursite.com/2020/09/16/136.%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/09/16/136. 只出现一次的数字/</id>
    <published>2020-09-16T09:12:12.000Z</published>
    <updated>2020-09-16T09:01:09.183Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><a id="more"></a><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><pre><code>输入: [2,2,1]输出: 1</code></pre><p>示例 2:</p><pre><code>输入: [4,1,2,1,2]输出: 4</code></pre><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="47a527e0-e01f-4ece-a158-140764b7c319">136. 只出现一次的数字.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="方法一：位运算"><a href="#方法一：位运算" class="headerlink" title="方法一：位运算"></a>方法一：位运算</h2><p>如果没有时间复杂度和空间复杂度的限制，这道题有很多种解法，可能的解法有如下几种。</p><ul><li><p>使用集合存储数字。遍历数组中的每个数字，如果集合中没有该数字，则将该数字加入集合，如果集合中已经有该数字，则将该数字从集合中删除，最后剩下的数字就是只出现一次的数字。</p></li><li><p>使用哈希表存储每个数字和该数字出现的次数。遍历数组即可得到每个数字出现的次数，并更新哈希表，最后遍历哈希表，得到只出现一次的数字。</p></li><li><p>使用集合存储数组中出现的所有数字，并计算数组中的元素之和。由于集合保证元素无重复，因此计算集合中的所有元素之和的两倍，即为每个元素出现两次的情况下的元素之和。由于数组中只有一个元素出现一次，其余元素都出现两次，因此用集合中的元素之和的两倍减去数组中的元素之和，剩下的数就是数组中只出现一次的数字。</p></li></ul><p>上述三种解法都需要额外使用 <em>O(n)</em> 的空间，其中 <em>n</em> 是数组长度。如果要求使用线性时间复杂度和常数空间复杂度，上述三种解法显然都不满足要求。那么，如何才能做到线性时间复杂度和常数空间复杂度呢？</p><p>答案是使用位运算。对于这道题，可使用异或运算 ^ 。异或运算有以下三个性质。</p><ol><li>任何数和 <em>0</em> 做异或运算，结果仍然是原来的数。</li><li>任何数和其自身做异或运算，结果是 <em>0</em>。</li><li>异或运算满足交换律和结合律.</li></ol><p>假设数组中有 <em>2m+1</em> 个数，其中有 <em>m</em> 个数各出现两次，一个数出现一次。令 <em>a_{1}<em>、</em>a_{2}<em>、…、</em>a_{m}</em> 为出现两次的 <em>m</em> 个数，<em>a_{m+1}</em> 为出现一次的数。</p><p>因此，数组中的全部元素的异或运算结果即为数组中只出现一次的数字。</p><details>    <summary>位运算Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> single = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            single ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>位运算C++</summary><figure class="highlight cpp"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e: nums) ret ^= e;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>位运算Python3</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x ^ y, nums)</span><br></pre></td></tr></table></figure></details><details>    <summary>位运算C#</summary><figure class="highlight csharp"><figcaption><span>[sol1-C#]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SingleNumber</span>(<span class="params"><span class="keyword">int</span>[] nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> e <span class="keyword">in</span> nums) ret ^= e;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>位运算Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    single := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        single ^= num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> single</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(n)*，其中 *n</em> 是数组长度。只需要对数组遍历一次。</p></li><li><p>空间复杂度：<em>O(1)</em>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>137. 只出现一次的数字II</title>
    <link href="http://yoursite.com/2020/09/16/137.%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97II/"/>
    <id>http://yoursite.com/2020/09/16/137. 只出现一次的数字II/</id>
    <published>2020-09-16T09:12:12.000Z</published>
    <updated>2020-09-17T09:53:05.162Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。 </p><a id="more"></a><p> 说明： </p><pre><code>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ </code></pre><p> 示例 1: </p><pre><code>输入: [2,2,3,2]输出: 3</code></pre><p> 示例 2: </p><pre><code>输入: [0,1,0,1,0,1,99]输出: 99 </code></pre><h1 id="解题思路-1："><a href="#解题思路-1：" class="headerlink" title="解题思路^1："></a>解题思路<a href="https://leetcode-cn.com/problems/single-number-ii/solution/single-number-ii-mo-ni-san-jin-zhi-fa-by-jin407891/" target="_blank" rel="noopener">^1</a>：</h1><p>如下图所示，考虑数字的二进制形式，对于出现三次的数字，各 <strong>二进制位</strong> 出现的次数都是 <em>3</em> 的倍数。<br>因此，统计所有数字的各二进制位中 <em>1</em> 的出现次数，并对 <em>3</em> 求余，结果则为只出现一次的数字。</p><p><a href="https://pic.leetcode-cn.com/28f2379be5beccb877c8f1586d8673a256594e0fc45422b03773b8d4c8418825-Picture1.png" target="_blank" rel="noopener">Picture1.png</a></p><h1 id="方法一：有限状态自动机"><a href="#方法一：有限状态自动机" class="headerlink" title="方法一：有限状态自动机"></a>方法一：有限状态自动机</h1><p>各二进制位的 <strong>位运算规则相同</strong> ，因此只需考虑一位即可。如下图所示，对于所有数字中的某二进制位 <em>1</em> 的个数，存在 3 种状态，即对 3 余数为 <em>0, 1, 2</em> 。</p><ul><li>若输入二进制位 <em>1</em> ，则状态按照以下顺序转换；</li><li>若输入二进制位 <em>0</em> ，则状态不变。</li></ul><p>0-&gt;1-&gt;2-&gt;0-&gt;…</p><p><a href="https://pic.leetcode-cn.com/ab00d4d1ad961a3cd4fc1840e34866992571162096000325e7ce10ff75fda770-Picture2.png" target="_blank" rel="noopener">Picture2.png</a></p><p>如下图所示，由于二进制只能表示 <em>0, 1</em> ，因此需要使用两个二进制位来表示 <em>3</em> 个状态。设此两位分别为 <em>two</em> , <em>one</em> ，则状态转换变为：</p><p>00-&gt;01-&gt;10-&gt;00</p><p><a href="https://pic.leetcode-cn.com/0a7ea5bca055b095673620d8bb4c98ef6c610a22f999294ed11ae35d43621e93-Picture3.png" target="_blank" rel="noopener">Picture3.png</a></p><p>接下来，需要通过 <strong>状态转换表</strong> 导出 <strong>状态转换的计算公式</strong> 。首先回忆一下位运算特点，对于任意二进制位 <em>x</em> ，有：</p><ul><li>异或运算：<code>x ^ 0 = x</code>​ ， <code>x ^ 1 = ~x</code></li><li>与运算：<code>x &amp; 0 = 0</code> ， <code>x &amp; 1 = x</code></li></ul><p><strong>计算 <em>one</em> 方法：</strong></p><p>设当前状态为 <em>two</em> <em>one</em> ，此时输入二进制位 <em>n</em> 。如下图所示，通过对状态表的情况拆分，可推出 <em>one</em> 的计算方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> two == <span class="number">0</span>:</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    one = one</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    one = ~one</span><br><span class="line"><span class="keyword">if</span> two == <span class="number">1</span>:</span><br><span class="line">    one = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>引入 <strong>异或运算</strong> ，可将以上拆分简化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> two == <span class="number">0</span>:</span><br><span class="line">    one = one ^ n</span><br><span class="line"><span class="keyword">if</span> two == <span class="number">1</span>:</span><br><span class="line">    one = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>引入 <strong>与运算</strong> ，可继续简化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one = one ^ n &amp; ~two</span><br></pre></td></tr></table></figure><p><a href="https://pic.leetcode-cn.com/f75d89219ad93c69757b187c64784b4c7a57dce7911884fe82f14073d654d32f-Picture4.png" target="_blank" rel="noopener">Picture4.png</a></p><p><strong>计算 <em>two</em> 方法：</strong></p><p>由于是先计算 <em>one</em> ，因此应在新 <em>one</em> 的基础上计算 <em>two</em> 。<br>如下图所示，修改为新 <em>one</em> 后，得到了新的状态图。观察发现，可以使用同样的方法计算 <em>two</em> ，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">two = two ^ n &amp; ~one</span><br></pre></td></tr></table></figure><p><strong>这部分我一开始看时有些疑惑，但仔细看下面这张图会发现其中one都是新的变化后的，可以再把one和two调换位置就发现整个状态变化图是等效的了。</strong></p><p><a href="https://pic.leetcode-cn.com/6ba76dba1ac98ee2bb982e011fdffd1df9a6963f157b2780461dbce453f0ded3-Picture5.png" target="_blank" rel="noopener">Picture5.png</a></p><p><strong>返回值：</strong></p><p>以上是对数字的二进制中 “一位” 的分析，而 <code>int</code> 类型的其他 31 位具有相同的运算规则，因此可将以上公式直接套用在 32 位数上。</p><p>遍历完所有数字后，各二进制位都处于状态 <em>00</em> 和状态 <em>01</em> （取决于 “只出现一次的数字” 的各二进制位是 <em>1</em> 还是 <em>0</em> ），而此两状态是由 <em>one</em> 来记录的（此两状态下 <em>twos</em> 恒为 <em>0</em> ），因此返回 <em>ones</em> 即可。</p><h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><p><strong>时间复杂度 <em>O(N)</em> ：</strong> 其中 <em>N</em> 位数组 <em>nums</em> 的长度；遍历数组占用 <em>O(N)</em> ，每轮中的常数个位运算操作占用 O(32<em>3</em>2)=O(1)。</p></li><li><p><strong>空间复杂度 <em>O(1)</em> ：</strong> 变量 <em>ones</em> , <em>twos</em> 使用常数大小的额外空间。</p><p><a href="https://pic.leetcode-cn.com/045023f05080e0844f05b8ee5b68885e1b9e41926d3e4ab054c68e6dceacfc0a-Picture6.png" target="_blank" rel="noopener">Picture6.png</a> <a href="https://pic.leetcode-cn.com/fd0ab6b3cd20c18729321957f6b4bedbf6480fd6862c01de1c5d598c82a26d2b-Picture7.png" target="_blank" rel="noopener">Picture7.png</a> <a href="https://pic.leetcode-cn.com/46b0974b13206beda512dd037df10772fae1c7375a97a7a05abb4a736dc0ebb3-Picture8.png" target="_blank" rel="noopener">Picture8.png</a> <a href="https://pic.leetcode-cn.com/4cfe4cf13367851efdb9dee5fceed969326cc3478be0769c8f60294ef5d2866d-Picture9.png" target="_blank" rel="noopener">Picture9.png</a> <a href="https://pic.leetcode-cn.com/fa2e7ecb991d5183e2f53ca7741150ae18badb087b01bff4a32caaec245fec79-Picture10.png" target="_blank" rel="noopener">Picture10.png</a> <a href="https://pic.leetcode-cn.com/6a6b8561c913c45d7be3428ff8553a2188890fee0687a1a113a7c2bea12b95a9-Picture11.png" target="_blank" rel="noopener">Picture11.png</a> </p></li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><details>    <summary>有限状态自动机python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        ones, twos = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            ones = ones ^ num &amp; ~twos</span><br><span class="line">            twos = twos ^ num &amp; ~ones</span><br><span class="line">        <span class="keyword">return</span> ones</span><br></pre></td></tr></table></figure></details><details>    <summary>有限状态自动机java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            ones = ones ^ num &amp; ~twos;</span><br><span class="line">            twos = twos ^ num &amp; ~ones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ones;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="方法二：遍历统计"><a href="#方法二：遍历统计" class="headerlink" title="方法二：遍历统计"></a>方法二：遍历统计</h1><blockquote><p>此方法相对容易理解，但效率较低，总体推荐方法一。</p></blockquote><p>使用 <strong>与运算</strong> ，可获取二进制数字 <em>num</em> 的最右一位 <em>n_1</em> ：</p><p>n_1=num &amp; i</p><p>配合 <strong>无符号右移操作</strong> ，可获取 <em>num</em> 所有位的值（即 <em>n_1</em> ~ <em>n_{32}</em> ）：</p><p>num = num &gt;&gt;&gt; 1</p><p>建立一个长度为 32 的数组 <em>counts</em> ，通过以上方法可记录所有数字的各二进制位的 <em>1</em> 的出现次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">        counts[j] += nums[i] &amp; <span class="number">1</span>; <span class="comment">// 更新第 j 位</span></span><br><span class="line">        nums[i] &gt;&gt;&gt;= <span class="number">1</span>; <span class="comment">// 第 j 位 --&gt; 第 j + 1 位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <em>counts</em> 各元素对 <em>3</em> 求余，则结果为 “只出现一次的数字” 的各二进制位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    counts[i] %= <span class="number">3</span>; <span class="comment">// 得到 只出现一次的数字 的第 (31 - i) 位 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 <strong>左移操作</strong> 和 <strong>或运算</strong> ，可将 <em>counts</em> 数组中各二进位的值恢复到数字 <em>res</em> 上（循环区间是 <img src="./p__i_in__0,_31__.png" alt="i\in\[0,31\] ">  ）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; counts.length; i++) &#123;</span><br><span class="line">    res &lt;&lt;= <span class="number">1</span>; <span class="comment">// 左移 1 位</span></span><br><span class="line">    res |= counts[<span class="number">31</span> - i]; <span class="comment">// 恢复第 i 位的值到 res</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终返回 <em>res</em> 即可。</p><blockquote><p>由于 Python 的存储负数的特殊性，需要先将 <em>0</em> - <em>32</em> 位取反（即 <code>res ^ 0xffffffff</code> ），再将所有位取反（即 <code>~</code> ）。<br>两个组合操作实质上是将数字 <em>32</em> 以上位取反， <em>0</em> - <em>32</em> 位不变。</p></blockquote><h2 id="复杂度分析：-1"><a href="#复杂度分析：-1" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><strong>时间复杂度 <em>O(N)</em> ：</strong> 其中 <em>N</em> 位数组 <em>nums</em> 的长度；遍历数组占用 <em>O(N)</em> ，每轮中的常数个位运算操作占用 <em>O(1)</em> 。</li><li><strong>空间复杂度 <em>O(1)</em> ：</strong> 数组 <em>counts</em> 长度恒为 <em>32</em> ，占用常数大小的额外空间。</li></ul><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><p>实际上，只需要修改求余数值 <em>m</em> ，即可实现解决 <strong>除了一个数字以外，其余数字都出现 <em>m</em> 次</strong> 的通用问题。</p><details>    <summary>遍历统计python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        counts = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">                counts[j] += num &amp; <span class="number">1</span></span><br><span class="line">                num &gt;&gt;= <span class="number">1</span></span><br><span class="line">        res, m = <span class="number">0</span>, <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            res &lt;&lt;= <span class="number">1</span></span><br><span class="line">            res |= counts[<span class="number">31</span> - i] % m</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> counts[<span class="number">31</span>] % m == <span class="number">0</span> <span class="keyword">else</span> ~(res ^ <span class="number">0xffffffff</span>)</span><br></pre></td></tr></table></figure></details><details>    <summary>遍历统计java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">                counts[j] += num &amp; <span class="number">1</span>;</span><br><span class="line">                num &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, m = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            res |= counts[<span class="number">31</span> - i] % m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。 &lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>210. 课程表II</title>
    <link href="http://yoursite.com/2020/09/15/210.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8II/"/>
    <id>http://yoursite.com/2020/09/15/210. 课程表II/</id>
    <published>2020-09-15T03:12:12.000Z</published>
    <updated>2020-09-16T08:37:41.944Z</updated>
    
    <content type="html"><![CDATA[<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p><a id="more"></a><p>现在你总共有 n 门课需要选，记为 0 到 n-1。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p><p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p><p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p><p>示例 1:</p><pre><code>输入: 2, [[1,0]] 输出: [0,1]解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</code></pre><p>示例 2:</p><pre><code>输入: 4, [[1,0],[2,0],[3,1],[3,2]]输出: [0,1,2,3] or [0,2,1,3]解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</code></pre><p>说明:</p><ul><li>输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。</li><li>你可以假定输入的先决条件中没有重复的边。</li></ul><p>提示:</p><ul><li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li><li>通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li><li>拓扑排序也可以通过 BFS 完成。</li></ul><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="def715df-7ba6-462e-b957-ebaf4120b1ce">210. 课程表 II的.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本题是一道经典的「拓扑排序」问题。</p><p>给定一个包含 <em>n</em> 个节点的有向图 <em>G</em>，我们给出它的节点编号的一种排列，如果满足：</p><blockquote><p>对于图 <em>G</em> 中的任意一条有向边 <em>(u, v)<em>，</em>u</em> 在排列中都出现在 <em>v</em> 的前面。</p></blockquote><p>那么称该排列是图 <em>G</em> 的「拓扑排序」。根据上述的定义，我们可以得出两个结论：</p><ul><li>如果图 <em>G</em> 中存在环（即图 <em>G</em> 不是「有向无环图」），那么图 <em>G</em> 不存在拓扑排序。这是因为假设图中存在环 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_1,x_2,...,x_n,x_1</span><br></pre></td></tr></table></figure><p>，那么 <em>x_1</em> 在排列中必须出现在 <em>x_n</em> 的前面，但 <em>x_n</em> 同时也必须出现在 <em>x_1</em> 的前面，因此不存在一个满足要求的排列，也就不存在拓扑排序；</p><ul><li>如果图 <em>G</em> 是有向无环图，那么它的拓扑排序可能不止一种。举一个最极端的例子，如果图 <em>G</em> 值包含 <em>n</em> 个节点却没有任何边，那么任意一种编号的排列都可以作为拓扑排序。</li></ul><p>有了上述的简单分析，我们就可以将本题建模成一个求拓扑排序的问题了：</p><ul><li><p>我们将每一门课看成一个节点；</p></li><li><p>如果想要学习课程 <em>A</em> 之前必须完成课程 <em>B</em>，那么我们从 <em>B</em> 到 <em>A</em> 连接一条有向边。这样以来，在拓扑排序中，<em>B</em> 一定出现在 <em>A</em> 的前面。</p></li></ul><p>求出该图的拓扑排序，就可以得到一种符合要求的课程学习顺序。下面介绍两种求解拓扑排序的方法。</p><h2 id="方法一：深度优先搜索"><a href="#方法一：深度优先搜索" class="headerlink" title="方法一：深度优先搜索"></a>方法一：深度优先搜索</h2><p><strong>思路</strong></p><p>我们可以将深度优先搜索的流程与拓扑排序的求解联系起来，用一个栈来存储所有<strong>已经搜索完成的节点</strong>。</p><blockquote><p>对于一个节点 <em>u</em>，如果它的所有相邻节点都已经搜索完成，那么在搜索回溯到 <em>u</em> 的时候，<em>u</em> 本身也会变成一个已经搜索完成的节点。这里的「相邻节点」指的是从 <em>u</em> 出发通过一条有向边可以到达的所有节点。</p></blockquote><p>假设我们当前搜索到了节点 <em>u</em>，如果它的所有相邻节点都已经搜索完成，那么这些节点都已经在栈中了，此时我们就可以把 <em>u</em> 入栈。可以发现，如果我们从栈顶往栈底的顺序看，由于 <em>u</em> 处于栈顶的位置，那么 <em>u</em> 出现在所有 <em>u</em> 的相邻节点的前面。因此对于 <em>u</em> 这个节点而言，它是满足拓扑排序的要求的。</p><p>这样以来，我们对图进行一遍深度优先搜索。当每个节点进行回溯的时候，我们把该节点放入栈中。最终从栈顶到栈底的序列就是一种拓扑排序。</p><p><strong>算法</strong></p><p>对于图中的任意一个节点，它在搜索的过程中有三种状态，即：</p><ul><li><p>「未搜索」：我们还没有搜索到这个节点；</p></li><li><p>「搜索中」：我们搜索过这个节点，但还没有回溯到该节点，即该节点还没有入栈，还有相邻的节点没有搜索完成）；</p></li><li><p>「已完成」：我们搜索过并且回溯过这个节点，即该节点已经入栈，并且所有该节点的相邻节点都出现在栈的更底部的位置，满足拓扑排序的要求。</p></li></ul><p>通过上述的三种状态，我们就可以给出使用深度优先搜索得到拓扑排序的算法流程，在每一轮的搜索搜索开始时，我们任取一个「未搜索」的节点开始进行深度优先搜索。</p><ul><li><p>我们将当前搜索的节点 <em>u</em> 标记为「搜索中」，遍历该节点的每一个相邻节点 <em>v</em>：</p><ul><li><p>如果 <em>v</em> 为「未搜索」，那么我们开始搜索 <em>v</em>，待搜索完成回溯到 <em>u</em>；</p></li><li><p>如果 <em>v</em> 为「搜索中」，那么我们就找到了图中的一个环，因此是不存在拓扑排序的；</p></li><li><p>如果 <em>v</em> 为「已完成」，那么说明 <em>v</em> 已经在栈中了，而 <em>u</em> 还不在栈中，因此 <em>u</em> 无论何时入栈都不会影响到 <em>(u, v)</em> 之前的拓扑关系，以及不用进行任何操作。</p></li></ul></li><li><p>当 <em>u</em> 的所有相邻节点都为「已完成」时，我们将 <em>u</em> 放入栈中，并将其标记为「已完成」。</p></li></ul><p>在整个深度优先搜索的过程结束后，如果我们没有找到图中的环，那么栈中存储这所有的 <em>n</em> 个节点，从栈顶到栈底的顺序即为一种拓扑排序。</p><p>下面的幻灯片给出了深度优先搜索的可视化流程。图中的「白色」「黄色」「绿色」节点分别表示「未搜索」「搜索中」「已完成」的状态。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/207/1.png" target="_blank" rel="noopener">DFS1</a> <a href="https://assets.leetcode-cn.com/solution-static/207/2.png" target="_blank" rel="noopener">DFS2</a> <a href="https://assets.leetcode-cn.com/solution-static/207/3.png" target="_blank" rel="noopener">DFS3</a> <a href="https://assets.leetcode-cn.com/solution-static/207/4.png" target="_blank" rel="noopener">DFS4</a> <a href="https://assets.leetcode-cn.com/solution-static/207/5.png" target="_blank" rel="noopener">DFS5</a> <a href="https://assets.leetcode-cn.com/solution-static/207/6.png" target="_blank" rel="noopener">DFS6</a> <a href="https://assets.leetcode-cn.com/solution-static/207/7.png" target="_blank" rel="noopener">DFS7</a> <a href="https://assets.leetcode-cn.com/solution-static/207/8.png" target="_blank" rel="noopener">DFS8</a> <a href="https://assets.leetcode-cn.com/solution-static/207/9.png" target="_blank" rel="noopener">DFS9</a> <a href="https://assets.leetcode-cn.com/solution-static/207/10.png" target="_blank" rel="noopener">DFS10</a> <a href="https://assets.leetcode-cn.com/solution-static/207/11.png" target="_blank" rel="noopener">DFS11</a> <a href="https://assets.leetcode-cn.com/solution-static/207/12.png" target="_blank" rel="noopener">DFS12</a> <a href="https://assets.leetcode-cn.com/solution-static/207/13.png" target="_blank" rel="noopener">DFS13</a> <a href="https://assets.leetcode-cn.com/solution-static/207/14.png" target="_blank" rel="noopener">DFS14</a> <a href="https://assets.leetcode-cn.com/solution-static/207/15.png" target="_blank" rel="noopener">DFS15</a> <a href="https://assets.leetcode-cn.com/solution-static/207/16.png" target="_blank" rel="noopener">DFS16</a> <a href="https://assets.leetcode-cn.com/solution-static/207/17.png" target="_blank" rel="noopener">DFS17</a> <a href="https://assets.leetcode-cn.com/solution-static/207/18.png" target="_blank" rel="noopener">DFS18</a> <a href="https://assets.leetcode-cn.com/solution-static/207/19.png" target="_blank" rel="noopener">DFS19</a> <a href="https://assets.leetcode-cn.com/solution-static/207/20.png" target="_blank" rel="noopener">DFS20</a> </p><details>    <summary>深度优先搜索C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 存储有向图</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">    <span class="comment">// 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">    <span class="comment">// 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="comment">// 判断有向图中是否有环</span></span><br><span class="line">    <span class="keyword">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将节点标记为「搜索中」</span></span><br><span class="line">        visited[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 搜索其相邻节点</span></span><br><span class="line">        <span class="comment">// 只要发现有环，立刻停止搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">            <span class="comment">// 如果「未搜索」那么搜索相邻节点</span></span><br><span class="line">            <span class="keyword">if</span> (visited[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果「搜索中」说明找到了环</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (visited[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将节点标记为「已完成」</span></span><br><span class="line">        visited[u] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 将节点入栈</span></span><br><span class="line">        result.push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findOrder(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites) &#123;</span><br><span class="line">        edges.resize(numCourses);</span><br><span class="line">        visited.resize(numCourses);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; info: prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].push_back(info[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有环，那么就有拓扑排序</span></span><br><span class="line">        <span class="comment">// 注意下标 0 为栈底，因此需要将数组反序输出</span></span><br><span class="line">        reverse(result.begin(), result.end());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存储有向图</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; edges;</span><br><span class="line">    <span class="comment">// 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span></span><br><span class="line">    <span class="keyword">int</span>[] visited;</span><br><span class="line">    <span class="comment">// 用数组来模拟栈，下标 n-1 为栈底，0 为栈顶</span></span><br><span class="line">    <span class="keyword">int</span>[] result;</span><br><span class="line">    <span class="comment">// 判断有向图中是否有环</span></span><br><span class="line">    <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 栈下标</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        edges = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            edges.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        index = numCourses - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] info : prerequisites) &#123;</span><br><span class="line">            edges.get(info[<span class="number">1</span>]).add(info[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有环，那么就有拓扑排序</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将节点标记为「搜索中」</span></span><br><span class="line">        visited[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 搜索其相邻节点</span></span><br><span class="line">        <span class="comment">// 只要发现有环，立刻停止搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: edges.get(u)) &#123;</span><br><span class="line">            <span class="comment">// 如果「未搜索」那么搜索相邻节点</span></span><br><span class="line">            <span class="keyword">if</span> (visited[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果「搜索中」说明找到了环</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (visited[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                valid = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将节点标记为「已完成」</span></span><br><span class="line">        visited[u] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 将节点入栈</span></span><br><span class="line">        result[index--] = u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 存储有向图</span></span><br><span class="line">        edges = collections.defaultdict(list)</span><br><span class="line">        <span class="comment"># 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span></span><br><span class="line">        visited = [<span class="number">0</span>] * numCourses</span><br><span class="line">        <span class="comment"># 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶</span></span><br><span class="line">        result = list()</span><br><span class="line">        <span class="comment"># 判断有向图中是否有环</span></span><br><span class="line">        valid = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> prerequisites:</span><br><span class="line">            edges[info[<span class="number">1</span>]].append(info[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u: int)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> valid</span><br><span class="line">            <span class="comment"># 将节点标记为「搜索中」</span></span><br><span class="line">            visited[u] = <span class="number">1</span></span><br><span class="line">            <span class="comment"># 搜索其相邻节点</span></span><br><span class="line">            <span class="comment"># 只要发现有环，立刻停止搜索</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">                <span class="comment"># 如果「未搜索」那么搜索相邻节点</span></span><br><span class="line">                <span class="keyword">if</span> visited[v] == <span class="number">0</span>:</span><br><span class="line">                    dfs(v)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                <span class="comment"># 如果「搜索中」说明找到了环</span></span><br><span class="line">                <span class="keyword">elif</span> visited[v] == <span class="number">1</span>:</span><br><span class="line">                    valid = <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 将节点标记为「已完成」</span></span><br><span class="line">            visited[u] = <span class="number">2</span></span><br><span class="line">            <span class="comment"># 将节点入栈</span></span><br><span class="line">            result.append(u)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            <span class="keyword">if</span> valid <span class="keyword">and</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">                dfs(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">            <span class="keyword">return</span> list()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果没有环，那么就有拓扑排序</span></span><br><span class="line">        <span class="comment"># 注意下标 0 为栈底，因此需要将数组反序输出</span></span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findOrder</span><span class="params">(numCourses <span class="keyword">int</span>, prerequisites [][]<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        edges = <span class="built_in">make</span>([][]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        visited = <span class="built_in">make</span>([]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        result []<span class="keyword">int</span></span><br><span class="line">        valid <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line">        dfs <span class="function"><span class="keyword">func</span><span class="params">(u <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">dfs</span> = <span class="title">func</span><span class="params">(u <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        visited[u] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> edges[u] &#123;</span><br><span class="line">            <span class="keyword">if</span> visited[v] == <span class="number">0</span> &#123;</span><br><span class="line">                dfs(v)</span><br><span class="line">                <span class="keyword">if</span> !valid &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> visited[v] == <span class="number">1</span> &#123;</span><br><span class="line">                valid = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[u] = <span class="number">2</span></span><br><span class="line">        result = <span class="built_in">append</span>(result, u)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, info := <span class="keyword">range</span> prerequisites &#123;</span><br><span class="line">        edges[info[<span class="number">1</span>]] = <span class="built_in">append</span>(edges[info[<span class="number">1</span>]], info[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> visited[i] == <span class="number">0</span> &#123;</span><br><span class="line">            dfs(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !valid &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(result)/<span class="number">2</span>; i ++ &#123;</span><br><span class="line">        result[i], result[numCourses-i<span class="number">-1</span>] = result[numCourses-i<span class="number">-1</span>], result[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>** edges;</span><br><span class="line"><span class="keyword">int</span>* edgeColSize;</span><br><span class="line"><span class="keyword">int</span>* visited;</span><br><span class="line"><span class="keyword">int</span>* result;</span><br><span class="line"><span class="keyword">int</span> resultSize;</span><br><span class="line"><span class="keyword">bool</span> valid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    visited[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edgeColSize[u]; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[edges[u][i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            dfs(edges[u][i]);</span><br><span class="line">            <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (visited[edges[u][i]] == <span class="number">1</span>) &#123;</span><br><span class="line">            valid = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[u] = <span class="number">2</span>;</span><br><span class="line">    result[resultSize++] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">findOrder</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>** prerequisites, <span class="keyword">int</span> prerequisitesSize, <span class="keyword">int</span>* prerequisitesColSize, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</span><br><span class="line">    valid = <span class="literal">true</span>;</span><br><span class="line">    edges = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        edges[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    edgeColSize = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="built_in">memset</span>(edgeColSize, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    visited = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisitesSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = prerequisites[i][<span class="number">1</span>], b = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">        edgeColSize[a]++;</span><br><span class="line">        edges[a] = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(edges[a], <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * edgeColSize[a]);</span><br><span class="line">        edges[a][edgeColSize[a] - <span class="number">1</span>] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    result = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(edges[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(edges);</span><br><span class="line">    <span class="built_in">free</span>(edgeColSize);</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">        *returnSize = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        *returnSize = numCourses;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = result[i];</span><br><span class="line">        result[i] = result[numCourses - i - <span class="number">1</span>], result[numCourses - i - <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度: <em>O(n+m)*，其中 *n</em> 为课程数，<em>m</em> 为先修课程的要求数。这其实就是对图进行深度优先搜索的时间复杂度。</p></li><li><p>空间复杂度: <em>O(n+m)<em>。题目中是以列表形式给出的先修课程关系，为了对图进行深度优先搜索，我们需要存储成邻接表的形式，空间复杂度为 *O(n+m)</em>。在深度优先搜索的过程中，我们需要最多 *O(n)</em> 的栈空间（递归）进行深度优先搜索，并且还需要若干个 <em>O(n)</em> 的空间存储节点状态、最终答案等。</p></li></ul><h2 id="方法二：广度优先搜索"><a href="#方法二：广度优先搜索" class="headerlink" title="方法二：广度优先搜索"></a>方法二：广度优先搜索</h2><p><strong>思路</strong></p><p>方法一的深度优先搜索是一种「逆向思维」：最先被放入栈中的节点是在拓扑排序中最后面的节点。我们也可以使用正向思维，顺序地生成拓扑排序，这种方法也更加直观。</p><p>我们考虑拓扑排序中最前面的节点，该节点一定不会有任何入边，也就是它没有任何的先修课程要求。当我们将一个节点加入答案中后，我们就可以移除它的所有出边，代表着它的相邻节点<strong>少了一门先修课程的要求</strong>。如果某个相邻节点变成了「没有任何入边的节点」，那么就代表着这门课可以开始学习了。按照这样的流程，我们不断地将没有入边的节点加入答案，直到答案中包含所有的节点（得到了一种拓扑排序）或者不存在没有入边的节点（图中包含环）。</p><p>上面的想法类似于广度优先搜索，因此我们可以将广度优先搜索的流程与拓扑排序的求解联系起来。</p><p><strong>算法</strong></p><p>我们使用一个队列来进行广度优先搜索。开始时，所有入度为 <em>0</em> 的节点都被放入队列中，它们就是可以作为拓扑排序最前面的节点，并且它们之间的相对顺序是无关紧要的。</p><p>在广度优先搜索的每一步中，我们取出队首的节点 <em>u</em>：</p><ul><li><p>我们将 <em>u</em> 放入答案中；</p></li><li><p>我们移除 <em>u</em> 的所有出边，也就是将 <em>u</em> 的所有相邻节点的入度减少 <em>1</em>。如果某个相邻节点 <em>v</em> 的入度变为 <em>0</em>，那么我们就将 <em>v</em> 放入队列中。</p></li></ul><p>在广度优先搜索的过程结束后。如果答案中包含了这 <em>n</em> 个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了。</p><p>下面的幻灯片给出了广度优先搜索的可视化流程。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/207/fig1.png" target="_blank" rel="noopener">BFS1</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig2.png" target="_blank" rel="noopener">BFS2</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig3.png" target="_blank" rel="noopener">BFS3</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig4.png" target="_blank" rel="noopener">BFS4</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig5.png" target="_blank" rel="noopener">BFS5</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig6.png" target="_blank" rel="noopener">BFS6</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig7.png" target="_blank" rel="noopener">BFS7</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig8.png" target="_blank" rel="noopener">BFS8</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig9.png" target="_blank" rel="noopener">BFS9</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig10.png" target="_blank" rel="noopener">BFS10</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig11.png" target="_blank" rel="noopener">BFS11</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig12.png" target="_blank" rel="noopener">BFS12</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig13.png" target="_blank" rel="noopener">BFS13</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig14.png" target="_blank" rel="noopener">BFS14</a> </p><details>    <summary>广度优先搜索C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 存储有向图</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">    <span class="comment">// 存储每个节点的入度</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indeg;</span><br><span class="line">    <span class="comment">// 存储答案</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findOrder(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites) &#123;</span><br><span class="line">        edges.resize(numCourses);</span><br><span class="line">        indeg.resize(numCourses);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; info: prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].push_back(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="comment">// 将所有入度为 0 的节点放入队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="comment">// 从队首取出一个节点</span></span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="comment">// 放入答案中</span></span><br><span class="line">            result.push_back(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">                --indeg[v];</span><br><span class="line">                <span class="comment">// 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了</span></span><br><span class="line">                <span class="keyword">if</span> (indeg[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.size() != numCourses) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存储有向图</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; edges;</span><br><span class="line">    <span class="comment">// 存储每个节点的入度</span></span><br><span class="line">    <span class="keyword">int</span>[] indeg;</span><br><span class="line">    <span class="comment">// 存储答案</span></span><br><span class="line">    <span class="keyword">int</span>[] result;</span><br><span class="line">    <span class="comment">// 答案下标</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        edges = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            edges.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        indeg = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] info : prerequisites) &#123;</span><br><span class="line">            edges.get(info[<span class="number">1</span>]).add(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">// 将所有入度为 0 的节点放入队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.offer(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 从队首取出一个节点</span></span><br><span class="line">            <span class="keyword">int</span> u = queue.poll();</span><br><span class="line">            <span class="comment">// 放入答案中</span></span><br><span class="line">            result[index++] = u;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v: edges.get(u)) &#123;</span><br><span class="line">                --indeg[v];</span><br><span class="line">                <span class="comment">// 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了</span></span><br><span class="line">                <span class="keyword">if</span> (indeg[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.offer(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index != numCourses) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Python3</summary><figure class="highlight python"><figcaption><span>[sol2-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 存储有向图</span></span><br><span class="line">        edges = collections.defaultdict(list)</span><br><span class="line">        <span class="comment"># 存储每个节点的入度</span></span><br><span class="line">        indeg = [<span class="number">0</span>] * numCourses</span><br><span class="line">        <span class="comment"># 存储答案</span></span><br><span class="line">        result = list()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> prerequisites:</span><br><span class="line">            edges[info[<span class="number">1</span>]].append(info[<span class="number">0</span>])</span><br><span class="line">            indeg[info[<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将所有入度为 0 的节点放入队列中</span></span><br><span class="line">        q = collections.deque([u <span class="keyword">for</span> u <span class="keyword">in</span> range(numCourses) <span class="keyword">if</span> indeg[u] == <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            <span class="comment"># 从队首取出一个节点</span></span><br><span class="line">            u = q.popleft()</span><br><span class="line">            <span class="comment"># 放入答案中</span></span><br><span class="line">            result.append(u)</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">                indeg[v] -= <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了</span></span><br><span class="line">                <span class="keyword">if</span> indeg[v] == <span class="number">0</span>:</span><br><span class="line">                    q.append(v)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(result) != numCourses:</span><br><span class="line">            result = list()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Golang</summary><figure class="highlight golang"><figcaption><span>[sol2-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findOrder</span><span class="params">(numCourses <span class="keyword">int</span>, prerequisites [][]<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        edges = <span class="built_in">make</span>([][]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        indeg = <span class="built_in">make</span>([]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        result []<span class="keyword">int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, info := <span class="keyword">range</span> prerequisites &#123;</span><br><span class="line">        edges[info[<span class="number">1</span>]] = <span class="built_in">append</span>(edges[info[<span class="number">1</span>]], info[<span class="number">0</span>])</span><br><span class="line">        indeg[info[<span class="number">0</span>]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> indeg[i] == <span class="number">0</span> &#123;</span><br><span class="line">            q = <span class="built_in">append</span>(q, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(q) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        u := q[<span class="number">0</span>]</span><br><span class="line">        q = q[<span class="number">1</span>:]</span><br><span class="line">        result = <span class="built_in">append</span>(result, u)</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> edges[u] &#123;</span><br><span class="line">            indeg[v]--</span><br><span class="line">            <span class="keyword">if</span> indeg[v] == <span class="number">0</span> &#123;</span><br><span class="line">                q = <span class="built_in">append</span>(q, v)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result) != numCourses &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索C</summary><figure class="highlight c"><figcaption><span>[sol2-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">findOrder</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>** prerequisites, <span class="keyword">int</span> prerequisitesSize, <span class="keyword">int</span>* prerequisitesColSize, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>** edges = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        edges[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> edgeColSize[numCourses];</span><br><span class="line">    <span class="built_in">memset</span>(edgeColSize, <span class="number">0</span>, <span class="keyword">sizeof</span>(edgeColSize));</span><br><span class="line">    <span class="keyword">int</span> indeg[numCourses];</span><br><span class="line">    <span class="built_in">memset</span>(indeg, <span class="number">0</span>, <span class="keyword">sizeof</span>(indeg));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisitesSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = prerequisites[i][<span class="number">1</span>], b = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">        edgeColSize[a]++;</span><br><span class="line">        edges[a] = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(edges[a], <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * edgeColSize[a]);</span><br><span class="line">        edges[a][edgeColSize[a] - <span class="number">1</span>] = b;</span><br><span class="line">        ++indeg[b];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q[numCourses];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q[++r] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* result = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> visited = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        ++visited;</span><br><span class="line">        <span class="keyword">int</span> u = q[l++];</span><br><span class="line">        result[resultSize++] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edgeColSize[u]; ++i) &#123;</span><br><span class="line">            --indeg[edges[u][i]];</span><br><span class="line">            <span class="keyword">if</span> (indeg[edges[u][i]] == <span class="number">0</span>) &#123;</span><br><span class="line">                q[++r] = edges[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(edges[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(edges);</span><br><span class="line">    <span class="keyword">if</span> (visited == numCourses) &#123;</span><br><span class="line">        *returnSize = numCourses;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *returnSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度: <em>O(n+m)*，其中 *n</em> 为课程数，<em>m</em> 为先修课程的要求数。这其实就是对图进行广度优先搜索的时间复杂度。</p></li><li><p>空间复杂度: <em>O(n+m)<em>。题目中是以列表形式给出的先修课程关系，为了对图进行广度优先搜索，我们需要存储成邻接表的形式，空间复杂度为 *O(n+m)</em>。在广度优先搜索的过程中，我们需要最多 *O(n)</em> 的队列空间（迭代）进行广度优先搜索，并且还需要若干个 <em>O(n)</em> 的空间存储节点入度、最终答案等。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Breadth-first Search" scheme="http://yoursite.com/tags/Breadth-first-Search/"/>
    
      <category term="Depth-first Search" scheme="http://yoursite.com/tags/Depth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Graph" scheme="http://yoursite.com/tags/Graph/"/>
    
      <category term="Topological sort" scheme="http://yoursite.com/tags/Topological-sort/"/>
    
  </entry>
  
  <entry>
    <title>207. 课程表</title>
    <link href="http://yoursite.com/2020/09/14/207.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/09/14/207. 课程表/</id>
    <published>2020-09-14T08:45:12.000Z</published>
    <updated>2020-09-15T03:11:08.819Z</updated>
    
    <content type="html"><![CDATA[<p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><a id="more"></a><p>你这个学期必须选修 numCourse 门课程，记为0到numCourse-1 。</p><p>在选修某些课程之前需要一些先修课程。例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]</p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><p>示例 1:</p><pre><code>输入: 2, [[1,0]] 输出: true解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</code></pre><p>示例 2:</p><pre><code>输入: 2, [[1,0],[0,1]]输出: false解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</code></pre><p>提示：</p><pre><code>输入的先决条件是由 边缘列表 表示的图形，而不是 邻接矩阵 。详情请参见图的表示法。你可以假定输入的先决条件中没有重复的边。1 &lt;= numCourses &lt;= 10^5</code></pre><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="29da2f01-af1a-45a6-bb69-aea71f42900f">207.课程表 2.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本题和 <a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener">210. 课程表 II</a> 是几乎一样的题目。如果在过去完成过该题，那么只要将代码中的返回值从「非空数组 / 空数组」修改成[True/False]就可以通过本题。</p></blockquote><p>本题是一道经典的「拓扑排序」问题。</p><p>给定一个包含 <em>n</em> 个节点的有向图 <em>G</em>，我们给出它的节点编号的一种排列，如果满足：</p><blockquote><p>对于图 <em>G</em> 中的任意一条有向边 <em>(u, v)<em>，</em>u</em> 在排列中都出现在 <em>v</em> 的前面。</p></blockquote><p>那么称该排列是图 <em>G</em> 的「拓扑排序」。根据上述的定义，我们可以得出两个结论：</p><ul><li>如果图 <em>G</em> 中存在环（即图 <em>G</em> 不是「有向无环图」），那么图 <em>G</em> 不存在拓扑排序。这是因为假设图中存在环 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_1,x_2,...,x_n,x_1</span><br></pre></td></tr></table></figure><p>，那么 <em>x_1</em> 在排列中必须出现在 <em>x_n</em> 的前面，但 <em>x_n</em> 同时也必须出现在 <em>x_1</em> 的前面，因此不存在一个满足要求的排列，也就不存在拓扑排序；</p><ul><li>如果图 <em>G</em> 是有向无环图，那么它的拓扑排序可能不止一种。举一个最极端的例子，如果图 <em>G</em> 值包含 <em>n</em> 个节点却没有任何边，那么任意一种编号的排列都可以作为拓扑排序。</li></ul><p>有了上述的简单分析，我们就可以将本题建模成一个求拓扑排序的问题了：</p><ul><li><p>我们将每一门课看成一个节点；</p></li><li><p>如果想要学习课程 <em>A</em> 之前必须完成课程 <em>B</em>，那么我们从 <em>B</em> 到 <em>A</em> 连接一条有向边。这样以来，在拓扑排序中，<em>B</em> 一定出现在 <em>A</em> 的前面。</p></li></ul><p>求出该图是否存在拓扑排序，就可以判断是否有一种符合要求的课程学习顺序。事实上，<strong>由于求出一种拓扑排序方法的最优时间复杂度为 <em>O(n+m)*，其中 *n</em> 和 <em>m</em> 分别是有向图 <em>G</em> 的节点数和边数，方法见 <a href="https://leetcode-cn.com/problems/course-schedule-ii/solution/ke-cheng-biao-ii-by-leetcode-solution/" target="_blank" rel="noopener">210. 课程表 II 的官方题解</a>。而判断图 <em>G</em> 是否存在拓扑排序，至少也要对其进行一次完整的遍历，时间复杂度也为 <em>O(n+m)*。因此不可能存在一种仅判断图是否存在拓扑排序的方法，它的时间复杂度在渐进意义上严格优于 *O(n+m)</em></strong>。这样一来，我们使用和 <a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener">210. 课程表 II</a> 完全相同的方法，但无需使用数据结构记录实际的拓扑排序。为了叙述的完整性，下面的两种方法与 <a href="https://leetcode-cn.com/problems/course-schedule-ii/solution/ke-cheng-biao-ii-by-leetcode-solution/" target="_blank" rel="noopener">210. 课程表 II 的官方题解</a> 完全相同，但在「算法」部分后的「优化」部分说明了如何省去对应的数据结构。</p><h2 id="方法一：深度优先搜索"><a href="#方法一：深度优先搜索" class="headerlink" title="方法一：深度优先搜索"></a>方法一：深度优先搜索</h2><p><strong>思路</strong></p><p>我们可以将深度优先搜索的流程与拓扑排序的求解联系起来，用一个栈来存储所有<strong>已经搜索完成的节点</strong>。</p><blockquote><p>对于一个节点 <em>u</em>，如果它的所有相邻节点都已经搜索完成，那么在搜索回溯到 <em>u</em> 的时候，<em>u</em> 本身也会变成一个已经搜索完成的节点。这里的「相邻节点」指的是从 <em>u</em> 出发通过一条有向边可以到达的所有节点。</p></blockquote><p>假设我们当前搜索到了节点 <em>u</em>，如果它的所有相邻节点都已经搜索完成，那么这些节点都已经在栈中了，此时我们就可以把 <em>u</em> 入栈。可以发现，如果我们从栈顶往栈底的顺序看，由于 <em>u</em> 处于栈顶的位置，那么 <em>u</em> 出现在所有 <em>u</em> 的相邻节点的前面。因此对于 <em>u</em> 这个节点而言，它是满足拓扑排序的要求的。</p><p>这样以来，我们对图进行一遍深度优先搜索。当每个节点进行回溯的时候，我们把该节点放入栈中。最终从栈顶到栈底的序列就是一种拓扑排序。</p><p><strong>算法</strong></p><p>对于图中的任意一个节点，它在搜索的过程中有三种状态，即：</p><ul><li><p>「未搜索」：我们还没有搜索到这个节点；</p></li><li><p>「搜索中」：我们搜索过这个节点，但还没有回溯到该节点，即该节点还没有入栈，还有相邻的节点没有搜索完成）；</p></li><li><p>「已完成」：我们搜索过并且回溯过这个节点，即该节点已经入栈，并且所有该节点的相邻节点都出现在栈的更底部的位置，满足拓扑排序的要求。</p></li></ul><p>通过上述的三种状态，我们就可以给出使用深度优先搜索得到拓扑排序的算法流程，在每一轮的搜索搜索开始时，我们任取一个「未搜索」的节点开始进行深度优先搜索。</p><ul><li><p>我们将当前搜索的节点 <em>u</em> 标记为「搜索中」，遍历该节点的每一个相邻节点 <em>v</em>：</p><ul><li><p>如果 <em>v</em> 为「未搜索」，那么我们开始搜索 <em>v</em>，待搜索完成回溯到 <em>u</em>；</p></li><li><p>如果 <em>v</em> 为「搜索中」，那么我们就找到了图中的一个环，因此是不存在拓扑排序的；</p></li><li><p>如果 <em>v</em> 为「已完成」，那么说明 <em>v</em> 已经在栈中了，而 <em>u</em> 还不在栈中，因此 <em>u</em> 无论何时入栈都不会影响到 <em>(u, v)</em> 之前的拓扑关系，以及不用进行任何操作。</p></li></ul></li><li><p>当 <em>u</em> 的所有相邻节点都为「已完成」时，我们将 <em>u</em> 放入栈中，并将其标记为「已完成」。</p></li></ul><p>在整个深度优先搜索的过程结束后，如果我们没有找到图中的环，那么栈中存储这所有的 <em>n</em> 个节点，从栈顶到栈底的顺序即为一种拓扑排序。</p><p>下面的幻灯片给出了深度优先搜索的可视化流程。图中的「白色」「黄色」「绿色」节点分别表示「未搜索」「搜索中」「已完成」的状态。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/207/1.png" target="_blank" rel="noopener">DFS1</a> <a href="https://assets.leetcode-cn.com/solution-static/207/2.png" target="_blank" rel="noopener">DFS2</a> <a href="https://assets.leetcode-cn.com/solution-static/207/3.png" target="_blank" rel="noopener">DFS3</a> <a href="https://assets.leetcode-cn.com/solution-static/207/4.png" target="_blank" rel="noopener">DFS4</a> <a href="https://assets.leetcode-cn.com/solution-static/207/5.png" target="_blank" rel="noopener">DFS5</a> <a href="https://assets.leetcode-cn.com/solution-static/207/6.png" target="_blank" rel="noopener">DFS6</a> <a href="https://assets.leetcode-cn.com/solution-static/207/7.png" target="_blank" rel="noopener">DFS7</a> <a href="https://assets.leetcode-cn.com/solution-static/207/8.png" target="_blank" rel="noopener">DFS8</a> <a href="https://assets.leetcode-cn.com/solution-static/207/9.png" target="_blank" rel="noopener">DFS9</a> <a href="https://assets.leetcode-cn.com/solution-static/207/10.png" target="_blank" rel="noopener">DFS10</a> <a href="https://assets.leetcode-cn.com/solution-static/207/11.png" target="_blank" rel="noopener">DFS11</a> <a href="https://assets.leetcode-cn.com/solution-static/207/12.png" target="_blank" rel="noopener">DFS12</a> <a href="https://assets.leetcode-cn.com/solution-static/207/13.png" target="_blank" rel="noopener">DFS13</a> <a href="https://assets.leetcode-cn.com/solution-static/207/14.png" target="_blank" rel="noopener">DFS14</a> <a href="https://assets.leetcode-cn.com/solution-static/207/15.png" target="_blank" rel="noopener">DFS15</a> <a href="https://assets.leetcode-cn.com/solution-static/207/16.png" target="_blank" rel="noopener">DFS16</a> <a href="https://assets.leetcode-cn.com/solution-static/207/17.png" target="_blank" rel="noopener">DFS17</a> <a href="https://assets.leetcode-cn.com/solution-static/207/18.png" target="_blank" rel="noopener">DFS18</a> <a href="https://assets.leetcode-cn.com/solution-static/207/19.png" target="_blank" rel="noopener">DFS19</a> <a href="https://assets.leetcode-cn.com/solution-static/207/20.png" target="_blank" rel="noopener">DFS20</a> </p><p><strong>优化</strong></p><p>由于我们只需要判断是否存在一种拓扑排序，而栈的作用仅仅是存放最终的拓扑排序结果，因此我们可以只记录每个节点的状态，而省去对应的栈。</p><p><strong>代码</strong></p><details>    <summary>深度优先搜索C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">    <span class="keyword">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        visited[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (visited[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[u] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        edges.resize(numCourses);</span><br><span class="line">        visited.resize(numCourses);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; info: prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].push_back(info[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; edges;</span><br><span class="line">    <span class="keyword">int</span>[] visited;</span><br><span class="line">    <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">        edges = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            edges.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] info : prerequisites) &#123;</span><br><span class="line">            edges.get(info[<span class="number">1</span>]).add(info[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我们将当前搜索的节点 u 标记为「搜索中」，遍历该节点的每一个相邻节点 v</span></span><br><span class="line">        visited[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : edges.get(u)) &#123;</span><br><span class="line">            <span class="comment">//如果 v 为「未搜索」，那么我们开始搜索 v，待搜索完成回溯到 u</span></span><br><span class="line">            <span class="keyword">if</span> (visited[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (visited[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//如果 v 为「搜索中」，那么我们就找到了图中的一个环，因此是不存在拓扑排序的；</span></span><br><span class="line">                valid = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当 u 的所有相邻节点都为「已完成」时，我们将 u 放入栈中，并将其标记为「已完成」。</span></span><br><span class="line">        visited[u] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        edges = collections.defaultdict(list)</span><br><span class="line">        visited = [<span class="number">0</span>] * numCourses</span><br><span class="line">        result = list()</span><br><span class="line">        valid = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> prerequisites:</span><br><span class="line">            edges[info[<span class="number">1</span>]].append(info[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u: int)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> valid</span><br><span class="line">            visited[u] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">                <span class="keyword">if</span> visited[v] == <span class="number">0</span>:</span><br><span class="line">                    dfs(v)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">elif</span> visited[v] == <span class="number">1</span>:</span><br><span class="line">                    valid = <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            visited[u] = <span class="number">2</span></span><br><span class="line">            result.append(u)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            <span class="keyword">if</span> valid <span class="keyword">and</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">                dfs(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> valid</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>** edges;</span><br><span class="line"><span class="keyword">int</span>* edgeColSize;</span><br><span class="line"><span class="keyword">int</span>* visited;</span><br><span class="line"><span class="keyword">bool</span> valid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    visited[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edgeColSize[u]; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[edges[u][i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            dfs(edges[u][i]);</span><br><span class="line">            <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (visited[edges[u][i]] == <span class="number">1</span>) &#123;</span><br><span class="line">            valid = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[u] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>** prerequisites, <span class="keyword">int</span> prerequisitesSize, <span class="keyword">int</span>* prerequisitesColSize)</span> </span>&#123;</span><br><span class="line">    valid = <span class="literal">true</span>;</span><br><span class="line">    edges = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        edges[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    edgeColSize = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="built_in">memset</span>(edgeColSize, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    visited = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisitesSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = prerequisites[i][<span class="number">1</span>], b = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">        edgeColSize[a]++;</span><br><span class="line">        edges[a] = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(edges[a], <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * edgeColSize[a]);</span><br><span class="line">        edges[a][edgeColSize[a] - <span class="number">1</span>] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(edges[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(edges);</span><br><span class="line">    <span class="built_in">free</span>(edgeColSize);</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="keyword">return</span> valid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canFinish</span><span class="params">(numCourses <span class="keyword">int</span>, prerequisites [][]<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        edges = <span class="built_in">make</span>([][]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        visited = <span class="built_in">make</span>([]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        result []<span class="keyword">int</span></span><br><span class="line">        valid = <span class="literal">true</span></span><br><span class="line">        dfs <span class="function"><span class="keyword">func</span><span class="params">(u <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">dfs</span> = <span class="title">func</span><span class="params">(u <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        visited[u] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> edges[u] &#123;</span><br><span class="line">            <span class="keyword">if</span> visited[v] == <span class="number">0</span> &#123;</span><br><span class="line">                dfs(v)</span><br><span class="line">                <span class="keyword">if</span> !valid &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> visited[v] == <span class="number">1</span> &#123;</span><br><span class="line">                valid = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[u] = <span class="number">2</span></span><br><span class="line">        result = <span class="built_in">append</span>(result, u)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, info := <span class="keyword">range</span> prerequisites &#123;</span><br><span class="line">        edges[info[<span class="number">1</span>]] = <span class="built_in">append</span>(edges[info[<span class="number">1</span>]], info[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> visited[i] == <span class="number">0</span> &#123;</span><br><span class="line">            dfs(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度: <em>O(n+m)*，其中 *n</em> 为课程数，<em>m</em> 为先修课程的要求数。这其实就是对图进行深度优先搜索的时间复杂度。</p></li><li><p>空间复杂度: <em>O(n+m)<em>。题目中是以列表形式给出的先修课程关系，为了对图进行深度优先搜索，我们需要存储成邻接表的形式，空间复杂度为 *O(n+m)</em>。在深度优先搜索的过程中，我们需要最多 *O(n)</em> 的栈空间（递归）进行深度优先搜索，因此总空间复杂度为 <em>O(n+m)</em>。</p></li></ul><h2 id="方法二-广度优先搜索"><a href="#方法二-广度优先搜索" class="headerlink" title="方法二: 广度优先搜索"></a>方法二: 广度优先搜索</h2><p><strong>思路</strong></p><p>方法一的深度优先搜索是一种「逆向思维」：最先被放入栈中的节点是在拓扑排序中最后面的节点。我们也可以使用正向思维，顺序地生成拓扑排序，这种方法也更加直观。</p><p>我们考虑拓扑排序中最前面的节点，该节点一定不会有任何入边，也就是它没有任何的先修课程要求。当我们将一个节点加入答案中后，我们就可以移除它的所有出边，代表着它的相邻节点<strong>少了一门先修课程的要求</strong>。如果某个相邻节点变成了「没有任何入边的节点」，那么就代表着这门课可以开始学习了。按照这样的流程，我们不断地将没有入边的节点加入答案，直到答案中包含所有的节点（得到了一种拓扑排序）或者不存在没有入边的节点（图中包含环）。</p><p>上面的想法类似于广度优先搜索，因此我们可以将广度优先搜索的流程与拓扑排序的求解联系起来。</p><p><strong>算法</strong></p><p>我们使用一个队列来进行广度优先搜索。初始时，所有入度为 <em>0</em> 的节点都被放入队列中，它们就是可以作为拓扑排序最前面的节点，并且它们之间的相对顺序是无关紧要的。</p><p>在广度优先搜索的每一步中，我们取出队首的节点 <em>u</em>：</p><ul><li><p>我们将 <em>u</em> 放入答案中；</p></li><li><p>我们移除 <em>u</em> 的所有出边，也就是将 <em>u</em> 的所有相邻节点的入度减少 <em>1</em>。如果某个相邻节点 <em>v</em> 的入度变为 <em>0</em>，那么我们就将 <em>v</em> 放入队列中。</p></li></ul><p>在广度优先搜索的过程结束后。如果答案中包含了这 <em>n</em> 个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了。</p><p>下面的幻灯片给出了广度优先搜索的可视化流程。</p><p> <a href="https://assets.leetcode-cn.com/solution-static/207/fig1.png" target="_blank" rel="noopener">BFS1</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig2.png" target="_blank" rel="noopener">BFS2</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig3.png" target="_blank" rel="noopener">BFS3</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig4.png" target="_blank" rel="noopener">BFS4</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig5.png" target="_blank" rel="noopener">BFS5</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig6.png" target="_blank" rel="noopener">BFS6</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig7.png" target="_blank" rel="noopener">BFS7</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig8.png" target="_blank" rel="noopener">BFS8</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig9.png" target="_blank" rel="noopener">BFS9</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig10.png" target="_blank" rel="noopener">BFS10</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig11.png" target="_blank" rel="noopener">BFS11</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig12.png" target="_blank" rel="noopener">BFS12</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig13.png" target="_blank" rel="noopener">BFS13</a> <a href="https://assets.leetcode-cn.com/solution-static/207/fig14.png" target="_blank" rel="noopener">BFS14</a> </p><p><strong>优化</strong></p><p>由于我们只需要判断是否存在一种拓扑排序，因此我们省去存放答案数组，而是只用一个变量记录被放入答案数组的节点个数。在广度优先搜索结束之后，我们判断该变量的值是否等于课程数，就能知道是否存在一种拓扑排序。</p><p><strong>代码</strong></p><details>    <summary>广度优先搜索C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indeg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        edges.resize(numCourses);</span><br><span class="line">        indeg.resize(numCourses);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; info: prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].push_back(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> visited = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            ++visited;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">                --indeg[v];</span><br><span class="line">                <span class="keyword">if</span> (indeg[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> visited == numCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; edges;</span><br><span class="line">    <span class="keyword">int</span>[] indeg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">        edges = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            edges.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        indeg = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] info : prerequisites) &#123;</span><br><span class="line">            edges.get(info[<span class="number">1</span>]).add(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//在广度优先搜索的每一步中，我们取出队首的节点 u：</span></span><br><span class="line">        <span class="comment">//我们将 u 放入答案中；</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.offer(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> visited = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            visited++;</span><br><span class="line">            <span class="keyword">int</span> u = queue.poll();</span><br><span class="line">            <span class="comment">//我们移除 u 的所有出边，也就是将 u 的所有相邻节点的入度减少 1。如果某个相邻节点 v 的入度变为 0，那么我们就将 v 放入队列中。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v : edges.get(u)) &#123;</span><br><span class="line">                --indeg[v];</span><br><span class="line">                <span class="keyword">if</span> (indeg[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.offer(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在广度优先搜索的过程结束后。如果答案中包含了这 n 个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了。</span></span><br><span class="line">        <span class="keyword">return</span> visited == numCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Python3</summary><figure class="highlight python"><figcaption><span>[sol2-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        edges = collections.defaultdict(list)</span><br><span class="line">        indeg = [<span class="number">0</span>] * numCourses</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> prerequisites:</span><br><span class="line">            edges[info[<span class="number">1</span>]].append(info[<span class="number">0</span>])</span><br><span class="line">            indeg[info[<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        q = collections.deque([u <span class="keyword">for</span> u <span class="keyword">in</span> range(numCourses) <span class="keyword">if</span> indeg[u] == <span class="number">0</span>])</span><br><span class="line">        visited = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            visited += <span class="number">1</span></span><br><span class="line">            u = q.popleft()</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">                indeg[v] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> indeg[v] == <span class="number">0</span>:</span><br><span class="line">                    q.append(v)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> visited == numCourses</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索C</summary><figure class="highlight c"><figcaption><span>[sol2-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>** prerequisites, <span class="keyword">int</span> prerequisitesSize, <span class="keyword">int</span>* prerequisitesColSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>** edges = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        edges[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> edgeColSize[numCourses];</span><br><span class="line">    <span class="built_in">memset</span>(edgeColSize, <span class="number">0</span>, <span class="keyword">sizeof</span>(edgeColSize));</span><br><span class="line">    <span class="keyword">int</span> indeg[numCourses];</span><br><span class="line">    <span class="built_in">memset</span>(indeg, <span class="number">0</span>, <span class="keyword">sizeof</span>(indeg));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisitesSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = prerequisites[i][<span class="number">1</span>], b = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">        edgeColSize[a]++;</span><br><span class="line">        edges[a] = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(edges[a], <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * edgeColSize[a]);</span><br><span class="line">        edges[a][edgeColSize[a] - <span class="number">1</span>] = b;</span><br><span class="line">        ++indeg[b];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q[numCourses];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q[++r] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> visited = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        ++visited;</span><br><span class="line">        <span class="keyword">int</span> u = q[l++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edgeColSize[u]; ++i) &#123;</span><br><span class="line">            --indeg[edges[u][i]];</span><br><span class="line">            <span class="keyword">if</span> (indeg[edges[u][i]] == <span class="number">0</span>) &#123;</span><br><span class="line">                q[++r] = edges[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(edges[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(edges);</span><br><span class="line">    <span class="keyword">return</span> visited == numCourses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Golang</summary><figure class="highlight golang"><figcaption><span>[sol2-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canFinish</span><span class="params">(numCourses <span class="keyword">int</span>, prerequisites [][]<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        edges = <span class="built_in">make</span>([][]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        indeg = <span class="built_in">make</span>([]<span class="keyword">int</span>, numCourses)</span><br><span class="line">        result []<span class="keyword">int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, info := <span class="keyword">range</span> prerequisites &#123;</span><br><span class="line">        edges[info[<span class="number">1</span>]] = <span class="built_in">append</span>(edges[info[<span class="number">1</span>]], info[<span class="number">0</span>])</span><br><span class="line">        indeg[info[<span class="number">0</span>]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> indeg[i] == <span class="number">0</span> &#123;</span><br><span class="line">            q = <span class="built_in">append</span>(q, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(q) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        u := q[<span class="number">0</span>]</span><br><span class="line">        q = q[<span class="number">1</span>:]</span><br><span class="line">        result = <span class="built_in">append</span>(result, u)</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> edges[u] &#123;</span><br><span class="line">            indeg[v]--</span><br><span class="line">            <span class="keyword">if</span> indeg[v] == <span class="number">0</span> &#123;</span><br><span class="line">                q = <span class="built_in">append</span>(q, v)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(result) == numCourses</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li><p>时间复杂度: <em>O(n+m)*，其中 *n</em> 为课程数，<em>m</em> 为先修课程的要求数。这其实就是对图进行广度优先搜索的时间复杂度。</p></li><li><p>空间复杂度: <em>O(n+m)<em>。题目中是以列表形式给出的先修课程关系，为了对图进行广度优先搜索，我们需要存储成邻接表的形式，空间复杂度为 *O(n+m)</em>。在广度优先搜索的过程中，我们需要最多 *O(n)</em> 的队列空间（迭代）进行广度优先搜索。因此总空间复杂度为 <em>O(n+m)</em>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Breadth-first Search" scheme="http://yoursite.com/tags/Breadth-first-Search/"/>
    
      <category term="Depth-first Search" scheme="http://yoursite.com/tags/Depth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Graph" scheme="http://yoursite.com/tags/Graph/"/>
    
      <category term="Topological sort" scheme="http://yoursite.com/tags/Topological-sort/"/>
    
  </entry>
  
  <entry>
    <title>200. 岛屿数量</title>
    <link href="http://yoursite.com/2020/09/14/200.%20%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <id>http://yoursite.com/2020/09/14/200. 岛屿数量/</id>
    <published>2020-09-14T07:45:12.000Z</published>
    <updated>2020-09-14T08:51:15.789Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><a id="more"></a><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p>示例 1:</p><pre><code>输入:[[&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;0&apos;],[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;1&apos;,&apos;0&apos;],[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;],[&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;]]输出: 1</code></pre><p>示例 2:</p><pre><code>输入:[[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;],[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;],[&apos;0&apos;,&apos;0&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;],[&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;1&apos;,&apos;1&apos;]]输出: 3解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</code></pre><h1 id="📺-视频题解"><a href="#📺-视频题解" class="headerlink" title="📺 视频题解"></a>📺 视频题解</h1><p><a href="0a3f7b6f-abd0-4af8-87ef-89c565b967d4">LeetCode 200 ZYH.mp4</a></p><h1 id="📖-文字题解"><a href="#📖-文字题解" class="headerlink" title="📖 文字题解"></a>📖 文字题解</h1><h2 id="方法一：深度优先搜索"><a href="#方法一：深度优先搜索" class="headerlink" title="方法一：深度优先搜索"></a>方法一：深度优先搜索</h2><p>我们可以将二维网格看成一个无向图，竖直或水平相邻的 <em>1</em> 之间有边相连。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 <em>1</em>，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 <em>1</em> 都会被重新标记为 <em>0</em>。</p><p>最终岛屿的数量就是我们进行深度优先搜索的次数。</p><p>下面的动画展示了整个算法。</p><p> <a href="https://pic.leetcode-cn.com/5dae0de2a06f4eae5113f9cadfa5c51bbcf0b9347c5861aa73c93d7bc1d50b34-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/61a98091fe75de107bf886a608e87d5bb29d810b9e7eb1e00c541f49194ea543-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/6d060f275561dc390841f78d85124fd193efb0801ea2dc865b2767f1093e4f3a-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/233368eab82832268c3c7266fd7fe65c78626de9fd89cb90b3f36a7b4e52860d-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/bf055c3d5f6b310f6a110ada65d503de6d7793276f5638731c81c53b4276b835-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/195ba530a5350e0a8f8e372319d061c85316c1064017d5c00d7cfc2b0c055de6-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/c21a88bde9450ad83d6164c2df4677b16154fa5990408459a2a45982b9cd70fd-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/0cfddec2d15ed9a56c434f470ff07eb3dfc83dccbda0160583d1bce469077274-image.png" target="_blank" rel="noopener">image.png</a> </p><details>    <summary>深度优先搜索C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.size();</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        grid[r][c] = <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (r - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r<span class="number">-1</span>][c] == <span class="string">'1'</span>) dfs(grid, r - <span class="number">1</span>, c);</span><br><span class="line">        <span class="keyword">if</span> (r + <span class="number">1</span> &lt; nr &amp;&amp; grid[r+<span class="number">1</span>][c] == <span class="string">'1'</span>) dfs(grid, r + <span class="number">1</span>, c);</span><br><span class="line">        <span class="keyword">if</span> (c - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c<span class="number">-1</span>] == <span class="string">'1'</span>) dfs(grid, r, c - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c + <span class="number">1</span> &lt; nc &amp;&amp; grid[r][c+<span class="number">1</span>] == <span class="string">'1'</span>) dfs(grid, r, c + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.size();</span><br><span class="line">        <span class="keyword">if</span> (!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num_islands = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    dfs(grid, r, c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.length;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> || r &gt;= nr || c &gt;= nc || grid[r][c] == <span class="string">'0'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        grid[r][c] = <span class="string">'0'</span>;</span><br><span class="line">        dfs(grid, r - <span class="number">1</span>, c);</span><br><span class="line">        dfs(grid, r + <span class="number">1</span>, c);</span><br><span class="line">        dfs(grid, r, c - <span class="number">1</span>);</span><br><span class="line">        dfs(grid, r, c + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nr = grid.length;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> num_islands = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    dfs(grid, r, c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>深度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, grid, r, c)</span>:</span></span><br><span class="line">        grid[r][c] = <span class="number">0</span></span><br><span class="line">        nr, nc = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> [(r - <span class="number">1</span>, c), (r + <span class="number">1</span>, c), (r, c - <span class="number">1</span>), (r, c + <span class="number">1</span>)]:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; nr <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; nc <span class="keyword">and</span> grid[x][y] == <span class="string">"1"</span>:</span><br><span class="line">                self.dfs(grid, x, y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        nr = len(grid)</span><br><span class="line">        <span class="keyword">if</span> nr == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nc = len(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        num_islands = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(nr):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(nc):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == <span class="string">"1"</span>:</span><br><span class="line">                    num_islands += <span class="number">1</span></span><br><span class="line">                    self.dfs(grid, r, c)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num_islands</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li><p>时间复杂度：<em>O(MN)*，其中 *M</em> 和 <em>N</em> 分别为行数和列数。</p></li><li><p>空间复杂度：<em>O(MN)</em>，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到 <em>M N</em>。</p></li></ul><h2 id="方法二：广度优先搜索"><a href="#方法二：广度优先搜索" class="headerlink" title="方法二：广度优先搜索"></a>方法二：广度优先搜索</h2><p>同样地，我们也可以使用广度优先搜索代替深度优先搜索。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 <em>1</em>，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 <em>1</em> 都会被重新标记为 <em>0</em>。直到队列为空，搜索结束。</p><p>最终岛屿的数量就是我们进行广度优先搜索的次数。</p><details>    <summary>广度优先搜索C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.size();</span><br><span class="line">        <span class="keyword">if</span> (!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num_islands = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    grid[r][c] = <span class="string">'0'</span>;</span><br><span class="line">                    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; neighbors;</span><br><span class="line">                    neighbors.push(&#123;r, c&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (!neighbors.empty()) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> rc = neighbors.front();</span><br><span class="line">                        neighbors.pop();</span><br><span class="line">                        <span class="keyword">int</span> row = rc.first, col = rc.second;</span><br><span class="line">                        <span class="keyword">if</span> (row - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row<span class="number">-1</span>][col] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row<span class="number">-1</span>, col&#125;);</span><br><span class="line">                            grid[row<span class="number">-1</span>][col] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (row + <span class="number">1</span> &lt; nr &amp;&amp; grid[row+<span class="number">1</span>][col] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row+<span class="number">1</span>, col&#125;);</span><br><span class="line">                            grid[row+<span class="number">1</span>][col] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (col - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row][col<span class="number">-1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row, col<span class="number">-1</span>&#125;);</span><br><span class="line">                            grid[row][col<span class="number">-1</span>] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (col + <span class="number">1</span> &lt; nc &amp;&amp; grid[row][col+<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row, col+<span class="number">1</span>&#125;);</span><br><span class="line">                            grid[row][col+<span class="number">1</span>] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nr = grid.length;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> num_islands = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    grid[r][c] = <span class="string">'0'</span>;</span><br><span class="line">                    Queue&lt;Integer&gt; neighbors = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                    neighbors.add(r * nc + c);</span><br><span class="line">                    <span class="keyword">while</span> (!neighbors.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> id = neighbors.remove();</span><br><span class="line">                        <span class="keyword">int</span> row = id / nc;</span><br><span class="line">                        <span class="keyword">int</span> col = id % nc;</span><br><span class="line">                        <span class="keyword">if</span> (row - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row-<span class="number">1</span>][col] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.add((row-<span class="number">1</span>) * nc + col);</span><br><span class="line">                            grid[row-<span class="number">1</span>][col] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (row + <span class="number">1</span> &lt; nr &amp;&amp; grid[row+<span class="number">1</span>][col] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.add((row+<span class="number">1</span>) * nc + col);</span><br><span class="line">                            grid[row+<span class="number">1</span>][col] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (col - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row][col-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.add(row * nc + col-<span class="number">1</span>);</span><br><span class="line">                            grid[row][col-<span class="number">1</span>] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (col + <span class="number">1</span> &lt; nc &amp;&amp; grid[row][col+<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.add(row * nc + col+<span class="number">1</span>);</span><br><span class="line">                            grid[row][col+<span class="number">1</span>] = <span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[sol2-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        nr = len(grid)</span><br><span class="line">        <span class="keyword">if</span> nr == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nc = len(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        num_islands = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(nr):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(nc):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == <span class="string">"1"</span>:</span><br><span class="line">                    num_islands += <span class="number">1</span></span><br><span class="line">                    grid[r][c] = <span class="string">"0"</span></span><br><span class="line">                    neighbors = collections.deque([(r, c)])</span><br><span class="line">                    <span class="keyword">while</span> neighbors:</span><br><span class="line">                        row, col = neighbors.popleft()</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> [(row - <span class="number">1</span>, col), (row + <span class="number">1</span>, col), (row, col - <span class="number">1</span>), (row, col + <span class="number">1</span>)]:</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; nr <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; nc <span class="keyword">and</span> grid[x][y] == <span class="string">"1"</span>:</span><br><span class="line">                                neighbors.append((x, y))</span><br><span class="line">                                grid[x][y] = <span class="string">"0"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num_islands</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li><p>时间复杂度：<em>O(MN)*，其中 *M</em> 和 <em>N</em> 分别为行数和列数。</p></li><li><p>空间复杂度：O(min(M,N)) ，在最坏情况下，整个网格均为陆地，队列的大小可以达到 min(M,N)。</p></li></ul><h2 id="方法三：并查集"><a href="#方法三：并查集" class="headerlink" title="方法三：并查集"></a>方法三：并查集</h2><p>同样地，我们也可以使用并查集代替搜索。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 <em>1</em>，则将其与相邻四个方向上的 <em>1</em> 在并查集中进行合并。</p><p>最终岛屿的数量就是并查集中连通分量的数目。</p><p>下面的动画展示了整个算法。</p><p> <a href="https://pic.leetcode-cn.com/41b6ce1794ba80a7a82b31dc4c0642b26ccd280457d254d2fdad37a1f5a73ca6-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/82fa6f7b52294fdd8a2f4a0a28d4ca2dd3d71e86e7ddf5fa5ef4b18a13d3c438-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/773a3ac931ca2b397b0ba6cac17a15a0dd21fe2d0f2887d6b90405d9025c3f85-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/6c1a18d84a24f74c18654e0f20b17c263646a9fad911e6bb227e665688abb037-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/1a35068b177ce3ed70de37d3e7a1fb3e91ba0e5588ab3e3633ddb963f3d64f68-image.png" target="_blank" rel="noopener">image.png</a> <a href="https://pic.leetcode-cn.com/6f35cbfc7410e54ec80f96af3123c5eed5e5b8f73e6a1cc2fa4aea0f911e919c-image.png" target="_blank" rel="noopener">image.png</a> </p><details>    <summary>并查集C++</summary><figure class="highlight c++"><figcaption><span>[sol3-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    UnionFind(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.size();</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    parent.push_back(i * n + j);</span><br><span class="line">                    ++count;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.push_back(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                rank.push_back(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[i] != i) &#123;</span><br><span class="line">            parent[i] = find(parent[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootx = find(x);</span><br><span class="line">        <span class="keyword">int</span> rooty = find(y);</span><br><span class="line">        <span class="keyword">if</span> (rootx != rooty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rank[rootx] &lt; rank[rooty]) &#123;</span><br><span class="line">                swap(rootx, rooty);</span><br><span class="line">            &#125;</span><br><span class="line">            parent[rooty] = rootx;</span><br><span class="line">            <span class="keyword">if</span> (rank[rootx] == rank[rooty]) rank[rootx] += <span class="number">1</span>;</span><br><span class="line">            --count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.size();</span><br><span class="line">        <span class="keyword">if</span> (!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(grid)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> num_islands = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    grid[r][c] = <span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (r - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r<span class="number">-1</span>][c] == <span class="string">'1'</span>) uf.unite(r * nc + c, (r<span class="number">-1</span>) * nc + c);</span><br><span class="line">                    <span class="keyword">if</span> (r + <span class="number">1</span> &lt; nr &amp;&amp; grid[r+<span class="number">1</span>][c] == <span class="string">'1'</span>) uf.unite(r * nc + c, (r+<span class="number">1</span>) * nc + c);</span><br><span class="line">                    <span class="keyword">if</span> (c - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c<span class="number">-1</span>] == <span class="string">'1'</span>) uf.unite(r * nc + c, r * nc + c - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (c + <span class="number">1</span> &lt; nc &amp;&amp; grid[r][c+<span class="number">1</span>] == <span class="string">'1'</span>) uf.unite(r * nc + c, r * nc + c + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uf.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>并查集Java</summary><figure class="highlight java"><figcaption><span>[sol3-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">int</span>[] parent;</span><br><span class="line">        <span class="keyword">int</span>[] rank;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> m = grid.length;</span><br><span class="line">            <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[m * n];</span><br><span class="line">            rank = <span class="keyword">new</span> <span class="keyword">int</span>[m * n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        parent[i * n + j] = i * n + j;</span><br><span class="line">                        ++count;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rank[i * n + j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[i] != i) parent[i] = find(parent[i]);</span><br><span class="line">            <span class="keyword">return</span> parent[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rootx = find(x);</span><br><span class="line">            <span class="keyword">int</span> rooty = find(y);</span><br><span class="line">            <span class="keyword">if</span> (rootx != rooty) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rank[rootx] &gt; rank[rooty]) &#123;</span><br><span class="line">                    parent[rooty] = rootx;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootx] &lt; rank[rooty]) &#123;</span><br><span class="line">                    parent[rootx] = rooty;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent[rooty] = rootx;</span><br><span class="line">                    rank[rootx] += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                --count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nr = grid.length;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> num_islands = <span class="number">0</span>;</span><br><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(grid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    grid[r][c] = <span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (r - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r-<span class="number">1</span>][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        uf.union(r * nc + c, (r-<span class="number">1</span>) * nc + c);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (r + <span class="number">1</span> &lt; nr &amp;&amp; grid[r+<span class="number">1</span>][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        uf.union(r * nc + c, (r+<span class="number">1</span>) * nc + c);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (c - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        uf.union(r * nc + c, r * nc + c - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (c + <span class="number">1</span> &lt; nc &amp;&amp; grid[r][c+<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        uf.union(r * nc + c, r * nc + c + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uf.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>并查集Python</summary><figure class="highlight python"><figcaption><span>[sol3-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        m, n = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.parent = [<span class="number">-1</span>] * (m * n)</span><br><span class="line">        self.rank = [<span class="number">0</span>] * (m * n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">"1"</span>:</span><br><span class="line">                    self.parent[i * n + j] = i * n + j</span><br><span class="line">                    self.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.parent[i] != i:</span><br><span class="line">            self.parent[i] = self.find(self.parent[i])</span><br><span class="line">        <span class="keyword">return</span> self.parent[i]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        rootx = self.find(x)</span><br><span class="line">        rooty = self.find(y)</span><br><span class="line">        <span class="keyword">if</span> rootx != rooty:</span><br><span class="line">            <span class="keyword">if</span> self.rank[rootx] &lt; self.rank[rooty]:</span><br><span class="line">                rootx, rooty = rooty, rootx</span><br><span class="line">            self.parent[rooty] = rootx</span><br><span class="line">            <span class="keyword">if</span> self.rank[rootx] == self.rank[rooty]:</span><br><span class="line">                self.rank[rootx] += <span class="number">1</span></span><br><span class="line">            self.count -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCount</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        nr = len(grid)</span><br><span class="line">        <span class="keyword">if</span> nr == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nc = len(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        uf = UnionFind(grid)</span><br><span class="line">        num_islands = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(nr):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(nc):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == <span class="string">"1"</span>:</span><br><span class="line">                    grid[r][c] = <span class="string">"0"</span></span><br><span class="line">                    <span class="keyword">for</span> x, y <span class="keyword">in</span> [(r - <span class="number">1</span>, c), (r + <span class="number">1</span>, c), (r, c - <span class="number">1</span>), (r, c + <span class="number">1</span>)]:</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; nr <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; nc <span class="keyword">and</span> grid[x][y] == <span class="string">"1"</span>:</span><br><span class="line">                            uf.union(r * nc + c, x * nc + y)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> uf.getCount()</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(MN*\alpha(MN))</span><br></pre></td></tr></table></figure></li></ul><p>，其中 <em>M</em> 和 <em>N</em> 分别为行数和列数。注意当使用路径压缩（见 <code>find</code> 函数）和按秩合并（见数组 <code>rank</code>）实现并查集时，单次操作的时间复杂度为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\alpha(MN)</span><br></pre></td></tr></table></figure><p>，其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\alpha(x)</span><br></pre></td></tr></table></figure><p>为反阿克曼函数，当自变量 <em>x</em> 的值在人类可观测的范围内（宇宙中粒子的数量）时，函数 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\alpha(x)</span><br></pre></td></tr></table></figure><p>的值不会超过 <em>5</em>，因此也可以看成是常数时间复杂度。</p><ul><li>空间复杂度：<em>O(MN)</em>，这是并查集需要使用的空间。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Breadth-first Search" scheme="http://yoursite.com/tags/Breadth-first-Search/"/>
    
      <category term="Depth-first Search" scheme="http://yoursite.com/tags/Depth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>127. 单词接龙</title>
    <link href="http://yoursite.com/2020/09/09/127.%20%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"/>
    <id>http://yoursite.com/2020/09/09/127. 单词接龙/</id>
    <published>2020-09-09T09:45:12.000Z</published>
    <updated>2020-09-14T07:42:39.750Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。</p><a id="more"></a><p>转换需遵循如下规则：</p><ul><li>每次转换只能改变一个字母。</li><li>转换过程中的中间单词必须是字典中的单词。</li></ul><p>说明:</p><ul><li>如果不存在这样的转换序列，返回 0。</li><li>所有单词具有相同的长度。</li><li>所有单词只由小写字母组成。</li><li>字典中不存在重复的单词。</li><li>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</li></ul><p>示例 1:</p><pre><code>输入:beginWord = &quot;hit&quot;,endWord = &quot;cog&quot;,wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]输出: 5解释: 一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;, 返回它的长度 5。</code></pre><p>示例 2:</p><pre><code>输入:beginWord = &quot;hit&quot;endWord = &quot;cog&quot;wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]输出: 0解释: endWord &quot;cog&quot; 不在字典中，所以无法进行转换。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>拥有一个 <code>beginWord</code> 和一个 <code>endWord</code>，分别表示图上的 <code>start node</code> 和  <code>end node</code>。我们希望利用一些中间节点（单词）从  <code>start node</code> 到  <code>end node</code>，中间节点是 <code>wordList</code> 给定的单词。我们对这个单词接龙每个步骤的唯一条件是相邻单词只可以改变<code>一个字母</code>。</p><p><a href="https://pic.leetcode-cn.com/fc3a60e60cb7a80723feea0689c25a6f1637df8c64cfec0d70a264eee7e88254-Word_Ladder_1.png" target="_blank" rel="noopener">Word_Ladder_1.png</a></p><p>我们将问题抽象在一个无向无权图中，每个单词作为节点，差距只有一个字母的两个单词之间连一条边。问题变成找到从起点到终点的最短路径，如果存在的话。因此可以使用<code>广度优先搜索</code>方法。</p><p>算法中最重要的步骤是找出相邻的节点，也就是只差一个字母的两个单词。为了快速的找到这些相邻节点，我们对给定的 <code>wordList</code> 做一个预处理，将单词中的某个字母用 <code>*</code> 代替。</p><p><a href="https://pic.leetcode-cn.com/7212249f3e224d9d5ccbc292e902e48b572f965236378e034d8e03924404cba2-Word_Ladder_2.png" target="_blank" rel="noopener">Word_Ladder_2.png</a></p><p>这个预处理帮我们构造了一个单词变换的通用状态。例如：<code>Dog ----&gt; D*g &lt;---- Dig</code>，<code>Dog</code> 和 <code>Dig</code> 都指向了一个通用状态 <code>D*g</code>。</p><p>这步预处理找出了单词表中所有单词改变某个字母后的通用状态，并帮助我们更方便也更快的找到相邻节点。否则，对于每个单词我们需要遍历整个字母表查看是否存在一个单词与它相差一个字母，这将花费很多时间。预处理操作在广度优先搜索之前高效的建立了邻接表。</p><p>例如，在广搜时我们需要访问 <code>Dug</code> 的所有邻接点，我们可以先生成 <code>Dug</code> 的所有通用状态：</p><ol><li><code>Dug =&gt; *ug</code></li><li><code>Dug =&gt; D*g</code></li><li><code>Dug =&gt; Du*</code></li></ol><p>第二个变换 <code>D*g</code> 可以同时映射到 <code>Dog</code> 或者 <code>Dig</code>，因为他们都有相同的通用状态。拥有相同的通用状态意味着两个单词只相差一个字母，他们的节点是相连的。</p><h1 id="方法-1：广度优先搜索"><a href="#方法-1：广度优先搜索" class="headerlink" title="方法 1：广度优先搜索"></a>方法 1：广度优先搜索</h1><p><strong>想法</strong></p><p>利用广度优先搜索搜索从 <code>beginWord</code> 到 <code>endWord</code> 的路径。</p><p><strong>算法</strong></p><ol><li><p>对给定的 <code>wordList</code> 做预处理，找出所有的通用状态。将通用状态记录在字典中，键是通用状态，值是所有具有通用状态的单词。</p></li><li><p>将包含 <code>beginWord</code> 和 <code>1</code> 的元组放入队列中，<code>1</code> 代表节点的层次。我们需要返回 <code>endWord</code> 的层次也就是从 <code>beginWord</code> 出发的最短距离。</p></li><li><p>为了防止出现环，使用访问数组记录。</p></li><li><p>当队列中有元素的时候，取出第一个元素，记为 <code>current_word</code>。</p></li><li><p>找到 <code>current_word</code> 的所有通用状态，并检查这些通用状态是否存在其它单词的映射，这一步通过检查 <code>all_combo_dict</code> 来实现。</p></li><li><p>从 <code>all_combo_dict</code> 获得的所有单词，都和 <code>current_word</code> 共有一个通用状态，所以都和 <code>current_word</code> 相连，因此将他们加入到队列中。</p></li><li><p>对于新获得的所有单词，向队列中加入元素 <code>(word, level + 1)</code> 其中 <code>level</code> 是 <code>current_word</code> 的层次。</p></li><li><p>最终当你到达期望的单词，对应的层次就是最短变换序列的长度。</p><blockquote><p>标准广度优先搜索的终止条件就是找到结束单词。</p></blockquote></li></ol><details>    <summary>广度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[solution1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since all words are of same length.</span></span><br><span class="line">    <span class="keyword">int</span> L = beginWord.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dictionary to hold combination of words that can be formed,</span></span><br><span class="line">    <span class="comment">// from any given word. By changing one letter at a time.</span></span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; allComboDict = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    wordList.forEach(</span><br><span class="line">        word -&gt; &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">            <span class="comment">// Key is the generic word</span></span><br><span class="line">            <span class="comment">// Value is a list of words which have the same intermediate generic word.</span></span><br><span class="line">            String newWord = word.substring(<span class="number">0</span>, i) + <span class="string">'*'</span> + word.substring(i + <span class="number">1</span>, L);</span><br><span class="line">            List&lt;String&gt; transformations = allComboDict.getOrDefault(newWord, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            transformations.add(word);</span><br><span class="line">            allComboDict.put(newWord, transformations);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Queue for BFS</span></span><br><span class="line">    Queue&lt;Pair&lt;String, Integer&gt;&gt; Q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Q.add(<span class="keyword">new</span> Pair(beginWord, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Visited to make sure we don't repeat processing same word.</span></span><br><span class="line">    Map&lt;String, Boolean&gt; visited = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    visited.put(beginWord, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!Q.isEmpty()) &#123;</span><br><span class="line">      Pair&lt;String, Integer&gt; node = Q.remove();</span><br><span class="line">      String word = node.getKey();</span><br><span class="line">      <span class="keyword">int</span> level = node.getValue();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Intermediate words for current word</span></span><br><span class="line">        String newWord = word.substring(<span class="number">0</span>, i) + <span class="string">'*'</span> + word.substring(i + <span class="number">1</span>, L);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next states are all the words which share the same intermediate state.</span></span><br><span class="line">        <span class="keyword">for</span> (String adjacentWord : allComboDict.getOrDefault(newWord, <span class="keyword">new</span> ArrayList&lt;&gt;())) &#123;</span><br><span class="line">          <span class="comment">// If at any point if we find what we are looking for</span></span><br><span class="line">          <span class="comment">// i.e. the end word - we can return with the answer.</span></span><br><span class="line">          <span class="keyword">if</span> (adjacentWord.equals(endWord)) &#123;</span><br><span class="line">            <span class="keyword">return</span> level + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Otherwise, add it to the BFS Queue. Also mark it visited</span></span><br><span class="line">          <span class="keyword">if</span> (!visited.containsKey(adjacentWord)) &#123;</span><br><span class="line">            visited.put(adjacentWord, <span class="keyword">true</span>);</span><br><span class="line">            Q.add(<span class="keyword">new</span> Pair(adjacentWord, level + <span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>广度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[solution1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ladderLength</span><span class="params">(self, beginWord, endWord, wordList)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type beginWord: str</span></span><br><span class="line"><span class="string">        :type endWord: str</span></span><br><span class="line"><span class="string">        :type wordList: List[str]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> endWord <span class="keyword">not</span> <span class="keyword">in</span> wordList <span class="keyword">or</span> <span class="keyword">not</span> endWord <span class="keyword">or</span> <span class="keyword">not</span> beginWord <span class="keyword">or</span> <span class="keyword">not</span> wordList:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Since all words are of same length.</span></span><br><span class="line">        L = len(beginWord)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Dictionary to hold combination of words that can be formed,</span></span><br><span class="line">        <span class="comment"># from any given word. By changing one letter at a time.</span></span><br><span class="line">        all_combo_dict = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(L):</span><br><span class="line">                <span class="comment"># Key is the generic word</span></span><br><span class="line">                <span class="comment"># Value is a list of words which have the same intermediate generic word.</span></span><br><span class="line">                all_combo_dict[word[:i] + <span class="string">"*"</span> + word[i+<span class="number">1</span>:]].append(word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Queue for BFS</span></span><br><span class="line">        queue = [(beginWord, <span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># Visited to make sure we don't repeat processing same word.</span></span><br><span class="line">        visited = &#123;beginWord: <span class="keyword">True</span>&#125;</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            current_word, level = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(L):</span><br><span class="line">                <span class="comment"># Intermediate words for current word</span></span><br><span class="line">                intermediate_word = current_word[:i] + <span class="string">"*"</span> + current_word[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Next states are all the words which share the same intermediate state.</span></span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> all_combo_dict[intermediate_word]:</span><br><span class="line">                    <span class="comment"># If at any point if we find what we are looking for</span></span><br><span class="line">                    <span class="comment"># i.e. the end word - we can return with the answer.</span></span><br><span class="line">                    <span class="keyword">if</span> word == endWord:</span><br><span class="line">                        <span class="keyword">return</span> level + <span class="number">1</span></span><br><span class="line">                    <span class="comment"># Otherwise, add it to the BFS Queue. Also mark it visited</span></span><br><span class="line">                    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                        visited[word] = <span class="keyword">True</span></span><br><span class="line">                        queue.append((word, level + <span class="number">1</span>))</span><br><span class="line">                all_combo_dict[intermediate_word] = []</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(M\times N)</span><br></pre></td></tr></table></figure></li></ul><p>，其中 <em>M</em> 是单词的长度 <em>N</em> 是单词表中单词的总数。找到所有的变换需要对每个单词做 <em>M</em> 次操作。同时，最坏情况下广度优先搜索也要访问所有的 <em>N</em> 个单词。</p><ul><li>空间复杂度：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(M\times N)</span><br></pre></td></tr></table></figure></li></ul><p>，要在 <code>all_combo_dict</code> 字典中记录每个单词的 <em>M</em> 个通用状态。访问数组的大小是 <em>N</em>。广搜队列最坏情况下需要存储 <em>N</em> 个单词。</p><h1 id="方法-2：双向广度优先搜索"><a href="#方法-2：双向广度优先搜索" class="headerlink" title="方法 2：双向广度优先搜索"></a>方法 2：双向广度优先搜索</h1><p><strong>想法</strong></p><p>根据给定字典构造的图可能会很大，而广度优先搜索的搜索空间大小依赖于每层节点的分支数量。假如每个节点的分支数量相同，搜索空间会随着层数的增长指数级的增加。考虑一个简单的二叉树，每一层都是满二叉树的扩展，节点的数量会以 <code>2</code> 为底数呈指数增长。</p><p>如果使用两个同时进行的广搜可以有效地减少搜索空间。一边从 <code>beginWord</code> 开始，另一边从 <code>endWord</code> 开始。我们每次从两边各扩展一个节点，当发现某一时刻两边都访问了某一顶点时就停止搜索。这就是<code>双向广度优先搜索</code>，它可以可观地减少搜索空间大小，从而降低时间和空间复杂度。</p><p><a href="https://pic.leetcode-cn.com/be92086801e264f49bb1c01593dbfee5b08e52c600b62576c5fa0c1ef2d54eb8-Word_Ladder_3.png" target="_blank" rel="noopener">Word_Ladder_3.png</a></p><p><strong>算法</strong></p><ol><li><p>算法与之前描述的标准广搜方法相类似。</p></li><li><p>唯一的不同是我们从两个节点同时开始搜索，同时搜索的结束条件也有所变化。</p></li><li><p>我们现在有两个访问数组，分别记录从对应的起点是否已经访问了该节点。</p></li><li><p>如果我们发现一个节点被两个搜索同时访问，就结束搜索过程。因为我们找到了双向搜索的交点。过程如同从中间相遇而不是沿着搜索路径一直走。</p><blockquote><p>双向搜索的结束条件是找到一个单词被两边搜索都访问过了。</p></blockquote></li><li><p>最短变换序列的长度就是中间节点在两边的层次之和。因此，我们可以在访问数组中记录节点的层次。</p></li></ol><p><a href="https://pic.leetcode-cn.com/77ff942730428bad804a3f3e8bcddb618ce7b26a2df85cae104c5c2563803dde-Word_Ladder_4.png" target="_blank" rel="noopener">Word_Ladder_4.png</a></p><details>    <summary>双向广度优先搜索Java</summary><figure class="highlight java"><figcaption><span>[solution2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> L;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, List&lt;String&gt;&gt; allComboDict;</span><br><span class="line"></span><br><span class="line">  Solution() &#123;</span><br><span class="line">    <span class="keyword">this</span>.L = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dictionary to hold combination of words that can be formed,</span></span><br><span class="line">    <span class="comment">// from any given word. By changing one letter at a time.</span></span><br><span class="line">    <span class="keyword">this</span>.allComboDict = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">visitWordNode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Queue&lt;Pair&lt;String, Integer&gt;&gt; Q,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;String, Integer&gt; visited,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;String, Integer&gt; othersVisited)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Pair&lt;String, Integer&gt; node = Q.remove();</span><br><span class="line">    String word = node.getKey();</span><br><span class="line">    <span class="keyword">int</span> level = node.getValue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.L; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Intermediate words for current word</span></span><br><span class="line">      String newWord = word.substring(<span class="number">0</span>, i) + <span class="string">'*'</span> + word.substring(i + <span class="number">1</span>, L);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Next states are all the words which share the same intermediate state.</span></span><br><span class="line">      <span class="keyword">for</span> (String adjacentWord : <span class="keyword">this</span>.allComboDict.getOrDefault(newWord, <span class="keyword">new</span> ArrayList&lt;&gt;())) &#123;</span><br><span class="line">        <span class="comment">// If at any point if we find what we are looking for</span></span><br><span class="line">        <span class="comment">// i.e. the end word - we can return with the answer.</span></span><br><span class="line">        <span class="keyword">if</span> (othersVisited.containsKey(adjacentWord)) &#123;</span><br><span class="line">          <span class="keyword">return</span> level + othersVisited.get(adjacentWord);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!visited.containsKey(adjacentWord)) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Save the level as the value of the dictionary, to save number of hops.</span></span><br><span class="line">          visited.put(adjacentWord, level + <span class="number">1</span>);</span><br><span class="line">          Q.add(<span class="keyword">new</span> Pair(adjacentWord, level + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!wordList.contains(endWord)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since all words are of same length.</span></span><br><span class="line">    <span class="keyword">this</span>.L = beginWord.length();</span><br><span class="line"></span><br><span class="line">    wordList.forEach(</span><br><span class="line">        word -&gt; &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">            <span class="comment">// Key is the generic word</span></span><br><span class="line">            <span class="comment">// Value is a list of words which have the same intermediate generic word.</span></span><br><span class="line">            String newWord = word.substring(<span class="number">0</span>, i) + <span class="string">'*'</span> + word.substring(i + <span class="number">1</span>, L);</span><br><span class="line">            List&lt;String&gt; transformations =</span><br><span class="line">                <span class="keyword">this</span>.allComboDict.getOrDefault(newWord, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            transformations.add(word);</span><br><span class="line">            <span class="keyword">this</span>.allComboDict.put(newWord, transformations);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Queues for birdirectional BFS</span></span><br><span class="line">    <span class="comment">// BFS starting from beginWord</span></span><br><span class="line">    Queue&lt;Pair&lt;String, Integer&gt;&gt; Q_begin = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// BFS starting from endWord</span></span><br><span class="line">    Queue&lt;Pair&lt;String, Integer&gt;&gt; Q_end = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Q_begin.add(<span class="keyword">new</span> Pair(beginWord, <span class="number">1</span>));</span><br><span class="line">    Q_end.add(<span class="keyword">new</span> Pair(endWord, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Visited to make sure we don't repeat processing same word.</span></span><br><span class="line">    Map&lt;String, Integer&gt; visitedBegin = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Map&lt;String, Integer&gt; visitedEnd = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    visitedBegin.put(beginWord, <span class="number">1</span>);</span><br><span class="line">    visitedEnd.put(endWord, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!Q_begin.isEmpty() &amp;&amp; !Q_end.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// One hop from begin word</span></span><br><span class="line">      <span class="keyword">int</span> ans = visitWordNode(Q_begin, visitedBegin, visitedEnd);</span><br><span class="line">      <span class="keyword">if</span> (ans &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// One hop from end word</span></span><br><span class="line">      ans = visitWordNode(Q_end, visitedEnd, visitedBegin);</span><br><span class="line">      <span class="keyword">if</span> (ans &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>双向广度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[solution2-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.length = <span class="number">0</span></span><br><span class="line">        <span class="comment"># Dictionary to hold combination of words that can be formed,</span></span><br><span class="line">        <span class="comment"># from any given word. By changing one letter at a time.</span></span><br><span class="line">        self.all_combo_dict = defaultdict(list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visitWordNode</span><span class="params">(self, queue, visited, others_visited)</span>:</span></span><br><span class="line">        current_word, level = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length):</span><br><span class="line">            <span class="comment"># Intermediate words for current word</span></span><br><span class="line">            intermediate_word = current_word[:i] + <span class="string">"*"</span> + current_word[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Next states are all the words which share the same intermediate state.</span></span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> self.all_combo_dict[intermediate_word]:</span><br><span class="line">                <span class="comment"># If the intermediate state/word has already been visited from the</span></span><br><span class="line">                <span class="comment"># other parallel traversal this means we have found the answer.</span></span><br><span class="line">                <span class="keyword">if</span> word <span class="keyword">in</span> others_visited:</span><br><span class="line">                    <span class="keyword">return</span> level + others_visited[word]</span><br><span class="line">                <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    <span class="comment"># Save the level as the value of the dictionary, to save number of hops.</span></span><br><span class="line">                    visited[word] = level + <span class="number">1</span></span><br><span class="line">                    queue.append((word, level + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ladderLength</span><span class="params">(self, beginWord, endWord, wordList)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type beginWord: str</span></span><br><span class="line"><span class="string">        :type endWord: str</span></span><br><span class="line"><span class="string">        :type wordList: List[str]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> endWord <span class="keyword">not</span> <span class="keyword">in</span> wordList <span class="keyword">or</span> <span class="keyword">not</span> endWord <span class="keyword">or</span> <span class="keyword">not</span> beginWord <span class="keyword">or</span> <span class="keyword">not</span> wordList:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Since all words are of same length.</span></span><br><span class="line">        self.length = len(beginWord)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length):</span><br><span class="line">                <span class="comment"># Key is the generic word</span></span><br><span class="line">                <span class="comment"># Value is a list of words which have the same intermediate generic word.</span></span><br><span class="line">                self.all_combo_dict[word[:i] + <span class="string">"*"</span> + word[i+<span class="number">1</span>:]].append(word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Queues for birdirectional BFS</span></span><br><span class="line">        queue_begin = [(beginWord, <span class="number">1</span>)] <span class="comment"># BFS starting from beginWord</span></span><br><span class="line">        queue_end = [(endWord, <span class="number">1</span>)] <span class="comment"># BFS starting from endWord</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Visited to make sure we don't repeat processing same word</span></span><br><span class="line">        visited_begin = &#123;beginWord: <span class="number">1</span>&#125;</span><br><span class="line">        visited_end = &#123;endWord: <span class="number">1</span>&#125;</span><br><span class="line">        ans = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We do a birdirectional search starting one pointer from begin</span></span><br><span class="line">        <span class="comment"># word and one pointer from end word. Hopping one by one.</span></span><br><span class="line">        <span class="keyword">while</span> queue_begin <span class="keyword">and</span> queue_end:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># One hop from begin word</span></span><br><span class="line">            ans = self.visitWordNode(queue_begin, visited_begin, visited_end)</span><br><span class="line">            <span class="keyword">if</span> ans:</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            <span class="comment"># One hop from end word</span></span><br><span class="line">            ans = self.visitWordNode(queue_end, visited_end, visited_begin)</span><br><span class="line">            <span class="keyword">if</span> ans:</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(M\times N)</span><br></pre></td></tr></table></figure></li></ul><p>，其中 <em>M</em> 是单词的长度 <em>N</em> 是单词表中单词的总数。与单向搜索相同的是，找到所有的变换需要 <em>M * N</em> 次操作。但是搜索时间会被缩小一半，因为两个搜索会在中间某处相遇。</p><ul><li>空间复杂度：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(M\times N)</span><br></pre></td></tr></table></figure><p>，要在 <code>all_combo_dict</code> 字典中记录每个单词的 <em>M</em> 个通用状态，这与单向搜索相同。但是因为会在中间相遇，所以双向搜索的搜索空间变小。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Breadth-first Search" scheme="http://yoursite.com/tags/Breadth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>322. 零钱兑换</title>
    <link href="http://yoursite.com/2020/09/08/322.%20%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/09/08/322. 零钱兑换/</id>
    <published>2020-09-08T11:51:12.000Z</published>
    <updated>2020-09-09T07:34:37.632Z</updated>
    
    <content type="html"><![CDATA[<p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: coins = [1, 2, 5], amount = 11输出: 3 解释: 11 = 5 + 5 + 1</code></pre><p>示例 2:</p><pre><code>输入: coins = [2], amount = 3输出: -1</code></pre><p>说明:<br>    你可以认为每种硬币的数量是无限的。</p><h1 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h1><ul><li>搜索回溯</li><li>动态规划</li></ul><h1 id="方法一、搜索回溯-超出时间限制"><a href="#方法一、搜索回溯-超出时间限制" class="headerlink" title="方法一、搜索回溯 [超出时间限制]"></a>方法一、搜索回溯 [超出时间限制]</h1><p>参考<a href="https://leetcode-cn.com/problems/coin-change/solution/322-ling-qian-dui-huan-by-leetcode-solution/" target="_blank" rel="noopener">^1</a></p><details>    <summary>搜索回溯Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> coinChange(<span class="number">0</span>, coins, amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span> idxCoin, <span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (amount == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (idxCoin &lt; coins.length &amp;&amp; amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> maxVal = amount / coins[idxCoin];</span><br><span class="line">      <span class="keyword">int</span> minCost = Integer.MAX_VALUE;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= maxVal; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt;= x * coins[idxCoin]) &#123;</span><br><span class="line">          <span class="keyword">int</span> res = coinChange(idxCoin + <span class="number">1</span>, coins, amount - x * coins[idxCoin]);</span><br><span class="line">          <span class="keyword">if</span> (res != -<span class="number">1</span>)</span><br><span class="line">            minCost = Math.min(minCost, res + x);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (minCost == Integer.MAX_VALUE)? -<span class="number">1</span>: minCost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time Limit Exceeded</span></span><br></pre></td></tr></table></figure></details><details>    <summary>搜索回溯C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span> idxCoin, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (idxCoin &lt; coins.size() &amp;&amp; amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxVal = amount / coins[idxCoin];</span><br><span class="line">            <span class="keyword">int</span> minCost = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= maxVal; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (amount &gt;= x * coins[idxCoin]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = coinChange(idxCoin + <span class="number">1</span>, coins, amount - x * coins[idxCoin]);</span><br><span class="line">                    <span class="keyword">if</span> (res != <span class="number">-1</span>) minCost = min(minCost, res + x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> minCost == INT_MAX ? <span class="number">-1</span>: minCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coinChange(<span class="number">0</span>, coins, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time Limit Exceeded</span></span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><p>参考<a href="https://leetcode-cn.com/problems/coin-change/solution/322-ling-qian-dui-huan-by-leetcode-solution/" target="_blank" rel="noopener">^1</a></p><h1 id="方法二、动态规划-自上而下-通过"><a href="#方法二、动态规划-自上而下-通过" class="headerlink" title="方法二、动态规划-自上而下 [通过]"></a>方法二、动态规划-自上而下 [通过]</h1><p>我们能改进上面的指数时间复杂度的解吗？当然可以，利用动态规划，我们可以在多项式的时间范围内求解。首先，我们定义：</p><ul><li><p><em>F(S)*：组成金额 *S</em> 所需的最少硬币数量 </p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[c_0,...,c_&#123;n-1&#125;]：可选的 n 枚硬币面额值</span><br></pre></td></tr></table></figure></li></ul><p>我们注意到这个问题有一个最优的子结构性质，这是解决动态规划问题的关键。最优解可以从其子问题的最优解构造出来。如何将问题分解成子问题？假设我们知道 <em>F(S)</em> ，即组成金额 <em>S</em> 最少的硬币数，最后一枚硬币的面值是 <em>C</em>。那么由于问题的最优子结构，转移方程应为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F(S) = F(S - C) + 1</span><br></pre></td></tr></table></figure><p>但我们不知道最后一枚硬币的面值是多少，所以我们需要枚举每个硬币面额值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c_0,...,c_&#123;n-1&#125;</span><br></pre></td></tr></table></figure><p>并选择其中的最小值。下列递推关系成立： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F(S)=\mathop &#123;min&#125;_&#123;i=0...n-1&#125;F(S-c_i)+1 \ subject\ to \ S-c_i \ge 0 </span><br><span class="line"></span><br><span class="line">F(S)=0,when \ S=0</span><br><span class="line"></span><br><span class="line">F(S)=-1,when \  n=0</span><br></pre></td></tr></table></figure><p><a href="https://pic.leetcode-cn.com/e0fd2252775b89649ceb6e867ff0e546ec77621edb566693482c8588a98066b8-file_1583404923188" target="_blank" rel="noopener">递归树</a></p><p>在上面的递归树中，我们可以看到许多子问题被多次计算。例如， <em>F(1)</em> 被计算了 <em>13</em> 次。为了避免重复的计算，我们将每个子问题的答案存在一个数组中进行记忆化，如果下次还要计算这个问题的值直接从数组中取出返回即可，这样能保证每个子问题最多只被计算一次。 </p><details>    <summary>动态规划-自上而下Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> coinChange(coins, amount, <span class="keyword">new</span> <span class="keyword">int</span>[amount]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> rem, <span class="keyword">int</span>[] count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rem &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (rem == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (count[rem - <span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">return</span> count[rem - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">      <span class="keyword">int</span> res = coinChange(coins, rem - coin, count);</span><br><span class="line">      <span class="keyword">if</span> (res &gt;= <span class="number">0</span> &amp;&amp; res &lt; min)</span><br><span class="line">        min = <span class="number">1</span> + res;</span><br><span class="line">    &#125;</span><br><span class="line">    count[rem - <span class="number">1</span>] = (min == Integer.MAX_VALUE) ? -<span class="number">1</span> : min;</span><br><span class="line">    <span class="keyword">return</span> count[rem - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划-自上而下C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;count;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> rem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rem &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (rem == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (count[rem - <span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">return</span> count[rem - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> Min = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin:coins) &#123;</span><br><span class="line">            <span class="keyword">int</span> res = dp(coins, rem - coin);</span><br><span class="line">            <span class="keyword">if</span> (res &gt;= <span class="number">0</span> &amp;&amp; res &lt; Min) &#123;</span><br><span class="line">                Min = res + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count[rem - <span class="number">1</span>] = Min == INT_MAX ? <span class="number">-1</span> : Min;</span><br><span class="line">        <span class="keyword">return</span> count[rem - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        count.resize(amount);</span><br><span class="line">        <span class="keyword">return</span> dp(coins, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划-自上而下Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins: List[int], amount: int)</span> -&gt; int:</span></span><br><span class="line"><span class="meta">        @functools.lru_cache(amount)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(rem)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> rem &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> rem == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            mini = int(<span class="number">1e9</span>)</span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> self.coins:</span><br><span class="line">                res = dp(rem - coin)</span><br><span class="line">                <span class="keyword">if</span> res &gt;= <span class="number">0</span> <span class="keyword">and</span> res &lt; mini:</span><br><span class="line">                    mini = res + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> mini <span class="keyword">if</span> mini &lt; int(<span class="number">1e9</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        self.coins = coins</span><br><span class="line">        <span class="keyword">if</span> amount &lt; <span class="number">1</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(Sn)*，其中 *S</em> 是金额，<em>n</em> 是面额数。我们一共需要计算 <em>S</em> 个状态的答案，且每个状态 <em>F(S)</em> 由于上面的记忆化的措施只计算了一次，而计算一个状态的答案需要枚举 <em>n</em> 个面额值，所以一共需要 <em>O(Sn)</em> 的时间复杂度。</li><li>空间复杂度：<em>O(S)*，我们需要额外开一个长为 *S</em> 的数组来存储计算出来的答案 <em>F(S)</em> 。</li></ul><p>这种自上而下的动态规划没有太理解，我感觉下次遇到时也很难想到这种方法，直接还是看第三种解法吧。</p><h1 id="方法三、动态规划：自下而上-推荐"><a href="#方法三、动态规划：自下而上-推荐" class="headerlink" title="方法三、动态规划：自下而上 [推荐]"></a>方法三、动态规划：自下而上 [推荐]</h1><p>这种方法比较容易理解。</p><p><strong>算法：</strong></p><p>我们采用自下而上的方式进行思考。仍定义 <em>F(i)</em> 为组成金额 <em>i</em> 所需最少的硬币数量，假设在计算 <em>F(i)</em> 之前，我们已经计算出 <em>F(0)-F(i-1)</em> 的答案。 则 <em>F(i)</em> 对应的转移方程应为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F(i)=\mathop &#123;min&#125;_&#123;j=0...n-1&#125;F(i-c_i)+1</span><br></pre></td></tr></table></figure><p>其中 <em>c_j</em> 代表的是第 <em>j</em> 枚硬币的面值，即我们枚举最后一枚硬币面额是 <em>c_j*，那么需要从 *i-c_j</em> 这个金额的状态 <em>F(i-c_j)</em> 转移过来，再算上枚举的这枚硬币数量 <em>1</em> 的贡献，由于要硬币数量最少，所以 <em>F(i)</em> 为前面能转移过来的状态的最小值加上枚举的硬币数量 <em>1</em> 。</p><p>例子1：假设</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coins = [1, 2, 5], amount = 11</span><br></pre></td></tr></table></figure><p>则，当 <em>i==0</em> 时无法用硬币组成，为 0 。当 <em>i&lt;0</em> 时，忽略 <em>F(i)</em><br>| F(i)  | 最小硬币数量                                 |<br>| —– | ——————————————– |<br>| F(0)  | 0 //金额为0不能由硬币组成                    |<br>| F(1)  | 1 //<em>F(1)=min(F(1-1),F(1-2),F(1-5))+1=1</em>     |<br>| F(2)  | 1 //<em>F(2)=min(F(2-1),F(2-2),F(2-5))+1=1</em>     |<br>| F(3)  | 2 //<em>F(3)=min(F(3-1),F(3-2),F(3-5))+1=2</em>     |<br>| F(4)  | 2 //<em>F(4)=min(F(4-1),F(4-2),F(4-5))+1=2</em>     |<br>| …   | …                                          |<br>| F(11) | 3 //<em>F(11)=min(F(11-1),F(11-2),F(11-5))+1=3</em> |<br>我们可以看到问题的答案是通过子问题的最优解得到的。</p><p>例子2：假设</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coins = [1, 2, 3], amount = 6</span><br></pre></td></tr></table></figure><p><a href="https://pic.leetcode-cn.com/f4fd96a19871ff55282b0fa90e86ee4768a267ee7e5c446fb6b1837bc215fe2e-file_1583404923197" target="_blank" rel="noopener">例子2</a></p><p>在上图中，可以看到： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">F(3)=min(F(3−c_1),F(3−c_2),F(3−c_3))+1</span><br><span class="line"></span><br><span class="line">=min(F(3−1),F(3−2),F(3−3))+1</span><br><span class="line"></span><br><span class="line">=min(F(2),F(1),F(0))+1</span><br><span class="line"></span><br><span class="line">=min(1,1,0)+1</span><br><span class="line"></span><br><span class="line">=1</span><br></pre></td></tr></table></figure><details>    <summary>动态规划：自下而上Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins: List[int], amount: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [float(<span class="string">'inf'</span>)] * (amount + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(coin, amount + <span class="number">1</span>):</span><br><span class="line">                dp[x] = min(dp[x], dp[x - coin] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[amount] <span class="keyword">if</span> dp[amount] != float(<span class="string">'inf'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划：自下而上Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = amount + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dp, max);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coins.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins[j] &lt;= i) &#123;</span><br><span class="line">          dp[i] = Math.min(dp[i], dp[i - coins[j]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划：自下而上C++</summary><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Max = amount + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(amount + <span class="number">1</span>, Max);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)coins.size(); ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (coins[j] &lt;= i) &#123;</span><br><span class="line">                    dp[i] = min(dp[i], dp[i - coins[j]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(Sn)*，其中 *S</em> 是金额，<em>n</em> 是面额数。我们一共需要计算 <em>O(S)</em> 个状态，<em>S</em> 为题目所给的总金额。对于每个状态，每次需要枚举 <em>n</em> 个面额来转移状态，所以一共需要 <em>O(Sn)</em> 的时间复杂度。</li><li>空间复杂度：<em>O(S)*。DP 数组需要开长度为总金额 *S</em> 的空间。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>329. 矩阵中的最长递增路径</title>
    <link href="http://yoursite.com/2020/09/08/329.%20%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2020/09/08/329. 矩阵中的最长递增路径/</id>
    <published>2020-09-08T11:51:12.000Z</published>
    <updated>2020-09-09T09:42:02.474Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数矩阵，找出最长递增路径的长度。</p><a id="more"></a><p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。</p><p>示例 1:</p><pre><code>输入: nums = [  [9,9,4],  [6,6,8],  [2,1,1]] 输出: 4 </code></pre><p>解释: 最长递增路径为 [1, 2, 6, 9]。<br>示例 2:</p><pre><code>输入: nums = [  [3,4,5],  [3,2,6],  [2,2,1]] 输出: 4 </code></pre><p>解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。</p><h1 id="方法一：记忆化深度优先搜索"><a href="#方法一：记忆化深度优先搜索" class="headerlink" title="方法一：记忆化深度优先搜索"></a>方法一：记忆化深度优先搜索</h1><p>将矩阵看成一个有向图，每个单元格对应图中的一个节点，如果相邻的两个单元格的值不相等，则在相邻的两个单元格之间存在一条从较小值指向较大值的有向边。问题转化成在有向图中寻找最长路径。</p><p>深度优先搜索是非常直观的方法。从一个单元格开始进行深度优先搜索，即可找到从该单元格开始的最长递增路径。对每个单元格分别进行深度优先搜索之后，即可得到矩阵中的最长递增路径的长度。</p><p>但是如果使用朴素深度优先搜索，时间复杂度是指数级，会超出时间限制，因此必须加以优化。</p><p>朴素深度优先搜索的时间复杂度过高的原因是进行了大量的重复计算，同一个单元格会被访问多次，每次访问都要重新计算。由于同一个单元格对应的最长递增路径的长度是固定不变的，因此可以使用记忆化的方法进行优化。用矩阵memo 作为缓存矩阵，已经计算过的单元格的结果存储到缓存矩阵中。</p><p>使用记忆化深度优先搜索，当访问到一个单元格 <em>(i,j)</em> 时，如果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">memo[i][j]\neq0</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">，说明该单元格的结果已经计算过，则直接从缓存中读取结果，如果</span><br><span class="line">```math</span><br><span class="line">memo[i][j]=0</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">，说明该单元格的结果尚未被计算过，则进行搜索，并将计算得到的结果存入缓存中。</span><br><span class="line"></span><br><span class="line">遍历完矩阵中的所有单元格之后，即可得到矩阵中的最长递增路径的长度。</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;记忆化深度优先搜索Java&lt;/summary&gt;</span><br><span class="line">```Java [sol1-Java]</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[][] dirs = &#123;&#123;-1, 0&#125;, &#123;1, 0&#125;, &#123;0, -1&#125;, &#123;0, 1&#125;&#125;;</span><br><span class="line">    public int rows, columns;</span><br><span class="line"></span><br><span class="line">    public int longestIncreasingPath(int[][] matrix) &#123;</span><br><span class="line">        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        rows = matrix.length;</span><br><span class="line">        columns = matrix[0].length;</span><br><span class="line">        int[][] memo = new int[rows][columns];</span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (int i = 0; i &lt; rows; ++i) &#123;</span><br><span class="line">            for (int j = 0; j &lt; columns; ++j) &#123;</span><br><span class="line">                ans = Math.max(ans, dfs(matrix, i, j, memo));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int dfs(int[][] matrix, int row, int column, int[][] memo) &#123;</span><br><span class="line">        if (memo[row][column] != 0) &#123;</span><br><span class="line">            return memo[row][column];</span><br><span class="line">        &#125;</span><br><span class="line">        ++memo[row][column];</span><br><span class="line">        for (int[] dir : dirs) &#123;</span><br><span class="line">            int newRow = row + dir[0], newColumn = column + dir[1];</span><br><span class="line">            if (newRow &gt;= 0 &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= 0 &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[row][column]) &#123;</span><br><span class="line">                memo[row][column] = Math.max(memo[row][column], dfs(matrix, newRow, newColumn, memo) + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return memo[row][column];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>记忆化深度优先搜索C++</summary><figure class="highlight cpp"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> rows, columns;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.size() == <span class="number">0</span> || matrix[<span class="number">0</span>].size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rows = matrix.size();</span><br><span class="line">        columns = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">auto</span> memo = <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (rows, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; (columns));</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">                ans = max(ans, dfs(matrix, i, j, memo));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix, <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (memo[row][column] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[row][column];</span><br><span class="line">        &#125;</span><br><span class="line">        ++memo[row][column];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> newRow = row + dirs[i][<span class="number">0</span>], newColumn = column + dirs[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[row][column]) &#123;</span><br><span class="line">                memo[row][column] = max(memo[row][column], dfs(matrix, newRow, newColumn, memo) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[row][column];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>记忆化深度优先搜索Python</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    </span><br><span class="line">    DIRS = [(<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestIncreasingPath</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">        @lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(row: int, column: int)</span> -&gt; int:</span></span><br><span class="line">            best = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> Solution.DIRS:</span><br><span class="line">                newRow, newColumn = row + dx, column + dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= newRow &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= newColumn &lt; columns <span class="keyword">and</span> matrix[newRow][newColumn] &gt; matrix[row][column]:</span><br><span class="line">                    best = max(best, dfs(newRow, newColumn) + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> best</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        rows, columns = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(columns):</span><br><span class="line">                ans = max(ans, dfs(i, j))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></details><details>    <summary>记忆化深度优先搜索C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> rows, columns;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixSize, <span class="keyword">int</span>* matrixColSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrixSize == <span class="number">0</span> || matrixColSize[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rows = matrixSize;</span><br><span class="line">    columns = matrixColSize[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>** memo = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * rows);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        memo[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * columns);</span><br><span class="line">        <span class="built_in">memset</span>(memo[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * columns);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">            ans = fmax(ans, dfs(matrix, i, j, memo));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(memo);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">int</span>** memo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (memo[row][column] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[row][column];</span><br><span class="line">    &#125;</span><br><span class="line">    ++memo[row][column];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> newRow = row + dirs[i][<span class="number">0</span>], newColumn = column + dirs[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[row][column]) &#123;</span><br><span class="line">            memo[row][column] = fmax(memo[row][column], dfs(matrix, newRow, newColumn, memo) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo[row][column];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>记忆化深度优先搜索Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    dirs = [][]<span class="keyword">int</span>&#123;[]<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">    rows, columns <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestIncreasingPath</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> || <span class="built_in">len</span>(matrix[<span class="number">0</span>]) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    memo := <span class="built_in">make</span>([][]<span class="keyword">int</span>, rows)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">        memo[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, columns)</span><br><span class="line">    &#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; columns; j++ &#123;</span><br><span class="line">            ans = max(ans, dfs(matrix, i, j, memo))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(matrix [][]<span class="keyword">int</span>, row, column <span class="keyword">int</span>, memo [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> memo[row][column] != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[row][column]</span><br><span class="line">    &#125;</span><br><span class="line">    memo[row][column]++</span><br><span class="line">    <span class="keyword">for</span> _, dir := <span class="keyword">range</span> dirs &#123;</span><br><span class="line">        newRow, newColumn := row + dir[<span class="number">0</span>], column + dir[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[row][column] &#123;</span><br><span class="line">            memo[row][column] = max(memo[row][column], dfs(matrix, newRow, newColumn, memo) + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo[row][column]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(mn)*，其中 *m</em> 和 <em>n</em> 分别是矩阵的行数和列数。深度优先搜索的时间复杂度是 <em>O(V+E)*，其中 *V</em> 是节点数，<em>E</em> 是边数。在矩阵中，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">O(V)=O(mn)</span><br><span class="line"></span><br><span class="line">O(E) \approx O(4mn)=O(mn)</span><br></pre></td></tr></table></figure><ul><li>空间复杂度：<em>O(mn)*，其中 *m</em> 和 <em>n</em> 分别是矩阵的行数和列数。空间复杂度主要取决于缓存和递归调用深度，缓存的空间复杂度是 <em>O(mn)</em>，递归调用深度不会超过 <em>mn</em>。</li></ul><h1 id="方法二：拓扑排序"><a href="#方法二：拓扑排序" class="headerlink" title="方法二：拓扑排序"></a>方法二：拓扑排序</h1><p>从方法一可以看到，每个单元格对应的最长递增路径的结果只和相邻单元格的结果有关，那么是否可以使用动态规划求解？</p><p>根据方法一的分析，动态规划的状态定义和状态转移方程都很容易得到。方法一中使用的缓存矩阵 memo  即为状态值，状态转移方程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memo[i][j]=max&#123;memo[x][y]&#125;+1</span><br><span class="line"></span><br><span class="line">其中(x,y)与(i,j)在矩阵中相邻，并且memo[x][y]&gt;memo[i][j]</span><br></pre></td></tr></table></figure><p>动态规划除了状态定义和状态转移方程，还需要考虑边界情况。这里的边界情况是什么呢？</p><p>如果一个单元格的值比它的所有相邻单元格的值都要大，那么这个单元格对应的最长递增路径是 <em>1</em>，这就是边界条件。这个边界条件并不直观，而是需要根据矩阵中的每个单元格的值找到作为边界条件的单元格。</p><p>仍然使用方法一的思想，将矩阵看成一个有向图，计算每个单元格对应的出度，即有多少条边从该单元格出发。对于作为边界条件的单元格，该单元格的值比所有的相邻单元格的值都要大，因此作为边界条件的单元格的出度都是 <em>0</em>。</p><p>基于出度的概念，可以使用拓扑排序求解。从所有出度为 <em>0</em> 的单元格开始广度优先搜索，每一轮搜索都会遍历当前层的所有单元格，更新其余单元格的出度，并将出度变为 <em>0</em> 的单元格加入下一层搜索。当搜索结束时，搜索的总层数即为矩阵中的最长递增路径的长度。</p><details>    <summary>拓扑排序Java</summary><figure class="highlight java"><figcaption><span>[sol2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] dirs = &#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> rows, columns;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rows = matrix.length;</span><br><span class="line">        columns = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] outdegrees = <span class="keyword">new</span> <span class="keyword">int</span>[rows][columns];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="keyword">int</span> newRow = i + dir[<span class="number">0</span>], newColumn = j + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[i][j]) &#123;</span><br><span class="line">                        ++outdegrees[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (outdegrees[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] cell = queue.poll();</span><br><span class="line">                <span class="keyword">int</span> row = cell[<span class="number">0</span>], column = cell[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="keyword">int</span> newRow = row + dir[<span class="number">0</span>], newColumn = column + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &lt; matrix[row][column]) &#123;</span><br><span class="line">                        --outdegrees[newRow][newColumn];</span><br><span class="line">                        <span class="keyword">if</span> (outdegrees[newRow][newColumn] == <span class="number">0</span>) &#123;</span><br><span class="line">                            queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;newRow, newColumn&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>拓扑排序cpp</summary><figure class="highlight cpp"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> rows, columns;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.size() == <span class="number">0</span> || matrix[<span class="number">0</span>].size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rows = matrix.size();</span><br><span class="line">        columns = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">auto</span> outdegrees = <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (rows, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; (columns));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> newRow = i + dirs[k][<span class="number">0</span>], newColumn = j + dirs[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[i][j]) &#123;</span><br><span class="line">                        ++outdegrees[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">queue</span> &lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (outdegrees[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.push(&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">auto</span> cell = q.front(); q.pop();</span><br><span class="line">                <span class="keyword">int</span> row = cell.first, column = cell.second;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> newRow = row + dirs[k][<span class="number">0</span>], newColumn = column + dirs[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &lt; matrix[row][column]) &#123;</span><br><span class="line">                        --outdegrees[newRow][newColumn];</span><br><span class="line">                        <span class="keyword">if</span> (outdegrees[newRow][newColumn] == <span class="number">0</span>) &#123;</span><br><span class="line">                            q.push(&#123;newRow, newColumn&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>拓扑排序Python</summary><figure class="highlight python"><figcaption><span>[sol2-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    DIRS = [(<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestIncreasingPath</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        rows, columns = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        outdegrees = [[<span class="number">0</span>] * columns <span class="keyword">for</span> _ <span class="keyword">in</span> range(rows)]</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(columns):</span><br><span class="line">                <span class="keyword">for</span> dx, dy <span class="keyword">in</span> Solution.DIRS:</span><br><span class="line">                    newRow, newColumn = i + dx, j + dy</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span> &lt;= newRow &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= newColumn &lt; columns <span class="keyword">and</span> matrix[newRow][newColumn] &gt; matrix[i][j]:</span><br><span class="line">                        outdegrees[i][j] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> outdegrees[i][j] == <span class="number">0</span>:</span><br><span class="line">                    queue.append((i, j))</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            size = len(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(size):</span><br><span class="line">                row, column = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> dx, dy <span class="keyword">in</span> Solution.DIRS:</span><br><span class="line">                    newRow, newColumn = row + dx, column + dy</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span> &lt;= newRow &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= newColumn &lt; columns <span class="keyword">and</span> matrix[newRow][newColumn] &lt; matrix[row][column]:</span><br><span class="line">                        outdegrees[newRow][newColumn] -= <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> outdegrees[newRow][newColumn] == <span class="number">0</span>:</span><br><span class="line">                            queue.append((newRow, newColumn))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></details><details>    <summary>拓扑排序C</summary><figure class="highlight c"><figcaption><span>[sol2-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> rows, columns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixSize, <span class="keyword">int</span>* matrixColSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrixSize == <span class="number">0</span> || matrixColSize[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rows = matrixSize;</span><br><span class="line">    columns = matrixColSize[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>** outdegrees = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * rows);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        outdegrees[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * columns);</span><br><span class="line">        <span class="built_in">memset</span>(outdegrees[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * columns);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">int</span> newRow = i + dirs[k][<span class="number">0</span>], newColumn = j + dirs[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[i][j]) &#123;</span><br><span class="line">                    ++outdegrees[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    point* q = (point*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(point) * rows * columns);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (outdegrees[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                q[r++] = (point)&#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">int</span> size = r - l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            point cell = q[l++];</span><br><span class="line">            <span class="keyword">int</span> row = cell.x, column = cell.y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">int</span> newRow = row + dirs[k][<span class="number">0</span>], newColumn = column + dirs[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &lt; matrix[row][column]) &#123;</span><br><span class="line">                    --outdegrees[newRow][newColumn];</span><br><span class="line">                    <span class="keyword">if</span> (outdegrees[newRow][newColumn] == <span class="number">0</span>) &#123;</span><br><span class="line">                        q[r++] = (point)&#123;newRow, newColumn&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>拓扑排序Golang</summary><figure class="highlight golang"><figcaption><span>[sol2-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    dirs = [][]<span class="keyword">int</span>&#123;[]<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">    rows, columns <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestIncreasingPath</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> || <span class="built_in">len</span>(matrix[<span class="number">0</span>]) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    outdegrees := <span class="built_in">make</span>([][]<span class="keyword">int</span>, rows)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">        outdegrees[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, columns)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; columns; j++ &#123;</span><br><span class="line">            <span class="keyword">for</span> _, dir := <span class="keyword">range</span> dirs &#123;</span><br><span class="line">                newRow, newColumn := i + dir[<span class="number">0</span>], j + dir[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &gt; matrix[i][j] &#123;</span><br><span class="line">                    outdegrees[i][j]++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; columns; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> outdegrees[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;i, j&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        ans++</span><br><span class="line">        size := <span class="built_in">len</span>(queue)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">            cell := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">            row, column := cell[<span class="number">0</span>], cell[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> _, dir := <span class="keyword">range</span> dirs &#123;</span><br><span class="line">                newRow, newColumn := row + dir[<span class="number">0</span>], column + dir[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; rows &amp;&amp; newColumn &gt;= <span class="number">0</span> &amp;&amp; newColumn &lt; columns &amp;&amp; matrix[newRow][newColumn] &lt; matrix[row][column] &#123;</span><br><span class="line">                    outdegrees[newRow][newColumn]--</span><br><span class="line">                    <span class="keyword">if</span> outdegrees[newRow][newColumn] == <span class="number">0</span> &#123;</span><br><span class="line">                        queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;newRow, newColumn&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(mn)*，其中 *m</em> 和 <em>n</em> 分别是矩阵的行数和列数。拓扑排序的时间复杂度是 <em>O(V+E)*，其中 *V</em> 是节点数，<em>E</em> 是边数。在矩阵中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">O(V)=O(mn)</span><br><span class="line"></span><br><span class="line">O(E) \approx O(4mn)=O(mn)</span><br></pre></td></tr></table></figure></li><li><p>空间复杂度：<em>O(mn)*，其中 *m</em> 和 <em>n</em> 分别是矩阵的行数和列数。空间复杂度主要取决于队列，队列中的元素个数不会超过 <em>mn</em>。</p></li></ul><p>这种方法我看的还是有点儿懵，特别是这段</p><p>基于出度的概念，可以使用拓扑排序求解。从所有出度为 <em>0</em> 的单元格开始广度优先搜索，每一轮搜索都会遍历当前层的所有单元格，更新其余单元格的出度，并将出度变为 <em>0</em> 的单元格加入下一层搜索。当搜索结束时，搜索的总层数即为矩阵中的最长递增路径的长度。</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>为了让大家更好地理解这道题，出了四道思考题</p><ul><li><p>「方法一」中使用了记忆化存储和深度优先搜索，这里的深度优先搜索可以替换成广度优先搜索吗？</p></li><li><p>「方法二」中基于拓扑排序对排序后的有向无环图做了层次遍历，如果没有拓扑排序直接进行广度优先搜索会发生什么？</p></li><li><p>「方法二」中如果不使用拓扑排序，而是直接按照矩阵中元素的值<strong>从大到小</strong>进行排序，并依此顺序进行状态转移，那么可以得到正确的答案吗？如果是<strong>从小到大</strong>进行排序呢？</p></li><li><p>「变式」给定一个整数矩阵，找出符合以下条件的路径的数量：这个路径是严格递增的，且它的长度至少是 <em>3</em>。矩阵的边长最大为 <em>10^3*，答案对 *10^9 + 7</em> 取模。其他条件和题目相同。<strong>思考：是否可以借鉴这道题的方法？</strong></p></li></ul><p>解答参见<a href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/solution/ju-zhen-zhong-de-zui-chang-di-zeng-lu-jing-by-le-2/" target="_blank" rel="noopener">^1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数矩阵，找出最长递增路径的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Depth-first Search" scheme="http://yoursite.com/tags/Depth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Topological Sort" scheme="http://yoursite.com/tags/Topological-Sort/"/>
    
      <category term="Memoization" scheme="http://yoursite.com/tags/Memoization/"/>
    
  </entry>
  
  <entry>
    <title>300. 最长上升子序列</title>
    <link href="http://yoursite.com/2020/09/08/300.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2020/09/08/300. 最长上升子序列/</id>
    <published>2020-09-08T02:51:12.000Z</published>
    <updated>2020-09-08T11:43:19.567Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p><a id="more"></a><p>示例:</p><pre><code>输入: [10,9,2,5,3,7,101,18]输出: 4 解释: 最长的上升子序列是[2,3,7,101]，它的长度是 4。</code></pre><p>说明:</p><p>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为O(n^2) 。</p><p>进阶: 你能将算法的时间复杂度降低到O(n log n) 吗?</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最开始的想法想先用暴力方法做出来，但是遇到一个问题，[2, 5, 3, 4]这个测试用例长度应该是3，但是我的暴力方法结果是2，因为外层遍历到2，内层遍历到5时就已经认为找到了上升序列，不会再更新后面的3和4.</p><h1 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h1><p><strong>思路与算法</strong></p><p>定义 <em>dp[i]</em> 为考虑前 <em>i</em> 个元素，以第 <em>i</em> 个数字结尾的最长上升子序列的长度，<strong>注意nums[i] 必须被选取</strong>。</p><p>我们从小到大计算 <em>dp[]</em> 数组的值，在计算 <em>dp[i]</em> 之前，我们已经计算出 dp[0..i-1] 的值，则状态转移方程为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i]=max(dp[j])+1,其中0&lt;=j&lt;i且num[j]&lt;num[i]</span><br></pre></td></tr></table></figure><p>即考虑往 dp[0..i-1] 中最长的上升子序列后面再加一个 nums[i] 。由于 <em>dp[j]</em> 代表 nums[0…j] 中以 nums[j] 结尾的最长上升子序列，所以如果能从 <em>dp[j]</em> 这个状态转移过来，那么 nums[i] 必然要大于nums[j]，才能将  nums[i]  放在nums[j]后面以形成更长的上升子序列。</p><p>最后，整个数组的最长上升子序列即所有 <em>dp[i]</em> 中的最大值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIS_&#123;length&#125;=max(dp[j]),其中0&lt;=i&lt;n</span><br></pre></td></tr></table></figure><p>以下动画演示了该方法： </p><p> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide1.PNG" target="_blank" rel="noopener">1</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide2.PNG" target="_blank" rel="noopener">2</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide3.PNG" target="_blank" rel="noopener">3</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide4.PNG" target="_blank" rel="noopener">4</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide5.PNG" target="_blank" rel="noopener">5</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide6.PNG" target="_blank" rel="noopener">6</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide7.PNG" target="_blank" rel="noopener">7</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide8.PNG" target="_blank" rel="noopener">8</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide9.PNG" target="_blank" rel="noopener">9</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide10.PNG" target="_blank" rel="noopener">10</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide11.PNG" target="_blank" rel="noopener">11</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide12.PNG" target="_blank" rel="noopener">12</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide13.PNG" target="_blank" rel="noopener">13</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide14.PNG" target="_blank" rel="noopener">14</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide15.PNG" target="_blank" rel="noopener">15</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide16.PNG" target="_blank" rel="noopener">16</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide17.PNG" target="_blank" rel="noopener">17</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide18.PNG" target="_blank" rel="noopener">18</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide19.PNG" target="_blank" rel="noopener">19</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide20.PNG" target="_blank" rel="noopener">20</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide21.PNG" target="_blank" rel="noopener">21</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide22.PNG" target="_blank" rel="noopener">22</a> <a href="https://pic.leetcode-cn.com/Figures/300_LISSlide23.PNG" target="_blank" rel="noopener">23</a> </p><details>    <summary>动态规划Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxval = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    maxval = Math.max(maxval, dp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = maxval + <span class="number">1</span>;</span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=(<span class="keyword">int</span>)nums.size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *max_element(dp.begin(), dp.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划Python3</summary><figure class="highlight plain"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def lengthOfLIS(self, nums: List[int]) -&gt; int:</span><br><span class="line">        if not nums:</span><br><span class="line">            return 0</span><br><span class="line">        dp = []</span><br><span class="line">        for i in range(len(nums)):</span><br><span class="line">            dp.append(1)</span><br><span class="line">            for j in range(i):</span><br><span class="line">                if nums[i] &gt; nums[j]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + 1)</span><br><span class="line">        return max(dp)</span><br></pre></td></tr></table></figure></details>**复杂度分析**<ul><li><p>时间复杂度：<em>O(n^2)*，其中 *n</em> 为数组nums 的长度。动态规划的状态数为 <em>n</em>，计算状态 <em>dp[i]</em> 时，需要 <em>O(n)</em> 的时间遍历 dp[0…i-1]的所有状态，所以总时间复杂度为 <em>O(n^2)</em>。</p></li><li><p>空间复杂度：<em>O(n)*，需要额外使用长度为 *n</em> 的 <em>dp</em> 数组。</p></li></ul><h1 id="方法二：贪心-二分查找"><a href="#方法二：贪心-二分查找" class="headerlink" title="方法二：贪心 + 二分查找"></a>方法二：贪心 + 二分查找</h1><p><strong>思路与算法</strong></p><p>考虑一个简单的贪心，如果我们要使上升子序列尽可能的长，则我们需要让序列上升得尽可能慢，因此我们希望每次在上升子序列最后加上的那个数尽可能的小。</p><p>基于上面的贪心思路，我们维护一个数组 <em>d[i]</em> ，表示长度为 <em>i</em> 的最长上升子序列的末尾元素的最小值，用 len 记录目前最长上升子序列的长度，起始时 <em>len</em> 为 <em>1</em>，d[1]=nums[0]。</p><p>同时我们可以注意到 <em>d[i]</em> 是关于 <em>i</em> 单调递增的。因为如果 d[j]&gt;=d[i] 且 <em>j &lt; i*，我们考虑从长度为 *i</em> 的最长上升子序列的末尾删除 <em>i-j</em> 个元素，那么这个序列长度变为 <em>j</em> ，且第 <em>j</em> 个元素 <em>x</em>（末尾元素）必然小于 <em>d[i]<em>，也就小于 *d[j]</em>。那么我们就找到了一个长度为 *j</em> 的最长上升子序列，并且末尾元素比 <em>d[j]</em> 小，从而产生了矛盾。因此数组 <em>d[]</em> 的单调性得证。</p><p>我们依次遍历数组 nums[] 中的每个元素，并更新数组 <em>d[]</em> 和 <em>len</em> 的值。如果 nums[i]&gt;d[len]  则更新 <em>len = len + 1</em>，否则在 d[1…len]中找满足d[i-1]&lt;nums[j]&lt;d[i] 的下标 <em>i</em>，并更新 d[i]=nums[j] 。</p><p>根据 <em>d</em> 数组的单调性，我们可以使用二分查找寻找下标 <em>i</em>，优化时间复杂度。</p><p>最后整个算法流程为：</p><ul><li><p>设当前已求出的最长上升子序列的长度为len （初始时为 <em>1</em>），从前往后遍历数组 nums，在遍历到 nums[i] 时：</p><ul><li><p>如果 nums[i]&gt;d[len]  ，则直接加入到 <em>d</em> 数组末尾，并更新len=len+1；</p></li><li><p>否则，在 <em>d</em> 数组中二分查找，找到第一个比nums[i] 小的数 <em>d[k]</em> ，并更新d[k+1]=nums[i]。</p></li></ul></li></ul><p>以输入序列 <em>[0, 8, 4, 12, 2]</em> 为例：</p><ul><li><p>第一步插入 <em>0</em>，<em>d = [0]</em>；</p></li><li><p>第二步插入 <em>8</em>，<em>d = [0, 8]</em>；</p></li><li><p>第三步插入 <em>4</em>，<em>d = [0, 4]</em>；</p></li><li><p>第四步插入 <em>12</em>，<em>d = [0, 4, 12]</em>；</p></li><li><p>第五步插入 <em>2</em>，<em>d = [0, 2, 12]</em>。</p></li></ul><p>最终得到最大递增子序列长度为 <em>3</em>。</p><details>    <summary>贪心 + 二分查找C++</summary><figure class="highlight c++"><figcaption><span>[sol2-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>, n = (<span class="keyword">int</span>)nums.size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        d[len] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; d[len]) d[++len] = nums[i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">1</span>, r = len, pos = <span class="number">0</span>; <span class="comment">// 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span></span><br><span class="line">                <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (d[mid] &lt; nums[i]) &#123;</span><br><span class="line">                        pos = mid;</span><br><span class="line">                        l = mid + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                d[pos + <span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>贪心 + 二分查找Python</summary><figure class="highlight python"><figcaption><span>[sol2-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        d = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> d <span class="keyword">or</span> n &gt; d[<span class="number">-1</span>]:</span><br><span class="line">                d.append(n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l, r = <span class="number">0</span>, len(d) - <span class="number">1</span></span><br><span class="line">                loc = r</span><br><span class="line">                <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">                    mid = (l + r) // <span class="number">2</span></span><br><span class="line">                    <span class="keyword">if</span> d[mid] &gt;= n:</span><br><span class="line">                        loc = mid</span><br><span class="line">                        r = mid - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        l = mid + <span class="number">1</span></span><br><span class="line">                d[loc] = n</span><br><span class="line">        <span class="keyword">return</span> len(d)</span><br></pre></td></tr></table></figure></details><details>    <summary>贪心 + 二分查找Java</summary> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> class Solution &#123;</span><br><span class="line">    public int lengthOfLIS(int[] nums) &#123;</span><br><span class="line">        // len 记录目前最长上升子序列的长度</span><br><span class="line">        int len = 1, n = nums.length;</span><br><span class="line">        if (n == 0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        //d[]表示长度为 i 的最长上升子序列的末尾元素的最小值</span><br><span class="line">        int[] d=new int[n+1];</span><br><span class="line">        d[len] = nums[0];</span><br><span class="line">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class="line">            if (nums[i] &gt; d[len])&#123;</span><br><span class="line">                d[++len] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                int l = 1, r = len, pos = 0; // 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span><br><span class="line">                while (l &lt;= r) &#123;</span><br><span class="line">                    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">                    if (d[mid] &lt; nums[i]) &#123;</span><br><span class="line">                        pos = mid;</span><br><span class="line">                        l = mid + 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else&#123;</span><br><span class="line">                        r = mid - 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                d[pos + 1] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(nlogn)。数组 nums 的长度为 <em>n</em>，我们依次用数组中的元素去更新 <em>d</em> 数组，而更新 <em>d</em> 数组时需要进行 O(logn) 的二分搜索，所以总时间复杂度为 O(nlogn) 。</p></li><li><p>空间复杂度：<em>O(n)*，需要额外使用长度为 *n</em> 的 <em>d</em> 数组。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个无序的整数数组，找到其中最长上升子序列的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>279. 完全平方数</title>
    <link href="http://yoursite.com/2020/09/03/279.%20%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <id>http://yoursite.com/2020/09/03/279. 完全平方数/</id>
    <published>2020-09-03T11:41:12.000Z</published>
    <updated>2020-09-08T02:48:13.638Z</updated>
    
    <content type="html"><![CDATA[<p>给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。</p><a id="more"></a><p>示例 1:</p><pre><code>输入: n = 12输出: 3 解释: 12 = 4 + 4 + 4.</code></pre><p>示例 2:</p><pre><code>输入: n = 13输出: 2解释: 13 = 4 + 9.</code></pre><h1 id="方法一：暴力枚举法-超出时间限制"><a href="#方法一：暴力枚举法-超出时间限制" class="headerlink" title="方法一：暴力枚举法 [超出时间限制]"></a>方法一：暴力枚举法 [超出时间限制]</h1><p>这个问题要求我们找出由完全平方数组合成给定数字的最小个数。我们将问题重新表述成：</p><p>给定一个完全平方数列表和正整数 <code>n</code>，求出完全平方数组合成 <code>n</code> 的组合，要求组合中的解拥有完全平方数的最小个数。</p><p>注：可以重复使用列表中的完全平方数。</p><p>从上面对这个问题的叙述来看，它似乎是一个组合问题，对于这个问题，一个直观的解决方案是使用暴力枚举法，我们枚举所有可能的组合，并找到完全平方数的个数最小的一个。</p><p>我们可以用下面的公式来表述这个问题：</p><p><code>numSquares(n)=min(numSquares(n-k)+1) ∀k∈ square numbers</code></p><p>从上面的公式中，我们可以将其转换为递归解决方案。这里有一个例子。</p><p><strong>算法：</strong></p><details>    <summary>暴力枚举法</summary><figure class="highlight python"><figcaption><span>[solution1-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        square_nums = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(math.sqrt(n))+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">minNumSquares</span><span class="params">(k)</span>:</span></span><br><span class="line">            <span class="string">""" recursive solution """</span></span><br><span class="line">            <span class="comment"># bottom cases: find a square number</span></span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">in</span> square_nums:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            min_num = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Find the minimal value among all possible solutions</span></span><br><span class="line">            <span class="keyword">for</span> square <span class="keyword">in</span> square_nums:</span><br><span class="line">                <span class="keyword">if</span> k &lt; square:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                new_num = minNumSquares(k-square) + <span class="number">1</span></span><br><span class="line">                min_num = min(min_num, new_num)</span><br><span class="line">            <span class="keyword">return</span> min_num</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minNumSquares(n)</span><br></pre></td></tr></table></figure></details><p>上面的解决方案可以适用于较小的正整数 <code>n</code>。然而，会发现对于中等大小的数字（例如 55），我们也会很快遇到超出时间限制的问题。</p><p>简单的说，可能会由于过度递归，产生堆栈溢出。</p><h1 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h1><p>使用暴力枚举法会超出时间限制的原因很简单，因为我们重复的计算了中间解。我们以前的公式仍然是有效的。我们只需要一个更好的方法实现这个公式。</p><p><code>numSquares(n)=min(numSquares(n-k)+1) ∀k∈ square numbers</code></p><p>你可能注意到从公式看来，这个问题和<a href="https://leetcode.com/problems/fibonacci-number/" target="_blank" rel="noopener">斐波那契数问题</a>类似。和斐波那契数一样，我们由几种更有效的方法来计算解，而不是简单的递归。</p><p>解决递归中堆栈溢出的问题的一个思路就是使用动态规划（DP）技术，该技术建立在重用中间解的结果来计算终解的思想之上。</p><p>要计算numSquares(n) 的值，首先要计算 <em>n</em> 之前的所有值，即 numSquares(n-k) 。如果我们已经在某个地方保留了数字 <em>n-k</em> 的解，那么就不需要使用递归计算。</p><p><strong>算法：</strong></p><p>基于上述所说，我么可以在以下步骤实现 DP 解决方案。</p><ul><li>几乎所有的动态规划解决方案，首先会创建一个一维或多维数组 DP 来保存中间子解的值，以及通常数组最后一个值代表最终解。注意，我们创建了一个虚构的元素 <code>dp[0]=0</code> 来简化逻辑，这有助于在在余数 (<code>n-k</code>）恰好是一个完全平方数的情况下。</li><li>我们还需要预计算小于给定数字 <code>n</code> 的完全平方数列表（即 <code>square_nums</code>）。</li><li>在主要步骤中，我们从数字 <code>1</code> 循环到 <code>n</code>，计算每个数字 <code>i</code> 的解（即 <code>numSquares(i)</code>）。每次迭代中，我们将 <code>numSquares(i)</code> 的结果保存在 <code>dp[i]</code> 中。</li><li>在循环结束时，我们返回数组中的最后一个元素作为解决方案的结果。</li><li>在下图中，我们演示了如何计算与 <code>dp[4]</code> 和 <code>dp[5]</code> 相对应的 <code>numSquares(4)</code> 和 <code>numSquares(5)</code> 的结果。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjc5LzI3OV9kcC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>下面是示例实现，其中 Python 解决方案花费了约 3500 ms，这比当时 50% 的提交要快。</p><p>注意：以下 Python 解决方案仅适用于 Python2。出于某种未知的原因，Python3 运行相同的代码需要更长的时间。</p><details>    <summary>动态规划Python</summary><figure class="highlight python"><figcaption><span>[solution2-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        square_nums = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, int(math.sqrt(n))+<span class="number">1</span>)]</span><br><span class="line">        </span><br><span class="line">        dp = [float(<span class="string">'inf'</span>)] * (n+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># bottom case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> square <span class="keyword">in</span> square_nums:</span><br><span class="line">                <span class="keyword">if</span> i &lt; square:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                dp[i] = min(dp[i], dp[i-square] + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划Java</summary><figure class="highlight java"><figcaption><span>[solution2-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">    <span class="comment">// bottom case</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pre-calculate the square numbers.</span></span><br><span class="line">    <span class="keyword">int</span> max_square_index = (<span class="keyword">int</span>) Math.sqrt(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> square_nums[] = <span class="keyword">new</span> <span class="keyword">int</span>[max_square_index];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; max_square_index; ++i) &#123;</span><br><span class="line">      square_nums[i] = i * i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt; max_square_index; ++s) &#123;</span><br><span class="line">        <span class="comment">//为了使dp[i - square_nums[s]] 数组不越界</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; square_nums[s])</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        dp[i] = Math.min(dp[i], dp[i - square_nums[s]] + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<em>n^1/2) ，在主步骤中，我们有一个嵌套循环，其中外部循环是 *n</em> 次迭代，而内部循环最多需要 n^1/2  迭代。</li><li>空间复杂度：O(n) ，使用了一个一维数组 dp。</li></ul><h1 id="方法三：贪心枚举"><a href="#方法三：贪心枚举" class="headerlink" title="方法三：贪心枚举"></a>方法三：贪心枚举</h1><p>递归解决方法为我们理解问题提供了简洁直观的方法。我们仍然可以用递归解决这个问题。为了改进上述暴力枚举解决方案，我们可以在递归中加入贪心。我们可以将枚举重新格式化如下：</p><p>从一个数字到多个数字的组合开始，一旦我们找到一个可以组合成给定数字 <code>n</code> 的组合，那么我们可以说我们找到了最小的组合，因为我们贪心的从小到大的枚举组合。</p><p>为了更好的解释，我们首先定义一个名为 <code>is_divided_by(n, count)</code> 的函数，该函数返回一个布尔值，表示数字 <code>n</code> 是否可以被一个数字 <code>count</code> 组合，而不是像前面函数 <code>numSquares(n)</code> 返回组合的确切大小。</p><p> <code>numSquares(n)=argmin(is_divided_by(n,count)  count∈[1,2,...,n]</code></p><p>与递归函数 <code>numSquare(n)</code> 不同，<code>is_divided_by(n, count)</code> 的递归过程可以归结为底部情况（即 <code>count==1</code>）更快。</p><p>下面是一个关于函数 <code>is_divided_by(n, count)</code> 的例子，它对 输入 <code>n=5</code> 和 <code>count=2</code> 进行了分解。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjc5LzI3OV9ncmVlZHkucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>通过这种重新构造的技巧，我们可以显著降低堆栈溢出的风险。</p><p><strong>算法：</strong></p><ul><li>首先，我们准备一个小于给定数字 <code>n</code> 的完全平方数列表（称为 <code>square_nums</code>）。</li><li>在主循环中，将组合的大小（称为 <code>count</code>）从 <code>1</code> 迭代到 <code>n</code>，我们检查数字 <code>n</code> 是否可以除以组合的和，即 <code>is_divided_by(n, count)</code>。</li><li>函数 <code>is_divided_by(n, count)</code> 可以用递归的形式实现，汝上面所说。</li><li>在最下面的例子中，我们有 <code>count==1</code>，我们只需检查数字 <code>n</code> 是否本身是一个完全平方数。可以在 <code>square_nums</code> 中检查，即 <code>n ∈ square_nums</code> 。如果 <code>square_nums</code> 使用的是集合数据结构，我们可以获得比 <code>n == int(sqrt(n)) ^ 2</code> 更快的运行时间。</li></ul><p>关于算法的正确性，通常情况下，我们可以用反证法来证明贪心算法。这也不例外。假设我们发现 <code>count=m</code> 可以除以 <code>n</code>，并且假设在以后的迭代中存在另一个 <code>count=p</code> 也可以除以 <code>n</code>，并且这个数的组合小于找到的数，即 <code>p&lt;m</code>。如果给定迭代的顺序，<code>count = p</code> 会在 <code>count=m</code> 之前被发现，因此，该算法总是能够找到组合的最小大小。</p><p>下面是一些示例实现。Python 解决方案需要大约 70ms，这比当时大约 90% 的提交要快。</p><details>    <summary>贪心枚举Python</summary><figure class="highlight python"><figcaption><span>[solution3-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">is_divided_by</span><span class="params">(n, count)</span>:</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">                return: true if "n" can be decomposed into "count" number of perfect square numbers.</span></span><br><span class="line"><span class="string">                e.g. n=12, count=3:  true.</span></span><br><span class="line"><span class="string">                     n=12, count=2:  false</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> n <span class="keyword">in</span> square_nums</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> square_nums:</span><br><span class="line">                <span class="keyword">if</span> is_divided_by(n - k, count - <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        square_nums = set([i * i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(n**<span class="number">0.5</span>)+<span class="number">1</span>)])</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> is_divided_by(n, count):</span><br><span class="line">                <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure></details><details>    <summary>贪心枚举Java</summary><figure class="highlight java"><figcaption><span>[solution3-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  Set&lt;Integer&gt; square_nums = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">is_divided_by</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> square_nums.contains(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Integer square : square_nums) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_divided_by(n - square, count - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.square_nums.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">this</span>.square_nums.add(i * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; count &lt;= n; ++count) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_divided_by(n, count))</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><p>参见<a href="https://leetcode-cn.com/problems/perfect-squares/solution/wan-quan-ping-fang-shu-by-leetcode/" target="_blank" rel="noopener">^1</a></p><h1 id="方法四：贪心-BFS（广度优先搜索）"><a href="#方法四：贪心-BFS（广度优先搜索）" class="headerlink" title="方法四：贪心 + BFS（广度优先搜索）"></a>方法四：贪心 + BFS（广度优先搜索）</h1><p>正如上述贪心算法的复杂性分析种提到的，调用堆栈的轨迹形成一颗 N 元树，其中每个结点代表 <code>is_divided_by(n, count)</code> 函数的调用。基于上述想法，我们可以把原来的问题重新表述如下：</p><p>给定一个 N 元树，其中每个节点表示数字 n 的余数减去一个完全平方数的组合，我们的任务是在树中找到一个节点，该节点满足两个条件：</p><p>(1) 节点的值（即余数）也是一个完全平方数。<br>(2) 在满足条件（1）的所有节点中，节点和根之间的距离应该最小。</p><p>下面是这棵树的样子。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjc5LzI3OV9ncmVlZHlfdHJlZS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>在前面的方法3中，由于我们执行调用的贪心策略，我们实际上是从上到下逐层构造 N 元树。我们以 BFS（广度优先搜索）的方式遍历它。在 N 元树的每一级，我们都在枚举相同大小的组合。</p><p>遍历的顺序是 BFS，而不是 DFS（深度优先搜索），这是因为在用尽固定数量的完全平方数分解数字 n 的所有可能性之前，我们不会探索任何需要更多元素的潜在组合。</p><p><strong>算法：</strong></p><ul><li>首先，我们准备小于给定数字 <code>n</code> 的完全平方数列表（即 <code>square_nums</code>）。</li><li>然后创建 <code>queue</code> 遍历，该变量将保存所有剩余项在每个级别的枚举。</li><li>在主循环中，我们迭代 <code>queue</code> 变量。在每次迭代中，我们检查余数是否是一个完全平方数。如果余数不是一个完全平方数，就用其中一个完全平方数减去它，得到一个新余数，然后将新余数添加到 <code>next_queue</code> 中，以进行下一级的迭代。一旦遇到一个完全平方数的余数，我们就会跳出循环，这也意味着我们找到了解。</li></ul><p>注意：在典型的 BFS 算法中，<code>queue</code> 变量通常是数组或列表类型。但是，这里我们使用 <code>set</code> 类型，以消除同一级别中的剩余项的冗余。事实证明，这个小技巧甚至可以增加 5 倍的运行加速。</p><p>在下图中，我们以 <code>numSquares(7)</code> 为例说明队列的布局。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjc5LzI3OV9ncmVlZHlfYmZzLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><details>    <summary>贪心 + BFS（广度优先搜索）Python</summary><figure class="highlight python"><figcaption><span>[solution4-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># list of square numbers that are less than `n`</span></span><br><span class="line">        square_nums = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(n**<span class="number">0.5</span>)+<span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">        level = <span class="number">0</span></span><br><span class="line">        queue = &#123;n&#125;</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level += <span class="number">1</span></span><br><span class="line">            <span class="comment">#! Important: use set() instead of list() to eliminate the redundancy,</span></span><br><span class="line">            <span class="comment"># which would even provide a 5-times speedup, 200ms vs. 1000ms.</span></span><br><span class="line">            next_queue = set()</span><br><span class="line">            <span class="comment"># construct the queue for the next level</span></span><br><span class="line">            <span class="keyword">for</span> remainder <span class="keyword">in</span> queue:</span><br><span class="line">                <span class="keyword">for</span> square_num <span class="keyword">in</span> square_nums:    </span><br><span class="line">                    <span class="keyword">if</span> remainder == square_num:</span><br><span class="line">                        <span class="keyword">return</span> level  <span class="comment"># find the node!</span></span><br><span class="line">                    <span class="keyword">elif</span> remainder &lt; square_num:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        next_queue.add(remainder - square_num)</span><br><span class="line">            queue = next_queue</span><br><span class="line">        <span class="keyword">return</span> level</span><br></pre></td></tr></table></figure></details><details>    <summary>贪心 + BFS（广度优先搜索）Java</summary><figure class="highlight java"><figcaption><span>[solution4-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; square_nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">      square_nums.add(i * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; queue = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">    queue.add(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      level += <span class="number">1</span>;</span><br><span class="line">      Set&lt;Integer&gt; next_queue = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Integer remainder : queue) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer square : square_nums) &#123;</span><br><span class="line">          <span class="keyword">if</span> (remainder.equals(square)) &#123;</span><br><span class="line">            <span class="keyword">return</span> level;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remainder &lt; square) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next_queue.add(remainder - square);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      queue = next_queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><p>参见<a href="https://leetcode-cn.com/problems/perfect-squares/solution/wan-quan-ping-fang-shu-by-leetcode/" target="_blank" rel="noopener">^1</a></p><h1 id="方法五：数学运算"><a href="#方法五：数学运算" class="headerlink" title="方法五：数学运算"></a>方法五：数学运算</h1><p>参见<a href="https://leetcode-cn.com/problems/perfect-squares/solution/wan-quan-ping-fang-shu-by-leetcode/" target="_blank" rel="noopener">^1</a></p><p>随着时间的推移，已经提出并证明的数学定理可以解决这个问题。在这一节中，我们将把这个问题分成几个例子。</p><p>1770 年，<a href="https://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem" target="_blank" rel="noopener">Joseph Louis Lagrange</a>证明了一个定理，称为四平方和定理，也称为 Bachet 猜想，它指出每个自然数都可以表示为四个整数平方和：</p><p><em>p=a_{0}^{2}+a_{1}^{2}+a_{2}^{2}+a_{3}^{2}</em></p><p>其中 <em>a_{0},a_{1},a_{2},a_{3}</em> 表示整数。</p><p>例如，3，31 可以被表示为四平方和如下：<br><img src="./p__3=1%5E%7B2%7D+1%5E%7B2%7D+1%5E%7B2%7D+0%5E%7B2%7D_qquad_31=5%5E%7B2%7D+2%5E%7B2%7D+1%5E%7B2%7D+1%5E%7B2%7D_.png" alt="3=1^{2}+1^{2}+1^{2}+0^{2}\qquad31=5^{2}+2^{2}+1^{2}+1^{2} "> </p><p>情况 1：拉格朗日四平方定理设置了问题结果的上界，即如果数 <code>n</code> 不能分解为较少的完全平方数，则至少可以分解为 4个完全平方数之和，即 <img src="./p__text%7BnumSquares%7D_n__le_4_.png" alt="\text{numSquares}(n)\le4 "> 。</p><p>正如我们在上面的例子中可能注意到的，数字 0 也被认为是一个完全平方数，因此我们可以认为数字 3 可以分解为 3 个或  4 个完全平方数。</p><p>然而，拉格朗日四平方定理并没有直接告诉我们用最小平方数来分解自然数。</p><p>后来，在 1797 年，<a href="https://en.wikipedia.org/wiki/Adrien-Marie_Legendre" target="_blank" rel="noopener">Adrien Marie Legendre</a>用他的三平方定理完成了四平方定理，证明了正整数可以表示为三个平方和的一个特殊条件：</p><p><img src="./p__n_ne_4%5E%7Bk%7D_8m+7__iff_n_=_a_%7B0%7D%5E%7B2%7D+a_%7B1%7D%5E%7B2%7D+a_%7B2%7D%5E%7B2%7D_.png" alt="n\ne4^{k}(8m+7)\iffn=a_{0}^{2}+a_{1}^{2}+a_{2}^{2} "> </p><p>其中 <em>k</em> 和 <em>m</em> 是整数。</p><p>情况 2：与四平方定理不同，Adrien-Marie-Legendre 的三平方定理给了我们一个充分必要的条件来检验这个数是否只能分解成 4 个平方。</p><p>从三平方定理看我们在第 2 种情况下得出的结论可能很难。让我们详细说明一下推论过程。</p><p>首先，三平方定理告诉我们，如果 <code>n</code> 的形式是 <em>n = 4^{k}(8m+7)</em>，那么 <code>n</code> 不能分解为 3 个平方的和。此外，我们还可以断言 <code>n</code> 不能分解为两个平方和，数本身也不是完全平方数。因为假设数 <code>n</code> 可以分解为 <em>n = a_{0}^{2}+a_{1}^{2}</em>，然后通过在表达式中添加平方数 0，即 <em>n = a_{0}^{2}+a_{1}^{2} + 0^2</em>，我们得到了数 <code>n</code> 可以分解为 3 个平方的结论，这与三平方定理相矛盾。因此，结合四平方定理，我们可以断言，如果这个数不满足三平方定理的条件，它只能分解成四个平方和。</p><p>如果这个数满足三平方定理的条件，则可以分解成三个完全平方数。但我们不知道的是，如果这个数可以分解成更少的完全平方数，即一个或两个完全平方数。</p><p>所以在我们把这个数视为底部情况（三平方定理）之前，还有两种情况需要检查，即：</p><p>情况 3.1：如果数字本身是一个完全平方数，这很容易检查，例如 <code>n == int(sqrt(n)) ^ 2</code>。</p><p>情况 3.2：如果这个数可以分解成两个完全平方数和。不幸的是，没有任何数学定理可以帮助我们检查这个情况。我们需要使用枚举方法。</p><p><strong>算法：</strong></p><p>可以按照上面的例子来实现解决方案。</p><ul><li>首先，我们检查数字 <code>n</code> 的形式是否为 <em>n = 4^{k}(8m+7)</em>，如果是，则直接返回 4。</li><li>否则，我们进一步检查这个数本身是否是一个完全平方数，或者这个数是否可以分解为两个完全平方数和。</li><li>在底部的情况下，这个数可以分解为 3 个平方和，但我们也可以根据四平方定理，通过加零，把它分解为 4 个平方。但是我们被要求找出最小的平方数。</li></ul><details>    <summary>数学运算Python</summary><figure class="highlight python"><figcaption><span>[solution5-Python]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSquare</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        sq = int(math.sqrt(n))</span><br><span class="line">        <span class="keyword">return</span> sq*sq == n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># four-square and three-square theorems</span></span><br><span class="line">        <span class="keyword">while</span> (n &amp; <span class="number">3</span>) == <span class="number">0</span>:</span><br><span class="line">            n &gt;&gt;= <span class="number">2</span>      <span class="comment"># reducing the 4^k factor from number</span></span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">7</span>) == <span class="number">7</span>: <span class="comment"># mod 8</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.isSquare(n):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># check if the number can be decomposed into sum of two squares</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(n**(<span class="number">0.5</span>)) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.isSquare(n - i*i):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="comment"># bottom case from the three-square theorem</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></details><details>    <summary>数学运算Java</summary><figure class="highlight java"><figcaption><span>[solution5-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isSquare</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sq = (<span class="keyword">int</span>) Math.sqrt(n);</span><br><span class="line">    <span class="keyword">return</span> n == sq * sq;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// four-square and three-square theorems.</span></span><br><span class="line">    <span class="keyword">while</span> (n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">      n /= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">8</span> == <span class="number">7</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isSquare(n))</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// enumeration to check if the number can be decomposed into sum of two squares.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.isSquare(n - i * i))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bottom case of three-square theorem.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><p>参见<a href="https://leetcode-cn.com/problems/perfect-squares/solution/wan-quan-ping-fang-shu-by-leetcode/" target="_blank" rel="noopener">^1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Breadth-first Search" scheme="http://yoursite.com/tags/Breadth-first-Search/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>337. 打家劫舍III</title>
    <link href="http://yoursite.com/2020/09/03/337.%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII/"/>
    <id>http://yoursite.com/2020/09/03/337. 打家劫舍III/</id>
    <published>2020-09-03T09:08:12.000Z</published>
    <updated>2020-09-03T10:29:43.500Z</updated>
    
    <content type="html"><![CDATA[<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><a id="more"></a><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><p>示例 1:</p><pre><code>输入: [3,2,3,null,3,null,1]     3    / \   2   3    \   \      3   1输出: 7 解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.</code></pre><p>示例 2:</p><pre><code>输入: [3,4,5,1,3,null,1]     3    / \   4   5  / \   \  1   3   1输出: 9解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.</code></pre><h1 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h1><p><strong>思路与算法</strong></p><p>简化一下这个问题：一棵二叉树，树上的每个点都有对应的权值，每个点有两种状态（选中和不选中），问在不能同时选中有父子关系的点的情况下，能选中的点的最大权值和是多少。</p><p>我们可以用 <em>f(o)</em> 表示选择 <em>o</em> 节点的情况下，<em>o</em> 节点的子树上被选择的节点的最大权值和；<em>g(o)</em> 表示不选择 <em>o</em> 节点的情况下，<em>o</em> 节点的子树上被选择的节点的最大权值和；<em>l</em> 和 <em>r</em> 代表 <em>o</em> 的左右孩子。</p><ul><li>当 <em>o</em> 被选中时，<em>o</em> 的左右孩子都不能被选中，故 <em>o</em> 被选中情况下子树上被选中点的最大权值和为 <em>l</em> 和 <em>r</em> 不被选中的最大权值和相加，即 <em>f(o) = g(l) + g(r)</em>。</li><li>当 <em>o</em> 不被选中时，<em>o</em> 的左右孩子可以被选中，也可以不被选中。对于 <em>o</em> 的某个具体的孩子 <em>x</em>，它对 <em>o</em> 的贡献是 <em>x</em> 被选中和不被选中情况下权值和的较大值。故<code>g(o)=max{f(l),g(l)}+max{f(r),g(r)}</code>。</li></ul><p>至此，我们可以用哈希映射来存 <em>f</em> 和 <em>g</em> 的函数值，用深度优先搜索的办法后序遍历这棵二叉树，我们就可以得到每一个节点的 <em>f</em> 和 <em>g</em>。根节点的 <em>f</em> 和 <em>g</em> 的最大值就是我们要找的答案。</p><p>我们不难给出这样的实现：</p><details>    <summary>动态规划C++</summary><figure class="highlight cpp"><figcaption><span>[sol0-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span> &lt;TreeNode*, <span class="keyword">int</span>&gt; f, g;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(o-&gt;left);</span><br><span class="line">        dfs(o-&gt;right);</span><br><span class="line">        f[o] = o-&gt;val + g[o-&gt;left] + g[o-&gt;right];</span><br><span class="line">        g[o] = max(f[o-&gt;left], g[o-&gt;left]) + max(f[o-&gt;right], g[o-&gt;right]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* o)</span> </span>&#123;</span><br><span class="line">        dfs(o);</span><br><span class="line">        <span class="keyword">return</span> max(f[o], g[o]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划Java</summary><figure class="highlight java"><figcaption><span>[sol0-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;TreeNode, Integer&gt; f = <span class="keyword">new</span> HashMap&lt;TreeNode, Integer&gt;();</span><br><span class="line">    Map&lt;TreeNode, Integer&gt; g = <span class="keyword">new</span> HashMap&lt;TreeNode, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(f.getOrDefault(root, <span class="number">0</span>), g.getOrDefault(root, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.left);</span><br><span class="line">        dfs(node.right);</span><br><span class="line">        f.put(node, node.val + g.getOrDefault(node.left, <span class="number">0</span>) + g.getOrDefault(node.right, <span class="number">0</span>));</span><br><span class="line">        g.put(node, Math.max(f.getOrDefault(node.left, <span class="number">0</span>), g.getOrDefault(node.left, <span class="number">0</span>)) + Math.max(f.getOrDefault(node.right, <span class="number">0</span>), g.getOrDefault(node.right, <span class="number">0</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol0-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">const</span> g = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.left);</span><br><span class="line">        dfs(node.right);</span><br><span class="line">        f.set(node, node.val + (g.get(node.left) || <span class="number">0</span>) + (g.get(node.right) || <span class="number">0</span>));</span><br><span class="line">        g.set(node, <span class="built_in">Math</span>.max(f.get(node.left) || <span class="number">0</span>, g.get(node.left) || <span class="number">0</span>) + <span class="built_in">Math</span>.max(f.get(node.right) || <span class="number">0</span>, g.get(node.right) || <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.get(root) || <span class="number">0</span>, g.get(root) || <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>假设二叉树的节点个数为 <em>n</em>。</p><p>我们可以看出，以上的算法对二叉树做了一次后序遍历，时间复杂度是 <em>O(n)</em>；由于递归会使用到栈空间，空间代价是 <em>O(n)</em>，哈希映射的空间代价也是 <em>O(n)</em>，故空间复杂度也是 <em>O(n)</em>。</p><p>我们可以做一个小小的优化，我们发现无论是 <em>f(o)</em> 还是 <em>g(o)<em>，他们最终的值只和 *f(l)</em>、<em>g(l)</em>、<em>f(r)</em>、*g(r)</em> 有关，所以对于每个节点，我们只关心它的孩子节点们的 <em>f</em> 和 <em>g</em> 是多少。我们可以设计一个结构，表示某个节点的 <em>f</em> 和 <em>g</em> 值，在每次递归返回的时候，都把这个点对应的 <em>f</em> 和 <em>g</em> 返回给上一级调用，这样可以省去哈希映射的空间。</p><p>代码如下。</p><p><strong>代码</strong></p><details>    <summary>动态规划C++</summary><figure class="highlight cpp"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SubtreeStatus</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> selected;</span><br><span class="line">    <span class="keyword">int</span> notSelected;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">SubtreeStatus <span class="title">dfs</span><span class="params">(TreeNode* o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> l = dfs(o-&gt;left);</span><br><span class="line">        <span class="keyword">auto</span> r = dfs(o-&gt;right);</span><br><span class="line">        <span class="keyword">int</span> selected = o-&gt;val + l.notSelected + r.notSelected;</span><br><span class="line">        <span class="keyword">int</span> notSelected = max(l.selected, l.notSelected) + max(r.selected, r.notSelected);</span><br><span class="line">        <span class="keyword">return</span> &#123;selected, notSelected&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> rootStatus = dfs(o);</span><br><span class="line">        <span class="keyword">return</span> max(rootStatus.selected, rootStatus.notSelected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] rootStatus = dfs(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(rootStatus[<span class="number">0</span>], rootStatus[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] dfs(TreeNode node) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] l = dfs(node.left);</span><br><span class="line">        <span class="keyword">int</span>[] r = dfs(node.right);</span><br><span class="line">        <span class="keyword">int</span> selected = node.val + l[<span class="number">1</span>] + r[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> notSelected = Math.max(l[<span class="number">0</span>], l[<span class="number">1</span>]) + Math.max(r[<span class="number">0</span>], r[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;selected, notSelected&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> l = dfs(node.left);</span><br><span class="line">        <span class="keyword">const</span> r = dfs(node.right);</span><br><span class="line">        <span class="keyword">const</span> selected = node.val + l[<span class="number">1</span>] + r[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">const</span> notSelected = <span class="built_in">Math</span>.max(l[<span class="number">0</span>], l[<span class="number">1</span>]) + <span class="built_in">Math</span>.max(r[<span class="number">0</span>], r[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> [selected, notSelected];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> rootStatus = dfs(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(rootStatus[<span class="number">0</span>], rootStatus[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划Golang</summary><figure class="highlight golang"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    val := dfs(root)</span><br><span class="line">    <span class="keyword">return</span> max(val[<span class="number">0</span>], val[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(node *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l, r := dfs(node.Left), dfs(node.Right)</span><br><span class="line">    selected := node.Val + l[<span class="number">1</span>] + r[<span class="number">1</span>]</span><br><span class="line">    notSelected := max(l[<span class="number">0</span>], l[<span class="number">1</span>]) + max(r[<span class="number">0</span>], r[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;selected, notSelected&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>动态规划C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SubtreeStatus</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> selected;</span><br><span class="line">    <span class="keyword">int</span> notSelected;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct SubtreeStatus <span class="title">dfs</span><span class="params">(struct TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> (struct SubtreeStatus)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SubtreeStatus</span> <span class="title">l</span> = <span class="title">dfs</span>(<span class="title">root</span>-&gt;<span class="title">left</span>);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SubtreeStatus</span> <span class="title">r</span> = <span class="title">dfs</span>(<span class="title">root</span>-&gt;<span class="title">right</span>);</span></span><br><span class="line">    <span class="keyword">int</span> selected = root-&gt;val + l.notSelected + r.notSelected;</span><br><span class="line">    <span class="keyword">int</span> notSelected = fmax(l.selected, l.notSelected) + fmax(r.selected, r.notSelected);</span><br><span class="line">    <span class="keyword">return</span> (struct SubtreeStatus)&#123;selected, notSelected&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(struct TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SubtreeStatus</span> <span class="title">rootStatus</span> = <span class="title">dfs</span>(<span class="title">root</span>);</span></span><br><span class="line">    <span class="keyword">return</span> fmax(rootStatus.selected, rootStatus.notSelected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O(n)</em>。上文中已分析。</li><li>空间复杂度：<em>O(n)</em>。虽然优化过的版本省去了哈希映射的空间，但是栈空间的使用代价依旧是 <em>O(n)</em>，故空间复杂度不变。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。&lt;/p&gt;
    
    </summary>
    
      <category term="2020年9月" scheme="http://yoursite.com/categories/2020%E5%B9%B49%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
</feed>
